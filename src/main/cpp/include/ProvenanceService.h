/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ProvenanceService_H
#define ProvenanceService_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/cxxfunctional.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include "ProvenanceService_types.h"
#include "EzBakeBaseService.h"



class ProvenanceServiceIf : virtual public  ::ezbake::base::thrift::EzBakeBaseServiceIf {
 public:
  virtual ~ProvenanceServiceIf() {}
  virtual int64_t addAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds, const int32_t maximumExecutionPeriod) = 0;
  virtual void getAgeOffRuleById(AgeOffRule& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId) = 0;
  virtual void getAgeOffRule(AgeOffRule& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name) = 0;
  virtual void updateAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds) = 0;
  virtual void getAllAgeOffRules(std::vector<AgeOffRule> & _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int32_t limit, const int32_t page) = 0;
  virtual int32_t countAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& securityToken) = 0;
  virtual int64_t addDocument(const  ::ezbake::base::thrift::EzSecurityToken& token, const std::string& uri, const std::vector<InheritanceInfo> & parents, const std::vector<AgeOffMapping> & ageOffRules) = 0;
  virtual void addDocuments(std::map<std::string, AddDocumentResult> & _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<AddDocumentEntry> & documents, const std::set<AgeOffMapping> & ageOffRules) = 0;
  virtual int32_t getAddDocumentsMaxSize(const  ::ezbake::base::thrift::EzSecurityToken& securityToken) = 0;
  virtual void startAgeOffEvent(AgeOffInitiationResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId, const  ::ezbake::base::thrift::DateTime& effectiveTime) = 0;
  virtual void markDocumentAsAged(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & agedDocumentIds) = 0;
  virtual void getDocumentInfo(DocumentInfo& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t id, const std::string& uri) = 0;
  virtual void getDocumentAncestors(DerivedResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris) = 0;
  virtual void getDocumentDescendants(DerivedResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris) = 0;
  virtual void markDocumentForPurge(PurgeInitiationResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris, const std::string& name, const std::string& description) = 0;
  virtual void getDocumentUriFromId(PositionsToUris& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<int64_t> & positionsList) = 0;
  virtual void getDocumentConvertedUrisFromIds(ConversionResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & ids) = 0;
  virtual void getDocumentConvertedUrisFromUris(ConversionResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<std::string> & uris) = 0;
  virtual void getPurgeInfo(PurgeInfo& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId) = 0;
  virtual void getAllPurgeIds(std::vector<int64_t> & _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken) = 0;
  virtual void updatePurge(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId, const std::set<int64_t> & completelyPurged, const std::string& note, const bool resolved) = 0;
  virtual void removeDocumentAgeOffRuleInheritance(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t parentId, const std::string& parentUri) = 0;
  virtual void removeDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t ageOffRuleId) = 0;
  virtual void addDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const AgeOffMapping& ageOffMapping) = 0;
  virtual void addDocumentInheritanceInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const InheritanceInfo& inheritanceInfo) = 0;
  virtual void recordObjectAccess(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const ObjectAccessType::type accessType) = 0;
  virtual void fetchUsersDocuments(ResultsAndContinuation& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& userPrincipal, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint) = 0;
  virtual void fetchDocumentUsers(ResultsAndContinuation& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint) = 0;
};

class ProvenanceServiceIfFactory : virtual public  ::ezbake::base::thrift::EzBakeBaseServiceIfFactory {
 public:
  typedef ProvenanceServiceIf Handler;

  virtual ~ProvenanceServiceIfFactory() {}

  virtual ProvenanceServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::ezbake::base::thrift::EzBakeBaseServiceIf* /* handler */) = 0;
};

class ProvenanceServiceIfSingletonFactory : virtual public ProvenanceServiceIfFactory {
 public:
  ProvenanceServiceIfSingletonFactory(const boost::shared_ptr<ProvenanceServiceIf>& iface) : iface_(iface) {}
  virtual ~ProvenanceServiceIfSingletonFactory() {}

  virtual ProvenanceServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::ezbake::base::thrift::EzBakeBaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ProvenanceServiceIf> iface_;
};

class ProvenanceServiceNull : virtual public ProvenanceServiceIf , virtual public  ::ezbake::base::thrift::EzBakeBaseServiceNull {
 public:
  virtual ~ProvenanceServiceNull() {}
  int64_t addAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::string& /* name */, const int64_t /* retentionDurationSeconds */, const int32_t /* maximumExecutionPeriod */) {
    int64_t _return = 0;
    return _return;
  }
  void getAgeOffRuleById(AgeOffRule& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* ruleId */) {
    return;
  }
  void getAgeOffRule(AgeOffRule& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::string& /* name */) {
    return;
  }
  void updateAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::string& /* name */, const int64_t /* retentionDurationSeconds */) {
    return;
  }
  void getAllAgeOffRules(std::vector<AgeOffRule> & /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int32_t /* limit */, const int32_t /* page */) {
    return;
  }
  int32_t countAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */) {
    int32_t _return = 0;
    return _return;
  }
  int64_t addDocument(const  ::ezbake::base::thrift::EzSecurityToken& /* token */, const std::string& /* uri */, const std::vector<InheritanceInfo> & /* parents */, const std::vector<AgeOffMapping> & /* ageOffRules */) {
    int64_t _return = 0;
    return _return;
  }
  void addDocuments(std::map<std::string, AddDocumentResult> & /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::set<AddDocumentEntry> & /* documents */, const std::set<AgeOffMapping> & /* ageOffRules */) {
    return;
  }
  int32_t getAddDocumentsMaxSize(const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */) {
    int32_t _return = 0;
    return _return;
  }
  void startAgeOffEvent(AgeOffInitiationResult& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* ruleId */, const  ::ezbake::base::thrift::DateTime& /* effectiveTime */) {
    return;
  }
  void markDocumentAsAged(const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::set<int64_t> & /* agedDocumentIds */) {
    return;
  }
  void getDocumentInfo(DocumentInfo& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* id */, const std::string& /* uri */) {
    return;
  }
  void getDocumentAncestors(DerivedResult& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::vector<std::string> & /* uris */) {
    return;
  }
  void getDocumentDescendants(DerivedResult& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::vector<std::string> & /* uris */) {
    return;
  }
  void markDocumentForPurge(PurgeInitiationResult& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::vector<std::string> & /* uris */, const std::string& /* name */, const std::string& /* description */) {
    return;
  }
  void getDocumentUriFromId(PositionsToUris& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::vector<int64_t> & /* positionsList */) {
    return;
  }
  void getDocumentConvertedUrisFromIds(ConversionResult& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::set<int64_t> & /* ids */) {
    return;
  }
  void getDocumentConvertedUrisFromUris(ConversionResult& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::set<std::string> & /* uris */) {
    return;
  }
  void getPurgeInfo(PurgeInfo& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* purgeId */) {
    return;
  }
  void getAllPurgeIds(std::vector<int64_t> & /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */) {
    return;
  }
  void updatePurge(const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* purgeId */, const std::set<int64_t> & /* completelyPurged */, const std::string& /* note */, const bool /* resolved */) {
    return;
  }
  void removeDocumentAgeOffRuleInheritance(const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* documentId */, const std::string& /* documentUri */, const int64_t /* parentId */, const std::string& /* parentUri */) {
    return;
  }
  void removeDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* documentId */, const std::string& /* documentUri */, const int64_t /* ageOffRuleId */) {
    return;
  }
  void addDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* documentId */, const std::string& /* documentUri */, const AgeOffMapping& /* ageOffMapping */) {
    return;
  }
  void addDocumentInheritanceInfo(const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* documentId */, const std::string& /* documentUri */, const InheritanceInfo& /* inheritanceInfo */) {
    return;
  }
  void recordObjectAccess(const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::string& /* documentUri */, const ObjectAccessType::type /* accessType */) {
    return;
  }
  void fetchUsersDocuments(ResultsAndContinuation& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::string& /* userPrincipal */, const  ::ezbake::base::thrift::DateTime& /* startDateTime */, const  ::ezbake::base::thrift::DateTime& /* stopDateTime */, const int32_t /* numToFetch */, const AccumuloContinuationPoint& /* continuationPoint */) {
    return;
  }
  void fetchDocumentUsers(ResultsAndContinuation& /* _return */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::string& /* documentUri */, const  ::ezbake::base::thrift::DateTime& /* startDateTime */, const  ::ezbake::base::thrift::DateTime& /* stopDateTime */, const int32_t /* numToFetch */, const AccumuloContinuationPoint& /* continuationPoint */) {
    return;
  }
};


class ProvenanceService_addAgeOffRule_args {
 public:

  ProvenanceService_addAgeOffRule_args() : name(), retentionDurationSeconds(0), maximumExecutionPeriod(0) {
  }

  virtual ~ProvenanceService_addAgeOffRule_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::string name;
  int64_t retentionDurationSeconds;
  int32_t maximumExecutionPeriod;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_retentionDurationSeconds(const int64_t val) {
    retentionDurationSeconds = val;
  }

  void __set_maximumExecutionPeriod(const int32_t val) {
    maximumExecutionPeriod = val;
  }

  bool operator == (const ProvenanceService_addAgeOffRule_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(retentionDurationSeconds == rhs.retentionDurationSeconds))
      return false;
    if (!(maximumExecutionPeriod == rhs.maximumExecutionPeriod))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_addAgeOffRule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_addAgeOffRule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_addAgeOffRule_pargs {
 public:


  virtual ~ProvenanceService_addAgeOffRule_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::string* name;
  const int64_t* retentionDurationSeconds;
  const int32_t* maximumExecutionPeriod;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addAgeOffRule_result__isset {
  _ProvenanceService_addAgeOffRule_result__isset() : success(false), security(false), nameExists(false), illegalAgeOffDurationSeconds(false), illegalAgeOffName(false), illegalMaxPeriod(false) {}
  bool success;
  bool security;
  bool nameExists;
  bool illegalAgeOffDurationSeconds;
  bool illegalAgeOffName;
  bool illegalMaxPeriod;
} _ProvenanceService_addAgeOffRule_result__isset;

class ProvenanceService_addAgeOffRule_result {
 public:

  ProvenanceService_addAgeOffRule_result() : success(0) {
  }

  virtual ~ProvenanceService_addAgeOffRule_result() throw() {}

  int64_t success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceAgeOffRuleNameExistsException nameExists;
  ProvenanceIllegalAgeOffDurationSecondsException illegalAgeOffDurationSeconds;
  ProvenanceIllegalAgeOffRuleNameException illegalAgeOffName;
  ProvenanceIllegalMaximumExecutionPeriodException illegalMaxPeriod;

  _ProvenanceService_addAgeOffRule_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_nameExists(const ProvenanceAgeOffRuleNameExistsException& val) {
    nameExists = val;
  }

  void __set_illegalAgeOffDurationSeconds(const ProvenanceIllegalAgeOffDurationSecondsException& val) {
    illegalAgeOffDurationSeconds = val;
  }

  void __set_illegalAgeOffName(const ProvenanceIllegalAgeOffRuleNameException& val) {
    illegalAgeOffName = val;
  }

  void __set_illegalMaxPeriod(const ProvenanceIllegalMaximumExecutionPeriodException& val) {
    illegalMaxPeriod = val;
  }

  bool operator == (const ProvenanceService_addAgeOffRule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    if (!(nameExists == rhs.nameExists))
      return false;
    if (!(illegalAgeOffDurationSeconds == rhs.illegalAgeOffDurationSeconds))
      return false;
    if (!(illegalAgeOffName == rhs.illegalAgeOffName))
      return false;
    if (!(illegalMaxPeriod == rhs.illegalMaxPeriod))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_addAgeOffRule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_addAgeOffRule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addAgeOffRule_presult__isset {
  _ProvenanceService_addAgeOffRule_presult__isset() : success(false), security(false), nameExists(false), illegalAgeOffDurationSeconds(false), illegalAgeOffName(false), illegalMaxPeriod(false) {}
  bool success;
  bool security;
  bool nameExists;
  bool illegalAgeOffDurationSeconds;
  bool illegalAgeOffName;
  bool illegalMaxPeriod;
} _ProvenanceService_addAgeOffRule_presult__isset;

class ProvenanceService_addAgeOffRule_presult {
 public:


  virtual ~ProvenanceService_addAgeOffRule_presult() throw() {}

  int64_t* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceAgeOffRuleNameExistsException nameExists;
  ProvenanceIllegalAgeOffDurationSecondsException illegalAgeOffDurationSeconds;
  ProvenanceIllegalAgeOffRuleNameException illegalAgeOffName;
  ProvenanceIllegalMaximumExecutionPeriodException illegalMaxPeriod;

  _ProvenanceService_addAgeOffRule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getAgeOffRuleById_args {
 public:

  ProvenanceService_getAgeOffRuleById_args() : ruleId(0) {
  }

  virtual ~ProvenanceService_getAgeOffRuleById_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  int64_t ruleId;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_ruleId(const int64_t val) {
    ruleId = val;
  }

  bool operator == (const ProvenanceService_getAgeOffRuleById_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(ruleId == rhs.ruleId))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getAgeOffRuleById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getAgeOffRuleById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getAgeOffRuleById_pargs {
 public:


  virtual ~ProvenanceService_getAgeOffRuleById_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const int64_t* ruleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getAgeOffRuleById_result__isset {
  _ProvenanceService_getAgeOffRuleById_result__isset() : success(false), security(false), ruleNotFound(false) {}
  bool success;
  bool security;
  bool ruleNotFound;
} _ProvenanceService_getAgeOffRuleById_result__isset;

class ProvenanceService_getAgeOffRuleById_result {
 public:

  ProvenanceService_getAgeOffRuleById_result() {
  }

  virtual ~ProvenanceService_getAgeOffRuleById_result() throw() {}

  AgeOffRule success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;

  _ProvenanceService_getAgeOffRuleById_result__isset __isset;

  void __set_success(const AgeOffRule& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_ruleNotFound(const ProvenanceAgeOffRuleNotFoundException& val) {
    ruleNotFound = val;
  }

  bool operator == (const ProvenanceService_getAgeOffRuleById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    if (!(ruleNotFound == rhs.ruleNotFound))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getAgeOffRuleById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getAgeOffRuleById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getAgeOffRuleById_presult__isset {
  _ProvenanceService_getAgeOffRuleById_presult__isset() : success(false), security(false), ruleNotFound(false) {}
  bool success;
  bool security;
  bool ruleNotFound;
} _ProvenanceService_getAgeOffRuleById_presult__isset;

class ProvenanceService_getAgeOffRuleById_presult {
 public:


  virtual ~ProvenanceService_getAgeOffRuleById_presult() throw() {}

  AgeOffRule* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;

  _ProvenanceService_getAgeOffRuleById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getAgeOffRule_args {
 public:

  ProvenanceService_getAgeOffRule_args() : name() {
  }

  virtual ~ProvenanceService_getAgeOffRule_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::string name;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const ProvenanceService_getAgeOffRule_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getAgeOffRule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getAgeOffRule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getAgeOffRule_pargs {
 public:


  virtual ~ProvenanceService_getAgeOffRule_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getAgeOffRule_result__isset {
  _ProvenanceService_getAgeOffRule_result__isset() : success(false), security(false), ruleNotFound(false) {}
  bool success;
  bool security;
  bool ruleNotFound;
} _ProvenanceService_getAgeOffRule_result__isset;

class ProvenanceService_getAgeOffRule_result {
 public:

  ProvenanceService_getAgeOffRule_result() {
  }

  virtual ~ProvenanceService_getAgeOffRule_result() throw() {}

  AgeOffRule success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;

  _ProvenanceService_getAgeOffRule_result__isset __isset;

  void __set_success(const AgeOffRule& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_ruleNotFound(const ProvenanceAgeOffRuleNotFoundException& val) {
    ruleNotFound = val;
  }

  bool operator == (const ProvenanceService_getAgeOffRule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    if (!(ruleNotFound == rhs.ruleNotFound))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getAgeOffRule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getAgeOffRule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getAgeOffRule_presult__isset {
  _ProvenanceService_getAgeOffRule_presult__isset() : success(false), security(false), ruleNotFound(false) {}
  bool success;
  bool security;
  bool ruleNotFound;
} _ProvenanceService_getAgeOffRule_presult__isset;

class ProvenanceService_getAgeOffRule_presult {
 public:


  virtual ~ProvenanceService_getAgeOffRule_presult() throw() {}

  AgeOffRule* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;

  _ProvenanceService_getAgeOffRule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_updateAgeOffRule_args {
 public:

  ProvenanceService_updateAgeOffRule_args() : name(), retentionDurationSeconds(0) {
  }

  virtual ~ProvenanceService_updateAgeOffRule_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::string name;
  int64_t retentionDurationSeconds;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_retentionDurationSeconds(const int64_t val) {
    retentionDurationSeconds = val;
  }

  bool operator == (const ProvenanceService_updateAgeOffRule_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(retentionDurationSeconds == rhs.retentionDurationSeconds))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_updateAgeOffRule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_updateAgeOffRule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_updateAgeOffRule_pargs {
 public:


  virtual ~ProvenanceService_updateAgeOffRule_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::string* name;
  const int64_t* retentionDurationSeconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_updateAgeOffRule_result__isset {
  _ProvenanceService_updateAgeOffRule_result__isset() : security(false), ruleNotFound(false), illegalAgeOffDurationSeconds(false), illegalAgeOffName(false) {}
  bool security;
  bool ruleNotFound;
  bool illegalAgeOffDurationSeconds;
  bool illegalAgeOffName;
} _ProvenanceService_updateAgeOffRule_result__isset;

class ProvenanceService_updateAgeOffRule_result {
 public:

  ProvenanceService_updateAgeOffRule_result() {
  }

  virtual ~ProvenanceService_updateAgeOffRule_result() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;
  ProvenanceIllegalAgeOffDurationSecondsException illegalAgeOffDurationSeconds;
  ProvenanceIllegalAgeOffRuleNameException illegalAgeOffName;

  _ProvenanceService_updateAgeOffRule_result__isset __isset;

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_ruleNotFound(const ProvenanceAgeOffRuleNotFoundException& val) {
    ruleNotFound = val;
  }

  void __set_illegalAgeOffDurationSeconds(const ProvenanceIllegalAgeOffDurationSecondsException& val) {
    illegalAgeOffDurationSeconds = val;
  }

  void __set_illegalAgeOffName(const ProvenanceIllegalAgeOffRuleNameException& val) {
    illegalAgeOffName = val;
  }

  bool operator == (const ProvenanceService_updateAgeOffRule_result & rhs) const
  {
    if (!(security == rhs.security))
      return false;
    if (!(ruleNotFound == rhs.ruleNotFound))
      return false;
    if (!(illegalAgeOffDurationSeconds == rhs.illegalAgeOffDurationSeconds))
      return false;
    if (!(illegalAgeOffName == rhs.illegalAgeOffName))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_updateAgeOffRule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_updateAgeOffRule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_updateAgeOffRule_presult__isset {
  _ProvenanceService_updateAgeOffRule_presult__isset() : security(false), ruleNotFound(false), illegalAgeOffDurationSeconds(false), illegalAgeOffName(false) {}
  bool security;
  bool ruleNotFound;
  bool illegalAgeOffDurationSeconds;
  bool illegalAgeOffName;
} _ProvenanceService_updateAgeOffRule_presult__isset;

class ProvenanceService_updateAgeOffRule_presult {
 public:


  virtual ~ProvenanceService_updateAgeOffRule_presult() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;
  ProvenanceIllegalAgeOffDurationSecondsException illegalAgeOffDurationSeconds;
  ProvenanceIllegalAgeOffRuleNameException illegalAgeOffName;

  _ProvenanceService_updateAgeOffRule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getAllAgeOffRules_args__isset {
  _ProvenanceService_getAllAgeOffRules_args__isset() : limit(false), page(false) {}
  bool limit;
  bool page;
} _ProvenanceService_getAllAgeOffRules_args__isset;

class ProvenanceService_getAllAgeOffRules_args {
 public:

  ProvenanceService_getAllAgeOffRules_args() : limit(0), page(0) {
  }

  virtual ~ProvenanceService_getAllAgeOffRules_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  int32_t limit;
  int32_t page;

  _ProvenanceService_getAllAgeOffRules_args__isset __isset;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  void __set_page(const int32_t val) {
    page = val;
  }

  bool operator == (const ProvenanceService_getAllAgeOffRules_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getAllAgeOffRules_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getAllAgeOffRules_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getAllAgeOffRules_pargs {
 public:


  virtual ~ProvenanceService_getAllAgeOffRules_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const int32_t* limit;
  const int32_t* page;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getAllAgeOffRules_result__isset {
  _ProvenanceService_getAllAgeOffRules_result__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getAllAgeOffRules_result__isset;

class ProvenanceService_getAllAgeOffRules_result {
 public:

  ProvenanceService_getAllAgeOffRules_result() {
  }

  virtual ~ProvenanceService_getAllAgeOffRules_result() throw() {}

  std::vector<AgeOffRule>  success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getAllAgeOffRules_result__isset __isset;

  void __set_success(const std::vector<AgeOffRule> & val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_getAllAgeOffRules_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getAllAgeOffRules_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getAllAgeOffRules_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getAllAgeOffRules_presult__isset {
  _ProvenanceService_getAllAgeOffRules_presult__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getAllAgeOffRules_presult__isset;

class ProvenanceService_getAllAgeOffRules_presult {
 public:


  virtual ~ProvenanceService_getAllAgeOffRules_presult() throw() {}

  std::vector<AgeOffRule> * success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getAllAgeOffRules_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_countAgeOffRules_args {
 public:

  ProvenanceService_countAgeOffRules_args() {
  }

  virtual ~ProvenanceService_countAgeOffRules_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  bool operator == (const ProvenanceService_countAgeOffRules_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_countAgeOffRules_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_countAgeOffRules_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_countAgeOffRules_pargs {
 public:


  virtual ~ProvenanceService_countAgeOffRules_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_countAgeOffRules_result__isset {
  _ProvenanceService_countAgeOffRules_result__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_countAgeOffRules_result__isset;

class ProvenanceService_countAgeOffRules_result {
 public:

  ProvenanceService_countAgeOffRules_result() : success(0) {
  }

  virtual ~ProvenanceService_countAgeOffRules_result() throw() {}

  int32_t success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_countAgeOffRules_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_countAgeOffRules_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_countAgeOffRules_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_countAgeOffRules_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_countAgeOffRules_presult__isset {
  _ProvenanceService_countAgeOffRules_presult__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_countAgeOffRules_presult__isset;

class ProvenanceService_countAgeOffRules_presult {
 public:


  virtual ~ProvenanceService_countAgeOffRules_presult() throw() {}

  int32_t* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_countAgeOffRules_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addDocument_args__isset {
  _ProvenanceService_addDocument_args__isset() : parents(false), ageOffRules(false) {}
  bool parents;
  bool ageOffRules;
} _ProvenanceService_addDocument_args__isset;

class ProvenanceService_addDocument_args {
 public:

  ProvenanceService_addDocument_args() : uri() {
  }

  virtual ~ProvenanceService_addDocument_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken token;
  std::string uri;
  std::vector<InheritanceInfo>  parents;
  std::vector<AgeOffMapping>  ageOffRules;

  _ProvenanceService_addDocument_args__isset __isset;

  void __set_token(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    token = val;
  }

  void __set_uri(const std::string& val) {
    uri = val;
  }

  void __set_parents(const std::vector<InheritanceInfo> & val) {
    parents = val;
  }

  void __set_ageOffRules(const std::vector<AgeOffMapping> & val) {
    ageOffRules = val;
  }

  bool operator == (const ProvenanceService_addDocument_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(uri == rhs.uri))
      return false;
    if (!(parents == rhs.parents))
      return false;
    if (!(ageOffRules == rhs.ageOffRules))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_addDocument_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_addDocument_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_addDocument_pargs {
 public:


  virtual ~ProvenanceService_addDocument_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* token;
  const std::string* uri;
  const std::vector<InheritanceInfo> * parents;
  const std::vector<AgeOffMapping> * ageOffRules;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addDocument_result__isset {
  _ProvenanceService_addDocument_result__isset() : success(false), security(false), documentExists(false), ruleNotFound(false), parentNotFound(false), circularInheritanceNotAllowed(false) {}
  bool success;
  bool security;
  bool documentExists;
  bool ruleNotFound;
  bool parentNotFound;
  bool circularInheritanceNotAllowed;
} _ProvenanceService_addDocument_result__isset;

class ProvenanceService_addDocument_result {
 public:

  ProvenanceService_addDocument_result() : success(0) {
  }

  virtual ~ProvenanceService_addDocument_result() throw() {}

  int64_t success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentExistsException documentExists;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;
  ProvenanceParentDocumentNotFoundException parentNotFound;
  ProvenanceCircularInheritanceNotAllowedException circularInheritanceNotAllowed;

  _ProvenanceService_addDocument_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_documentExists(const ProvenanceDocumentExistsException& val) {
    documentExists = val;
  }

  void __set_ruleNotFound(const ProvenanceAgeOffRuleNotFoundException& val) {
    ruleNotFound = val;
  }

  void __set_parentNotFound(const ProvenanceParentDocumentNotFoundException& val) {
    parentNotFound = val;
  }

  void __set_circularInheritanceNotAllowed(const ProvenanceCircularInheritanceNotAllowedException& val) {
    circularInheritanceNotAllowed = val;
  }

  bool operator == (const ProvenanceService_addDocument_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    if (!(documentExists == rhs.documentExists))
      return false;
    if (!(ruleNotFound == rhs.ruleNotFound))
      return false;
    if (!(parentNotFound == rhs.parentNotFound))
      return false;
    if (!(circularInheritanceNotAllowed == rhs.circularInheritanceNotAllowed))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_addDocument_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_addDocument_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addDocument_presult__isset {
  _ProvenanceService_addDocument_presult__isset() : success(false), security(false), documentExists(false), ruleNotFound(false), parentNotFound(false), circularInheritanceNotAllowed(false) {}
  bool success;
  bool security;
  bool documentExists;
  bool ruleNotFound;
  bool parentNotFound;
  bool circularInheritanceNotAllowed;
} _ProvenanceService_addDocument_presult__isset;

class ProvenanceService_addDocument_presult {
 public:


  virtual ~ProvenanceService_addDocument_presult() throw() {}

  int64_t* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentExistsException documentExists;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;
  ProvenanceParentDocumentNotFoundException parentNotFound;
  ProvenanceCircularInheritanceNotAllowedException circularInheritanceNotAllowed;

  _ProvenanceService_addDocument_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addDocuments_args__isset {
  _ProvenanceService_addDocuments_args__isset() : ageOffRules(false) {}
  bool ageOffRules;
} _ProvenanceService_addDocuments_args__isset;

class ProvenanceService_addDocuments_args {
 public:

  ProvenanceService_addDocuments_args() {
  }

  virtual ~ProvenanceService_addDocuments_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::set<AddDocumentEntry>  documents;
  std::set<AgeOffMapping>  ageOffRules;

  _ProvenanceService_addDocuments_args__isset __isset;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_documents(const std::set<AddDocumentEntry> & val) {
    documents = val;
  }

  void __set_ageOffRules(const std::set<AgeOffMapping> & val) {
    ageOffRules = val;
  }

  bool operator == (const ProvenanceService_addDocuments_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(documents == rhs.documents))
      return false;
    if (!(ageOffRules == rhs.ageOffRules))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_addDocuments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_addDocuments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_addDocuments_pargs {
 public:


  virtual ~ProvenanceService_addDocuments_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::set<AddDocumentEntry> * documents;
  const std::set<AgeOffMapping> * ageOffRules;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addDocuments_result__isset {
  _ProvenanceService_addDocuments_result__isset() : success(false), security(false), ruleNotFound(false), exceedsMaxSize(false) {}
  bool success;
  bool security;
  bool ruleNotFound;
  bool exceedsMaxSize;
} _ProvenanceService_addDocuments_result__isset;

class ProvenanceService_addDocuments_result {
 public:

  ProvenanceService_addDocuments_result() {
  }

  virtual ~ProvenanceService_addDocuments_result() throw() {}

  std::map<std::string, AddDocumentResult>  success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;
  ProvenanceExceedsMaxBatchSizeException exceedsMaxSize;

  _ProvenanceService_addDocuments_result__isset __isset;

  void __set_success(const std::map<std::string, AddDocumentResult> & val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_ruleNotFound(const ProvenanceAgeOffRuleNotFoundException& val) {
    ruleNotFound = val;
  }

  void __set_exceedsMaxSize(const ProvenanceExceedsMaxBatchSizeException& val) {
    exceedsMaxSize = val;
  }

  bool operator == (const ProvenanceService_addDocuments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    if (!(ruleNotFound == rhs.ruleNotFound))
      return false;
    if (!(exceedsMaxSize == rhs.exceedsMaxSize))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_addDocuments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_addDocuments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addDocuments_presult__isset {
  _ProvenanceService_addDocuments_presult__isset() : success(false), security(false), ruleNotFound(false), exceedsMaxSize(false) {}
  bool success;
  bool security;
  bool ruleNotFound;
  bool exceedsMaxSize;
} _ProvenanceService_addDocuments_presult__isset;

class ProvenanceService_addDocuments_presult {
 public:


  virtual ~ProvenanceService_addDocuments_presult() throw() {}

  std::map<std::string, AddDocumentResult> * success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;
  ProvenanceExceedsMaxBatchSizeException exceedsMaxSize;

  _ProvenanceService_addDocuments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getAddDocumentsMaxSize_args {
 public:

  ProvenanceService_getAddDocumentsMaxSize_args() {
  }

  virtual ~ProvenanceService_getAddDocumentsMaxSize_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  bool operator == (const ProvenanceService_getAddDocumentsMaxSize_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getAddDocumentsMaxSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getAddDocumentsMaxSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getAddDocumentsMaxSize_pargs {
 public:


  virtual ~ProvenanceService_getAddDocumentsMaxSize_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getAddDocumentsMaxSize_result__isset {
  _ProvenanceService_getAddDocumentsMaxSize_result__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getAddDocumentsMaxSize_result__isset;

class ProvenanceService_getAddDocumentsMaxSize_result {
 public:

  ProvenanceService_getAddDocumentsMaxSize_result() : success(0) {
  }

  virtual ~ProvenanceService_getAddDocumentsMaxSize_result() throw() {}

  int32_t success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getAddDocumentsMaxSize_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_getAddDocumentsMaxSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getAddDocumentsMaxSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getAddDocumentsMaxSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getAddDocumentsMaxSize_presult__isset {
  _ProvenanceService_getAddDocumentsMaxSize_presult__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getAddDocumentsMaxSize_presult__isset;

class ProvenanceService_getAddDocumentsMaxSize_presult {
 public:


  virtual ~ProvenanceService_getAddDocumentsMaxSize_presult() throw() {}

  int32_t* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getAddDocumentsMaxSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_startAgeOffEvent_args__isset {
  _ProvenanceService_startAgeOffEvent_args__isset() : effectiveTime(false) {}
  bool effectiveTime;
} _ProvenanceService_startAgeOffEvent_args__isset;

class ProvenanceService_startAgeOffEvent_args {
 public:

  ProvenanceService_startAgeOffEvent_args() : ruleId(0) {
  }

  virtual ~ProvenanceService_startAgeOffEvent_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  int64_t ruleId;
   ::ezbake::base::thrift::DateTime effectiveTime;

  _ProvenanceService_startAgeOffEvent_args__isset __isset;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_ruleId(const int64_t val) {
    ruleId = val;
  }

  void __set_effectiveTime(const  ::ezbake::base::thrift::DateTime& val) {
    effectiveTime = val;
  }

  bool operator == (const ProvenanceService_startAgeOffEvent_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(ruleId == rhs.ruleId))
      return false;
    if (!(effectiveTime == rhs.effectiveTime))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_startAgeOffEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_startAgeOffEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_startAgeOffEvent_pargs {
 public:


  virtual ~ProvenanceService_startAgeOffEvent_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const int64_t* ruleId;
  const  ::ezbake::base::thrift::DateTime* effectiveTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_startAgeOffEvent_result__isset {
  _ProvenanceService_startAgeOffEvent_result__isset() : success(false), security(false), ruleNotFound(false) {}
  bool success;
  bool security;
  bool ruleNotFound;
} _ProvenanceService_startAgeOffEvent_result__isset;

class ProvenanceService_startAgeOffEvent_result {
 public:

  ProvenanceService_startAgeOffEvent_result() {
  }

  virtual ~ProvenanceService_startAgeOffEvent_result() throw() {}

  AgeOffInitiationResult success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;

  _ProvenanceService_startAgeOffEvent_result__isset __isset;

  void __set_success(const AgeOffInitiationResult& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_ruleNotFound(const ProvenanceAgeOffRuleNotFoundException& val) {
    ruleNotFound = val;
  }

  bool operator == (const ProvenanceService_startAgeOffEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    if (!(ruleNotFound == rhs.ruleNotFound))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_startAgeOffEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_startAgeOffEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_startAgeOffEvent_presult__isset {
  _ProvenanceService_startAgeOffEvent_presult__isset() : success(false), security(false), ruleNotFound(false) {}
  bool success;
  bool security;
  bool ruleNotFound;
} _ProvenanceService_startAgeOffEvent_presult__isset;

class ProvenanceService_startAgeOffEvent_presult {
 public:


  virtual ~ProvenanceService_startAgeOffEvent_presult() throw() {}

  AgeOffInitiationResult* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;

  _ProvenanceService_startAgeOffEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_markDocumentAsAged_args {
 public:

  ProvenanceService_markDocumentAsAged_args() {
  }

  virtual ~ProvenanceService_markDocumentAsAged_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::set<int64_t>  agedDocumentIds;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_agedDocumentIds(const std::set<int64_t> & val) {
    agedDocumentIds = val;
  }

  bool operator == (const ProvenanceService_markDocumentAsAged_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(agedDocumentIds == rhs.agedDocumentIds))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_markDocumentAsAged_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_markDocumentAsAged_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_markDocumentAsAged_pargs {
 public:


  virtual ~ProvenanceService_markDocumentAsAged_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::set<int64_t> * agedDocumentIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_markDocumentAsAged_result__isset {
  _ProvenanceService_markDocumentAsAged_result__isset() : security(false), documentNotFound(false) {}
  bool security;
  bool documentNotFound;
} _ProvenanceService_markDocumentAsAged_result__isset;

class ProvenanceService_markDocumentAsAged_result {
 public:

  ProvenanceService_markDocumentAsAged_result() {
  }

  virtual ~ProvenanceService_markDocumentAsAged_result() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentNotFoundException documentNotFound;

  _ProvenanceService_markDocumentAsAged_result__isset __isset;

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_documentNotFound(const ProvenanceDocumentNotFoundException& val) {
    documentNotFound = val;
  }

  bool operator == (const ProvenanceService_markDocumentAsAged_result & rhs) const
  {
    if (!(security == rhs.security))
      return false;
    if (!(documentNotFound == rhs.documentNotFound))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_markDocumentAsAged_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_markDocumentAsAged_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_markDocumentAsAged_presult__isset {
  _ProvenanceService_markDocumentAsAged_presult__isset() : security(false), documentNotFound(false) {}
  bool security;
  bool documentNotFound;
} _ProvenanceService_markDocumentAsAged_presult__isset;

class ProvenanceService_markDocumentAsAged_presult {
 public:


  virtual ~ProvenanceService_markDocumentAsAged_presult() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentNotFoundException documentNotFound;

  _ProvenanceService_markDocumentAsAged_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentInfo_args__isset {
  _ProvenanceService_getDocumentInfo_args__isset() : id(false), uri(false) {}
  bool id;
  bool uri;
} _ProvenanceService_getDocumentInfo_args__isset;

class ProvenanceService_getDocumentInfo_args {
 public:

  ProvenanceService_getDocumentInfo_args() : id(0), uri() {
  }

  virtual ~ProvenanceService_getDocumentInfo_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  int64_t id;
  std::string uri;

  _ProvenanceService_getDocumentInfo_args__isset __isset;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_uri(const std::string& val) {
    uri = val;
  }

  bool operator == (const ProvenanceService_getDocumentInfo_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(uri == rhs.uri))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getDocumentInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getDocumentInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getDocumentInfo_pargs {
 public:


  virtual ~ProvenanceService_getDocumentInfo_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const int64_t* id;
  const std::string* uri;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentInfo_result__isset {
  _ProvenanceService_getDocumentInfo_result__isset() : success(false), security(false), docNotFound(false) {}
  bool success;
  bool security;
  bool docNotFound;
} _ProvenanceService_getDocumentInfo_result__isset;

class ProvenanceService_getDocumentInfo_result {
 public:

  ProvenanceService_getDocumentInfo_result() {
  }

  virtual ~ProvenanceService_getDocumentInfo_result() throw() {}

  DocumentInfo success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentNotFoundException docNotFound;

  _ProvenanceService_getDocumentInfo_result__isset __isset;

  void __set_success(const DocumentInfo& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_docNotFound(const ProvenanceDocumentNotFoundException& val) {
    docNotFound = val;
  }

  bool operator == (const ProvenanceService_getDocumentInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    if (!(docNotFound == rhs.docNotFound))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getDocumentInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getDocumentInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentInfo_presult__isset {
  _ProvenanceService_getDocumentInfo_presult__isset() : success(false), security(false), docNotFound(false) {}
  bool success;
  bool security;
  bool docNotFound;
} _ProvenanceService_getDocumentInfo_presult__isset;

class ProvenanceService_getDocumentInfo_presult {
 public:


  virtual ~ProvenanceService_getDocumentInfo_presult() throw() {}

  DocumentInfo* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentNotFoundException docNotFound;

  _ProvenanceService_getDocumentInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getDocumentAncestors_args {
 public:

  ProvenanceService_getDocumentAncestors_args() {
  }

  virtual ~ProvenanceService_getDocumentAncestors_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::vector<std::string>  uris;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_uris(const std::vector<std::string> & val) {
    uris = val;
  }

  bool operator == (const ProvenanceService_getDocumentAncestors_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(uris == rhs.uris))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getDocumentAncestors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getDocumentAncestors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getDocumentAncestors_pargs {
 public:


  virtual ~ProvenanceService_getDocumentAncestors_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::vector<std::string> * uris;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentAncestors_result__isset {
  _ProvenanceService_getDocumentAncestors_result__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getDocumentAncestors_result__isset;

class ProvenanceService_getDocumentAncestors_result {
 public:

  ProvenanceService_getDocumentAncestors_result() {
  }

  virtual ~ProvenanceService_getDocumentAncestors_result() throw() {}

  DerivedResult success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getDocumentAncestors_result__isset __isset;

  void __set_success(const DerivedResult& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_getDocumentAncestors_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getDocumentAncestors_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getDocumentAncestors_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentAncestors_presult__isset {
  _ProvenanceService_getDocumentAncestors_presult__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getDocumentAncestors_presult__isset;

class ProvenanceService_getDocumentAncestors_presult {
 public:


  virtual ~ProvenanceService_getDocumentAncestors_presult() throw() {}

  DerivedResult* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getDocumentAncestors_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getDocumentDescendants_args {
 public:

  ProvenanceService_getDocumentDescendants_args() {
  }

  virtual ~ProvenanceService_getDocumentDescendants_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::vector<std::string>  uris;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_uris(const std::vector<std::string> & val) {
    uris = val;
  }

  bool operator == (const ProvenanceService_getDocumentDescendants_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(uris == rhs.uris))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getDocumentDescendants_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getDocumentDescendants_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getDocumentDescendants_pargs {
 public:


  virtual ~ProvenanceService_getDocumentDescendants_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::vector<std::string> * uris;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentDescendants_result__isset {
  _ProvenanceService_getDocumentDescendants_result__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getDocumentDescendants_result__isset;

class ProvenanceService_getDocumentDescendants_result {
 public:

  ProvenanceService_getDocumentDescendants_result() {
  }

  virtual ~ProvenanceService_getDocumentDescendants_result() throw() {}

  DerivedResult success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getDocumentDescendants_result__isset __isset;

  void __set_success(const DerivedResult& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_getDocumentDescendants_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getDocumentDescendants_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getDocumentDescendants_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentDescendants_presult__isset {
  _ProvenanceService_getDocumentDescendants_presult__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getDocumentDescendants_presult__isset;

class ProvenanceService_getDocumentDescendants_presult {
 public:


  virtual ~ProvenanceService_getDocumentDescendants_presult() throw() {}

  DerivedResult* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getDocumentDescendants_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_markDocumentForPurge_args__isset {
  _ProvenanceService_markDocumentForPurge_args__isset() : name(false), description(false) {}
  bool name;
  bool description;
} _ProvenanceService_markDocumentForPurge_args__isset;

class ProvenanceService_markDocumentForPurge_args {
 public:

  ProvenanceService_markDocumentForPurge_args() : name(), description() {
  }

  virtual ~ProvenanceService_markDocumentForPurge_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::vector<std::string>  uris;
  std::string name;
  std::string description;

  _ProvenanceService_markDocumentForPurge_args__isset __isset;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_uris(const std::vector<std::string> & val) {
    uris = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const ProvenanceService_markDocumentForPurge_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(uris == rhs.uris))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_markDocumentForPurge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_markDocumentForPurge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_markDocumentForPurge_pargs {
 public:


  virtual ~ProvenanceService_markDocumentForPurge_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::vector<std::string> * uris;
  const std::string* name;
  const std::string* description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_markDocumentForPurge_result__isset {
  _ProvenanceService_markDocumentForPurge_result__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_markDocumentForPurge_result__isset;

class ProvenanceService_markDocumentForPurge_result {
 public:

  ProvenanceService_markDocumentForPurge_result() {
  }

  virtual ~ProvenanceService_markDocumentForPurge_result() throw() {}

  PurgeInitiationResult success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_markDocumentForPurge_result__isset __isset;

  void __set_success(const PurgeInitiationResult& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_markDocumentForPurge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_markDocumentForPurge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_markDocumentForPurge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_markDocumentForPurge_presult__isset {
  _ProvenanceService_markDocumentForPurge_presult__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_markDocumentForPurge_presult__isset;

class ProvenanceService_markDocumentForPurge_presult {
 public:


  virtual ~ProvenanceService_markDocumentForPurge_presult() throw() {}

  PurgeInitiationResult* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_markDocumentForPurge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getDocumentUriFromId_args {
 public:

  ProvenanceService_getDocumentUriFromId_args() {
  }

  virtual ~ProvenanceService_getDocumentUriFromId_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::vector<int64_t>  positionsList;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_positionsList(const std::vector<int64_t> & val) {
    positionsList = val;
  }

  bool operator == (const ProvenanceService_getDocumentUriFromId_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(positionsList == rhs.positionsList))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getDocumentUriFromId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getDocumentUriFromId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getDocumentUriFromId_pargs {
 public:


  virtual ~ProvenanceService_getDocumentUriFromId_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::vector<int64_t> * positionsList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentUriFromId_result__isset {
  _ProvenanceService_getDocumentUriFromId_result__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getDocumentUriFromId_result__isset;

class ProvenanceService_getDocumentUriFromId_result {
 public:

  ProvenanceService_getDocumentUriFromId_result() {
  }

  virtual ~ProvenanceService_getDocumentUriFromId_result() throw() {}

  PositionsToUris success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getDocumentUriFromId_result__isset __isset;

  void __set_success(const PositionsToUris& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_getDocumentUriFromId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getDocumentUriFromId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getDocumentUriFromId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentUriFromId_presult__isset {
  _ProvenanceService_getDocumentUriFromId_presult__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getDocumentUriFromId_presult__isset;

class ProvenanceService_getDocumentUriFromId_presult {
 public:


  virtual ~ProvenanceService_getDocumentUriFromId_presult() throw() {}

  PositionsToUris* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getDocumentUriFromId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getDocumentConvertedUrisFromIds_args {
 public:

  ProvenanceService_getDocumentConvertedUrisFromIds_args() {
  }

  virtual ~ProvenanceService_getDocumentConvertedUrisFromIds_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::set<int64_t>  ids;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_ids(const std::set<int64_t> & val) {
    ids = val;
  }

  bool operator == (const ProvenanceService_getDocumentConvertedUrisFromIds_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getDocumentConvertedUrisFromIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getDocumentConvertedUrisFromIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getDocumentConvertedUrisFromIds_pargs {
 public:


  virtual ~ProvenanceService_getDocumentConvertedUrisFromIds_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::set<int64_t> * ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentConvertedUrisFromIds_result__isset {
  _ProvenanceService_getDocumentConvertedUrisFromIds_result__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getDocumentConvertedUrisFromIds_result__isset;

class ProvenanceService_getDocumentConvertedUrisFromIds_result {
 public:

  ProvenanceService_getDocumentConvertedUrisFromIds_result() {
  }

  virtual ~ProvenanceService_getDocumentConvertedUrisFromIds_result() throw() {}

  ConversionResult success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getDocumentConvertedUrisFromIds_result__isset __isset;

  void __set_success(const ConversionResult& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_getDocumentConvertedUrisFromIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getDocumentConvertedUrisFromIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getDocumentConvertedUrisFromIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentConvertedUrisFromIds_presult__isset {
  _ProvenanceService_getDocumentConvertedUrisFromIds_presult__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getDocumentConvertedUrisFromIds_presult__isset;

class ProvenanceService_getDocumentConvertedUrisFromIds_presult {
 public:


  virtual ~ProvenanceService_getDocumentConvertedUrisFromIds_presult() throw() {}

  ConversionResult* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getDocumentConvertedUrisFromIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getDocumentConvertedUrisFromUris_args {
 public:

  ProvenanceService_getDocumentConvertedUrisFromUris_args() {
  }

  virtual ~ProvenanceService_getDocumentConvertedUrisFromUris_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::set<std::string>  uris;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_uris(const std::set<std::string> & val) {
    uris = val;
  }

  bool operator == (const ProvenanceService_getDocumentConvertedUrisFromUris_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(uris == rhs.uris))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getDocumentConvertedUrisFromUris_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getDocumentConvertedUrisFromUris_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getDocumentConvertedUrisFromUris_pargs {
 public:


  virtual ~ProvenanceService_getDocumentConvertedUrisFromUris_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::set<std::string> * uris;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentConvertedUrisFromUris_result__isset {
  _ProvenanceService_getDocumentConvertedUrisFromUris_result__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getDocumentConvertedUrisFromUris_result__isset;

class ProvenanceService_getDocumentConvertedUrisFromUris_result {
 public:

  ProvenanceService_getDocumentConvertedUrisFromUris_result() {
  }

  virtual ~ProvenanceService_getDocumentConvertedUrisFromUris_result() throw() {}

  ConversionResult success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getDocumentConvertedUrisFromUris_result__isset __isset;

  void __set_success(const ConversionResult& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_getDocumentConvertedUrisFromUris_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getDocumentConvertedUrisFromUris_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getDocumentConvertedUrisFromUris_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getDocumentConvertedUrisFromUris_presult__isset {
  _ProvenanceService_getDocumentConvertedUrisFromUris_presult__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getDocumentConvertedUrisFromUris_presult__isset;

class ProvenanceService_getDocumentConvertedUrisFromUris_presult {
 public:


  virtual ~ProvenanceService_getDocumentConvertedUrisFromUris_presult() throw() {}

  ConversionResult* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getDocumentConvertedUrisFromUris_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getPurgeInfo_args {
 public:

  ProvenanceService_getPurgeInfo_args() : purgeId(0) {
  }

  virtual ~ProvenanceService_getPurgeInfo_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  int64_t purgeId;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_purgeId(const int64_t val) {
    purgeId = val;
  }

  bool operator == (const ProvenanceService_getPurgeInfo_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(purgeId == rhs.purgeId))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getPurgeInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getPurgeInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getPurgeInfo_pargs {
 public:


  virtual ~ProvenanceService_getPurgeInfo_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const int64_t* purgeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getPurgeInfo_result__isset {
  _ProvenanceService_getPurgeInfo_result__isset() : success(false), security(false), purgeNotFound(false) {}
  bool success;
  bool security;
  bool purgeNotFound;
} _ProvenanceService_getPurgeInfo_result__isset;

class ProvenanceService_getPurgeInfo_result {
 public:

  ProvenanceService_getPurgeInfo_result() {
  }

  virtual ~ProvenanceService_getPurgeInfo_result() throw() {}

  PurgeInfo success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenancePurgeIdNotFoundException purgeNotFound;

  _ProvenanceService_getPurgeInfo_result__isset __isset;

  void __set_success(const PurgeInfo& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_purgeNotFound(const ProvenancePurgeIdNotFoundException& val) {
    purgeNotFound = val;
  }

  bool operator == (const ProvenanceService_getPurgeInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    if (!(purgeNotFound == rhs.purgeNotFound))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getPurgeInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getPurgeInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getPurgeInfo_presult__isset {
  _ProvenanceService_getPurgeInfo_presult__isset() : success(false), security(false), purgeNotFound(false) {}
  bool success;
  bool security;
  bool purgeNotFound;
} _ProvenanceService_getPurgeInfo_presult__isset;

class ProvenanceService_getPurgeInfo_presult {
 public:


  virtual ~ProvenanceService_getPurgeInfo_presult() throw() {}

  PurgeInfo* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenancePurgeIdNotFoundException purgeNotFound;

  _ProvenanceService_getPurgeInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getAllPurgeIds_args {
 public:

  ProvenanceService_getAllPurgeIds_args() {
  }

  virtual ~ProvenanceService_getAllPurgeIds_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  bool operator == (const ProvenanceService_getAllPurgeIds_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getAllPurgeIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getAllPurgeIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_getAllPurgeIds_pargs {
 public:


  virtual ~ProvenanceService_getAllPurgeIds_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getAllPurgeIds_result__isset {
  _ProvenanceService_getAllPurgeIds_result__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getAllPurgeIds_result__isset;

class ProvenanceService_getAllPurgeIds_result {
 public:

  ProvenanceService_getAllPurgeIds_result() {
  }

  virtual ~ProvenanceService_getAllPurgeIds_result() throw() {}

  std::vector<int64_t>  success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getAllPurgeIds_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_getAllPurgeIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_getAllPurgeIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_getAllPurgeIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_getAllPurgeIds_presult__isset {
  _ProvenanceService_getAllPurgeIds_presult__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_getAllPurgeIds_presult__isset;

class ProvenanceService_getAllPurgeIds_presult {
 public:


  virtual ~ProvenanceService_getAllPurgeIds_presult() throw() {}

  std::vector<int64_t> * success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_getAllPurgeIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_updatePurge_args__isset {
  _ProvenanceService_updatePurge_args__isset() : note(false), resolved(false) {}
  bool note;
  bool resolved;
} _ProvenanceService_updatePurge_args__isset;

class ProvenanceService_updatePurge_args {
 public:

  ProvenanceService_updatePurge_args() : purgeId(0), note(), resolved(0) {
  }

  virtual ~ProvenanceService_updatePurge_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  int64_t purgeId;
  std::set<int64_t>  completelyPurged;
  std::string note;
  bool resolved;

  _ProvenanceService_updatePurge_args__isset __isset;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_purgeId(const int64_t val) {
    purgeId = val;
  }

  void __set_completelyPurged(const std::set<int64_t> & val) {
    completelyPurged = val;
  }

  void __set_note(const std::string& val) {
    note = val;
  }

  void __set_resolved(const bool val) {
    resolved = val;
  }

  bool operator == (const ProvenanceService_updatePurge_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(purgeId == rhs.purgeId))
      return false;
    if (!(completelyPurged == rhs.completelyPurged))
      return false;
    if (!(note == rhs.note))
      return false;
    if (!(resolved == rhs.resolved))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_updatePurge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_updatePurge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_updatePurge_pargs {
 public:


  virtual ~ProvenanceService_updatePurge_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const int64_t* purgeId;
  const std::set<int64_t> * completelyPurged;
  const std::string* note;
  const bool* resolved;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_updatePurge_result__isset {
  _ProvenanceService_updatePurge_result__isset() : security(false), purgeNotFound(false), documentNotInPurge(false) {}
  bool security;
  bool purgeNotFound;
  bool documentNotInPurge;
} _ProvenanceService_updatePurge_result__isset;

class ProvenanceService_updatePurge_result {
 public:

  ProvenanceService_updatePurge_result() {
  }

  virtual ~ProvenanceService_updatePurge_result() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenancePurgeIdNotFoundException purgeNotFound;
  ProvenanceDocumentNotInPurgeException documentNotInPurge;

  _ProvenanceService_updatePurge_result__isset __isset;

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_purgeNotFound(const ProvenancePurgeIdNotFoundException& val) {
    purgeNotFound = val;
  }

  void __set_documentNotInPurge(const ProvenanceDocumentNotInPurgeException& val) {
    documentNotInPurge = val;
  }

  bool operator == (const ProvenanceService_updatePurge_result & rhs) const
  {
    if (!(security == rhs.security))
      return false;
    if (!(purgeNotFound == rhs.purgeNotFound))
      return false;
    if (!(documentNotInPurge == rhs.documentNotInPurge))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_updatePurge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_updatePurge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_updatePurge_presult__isset {
  _ProvenanceService_updatePurge_presult__isset() : security(false), purgeNotFound(false), documentNotInPurge(false) {}
  bool security;
  bool purgeNotFound;
  bool documentNotInPurge;
} _ProvenanceService_updatePurge_presult__isset;

class ProvenanceService_updatePurge_presult {
 public:


  virtual ~ProvenanceService_updatePurge_presult() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenancePurgeIdNotFoundException purgeNotFound;
  ProvenanceDocumentNotInPurgeException documentNotInPurge;

  _ProvenanceService_updatePurge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_removeDocumentAgeOffRuleInheritance_args__isset {
  _ProvenanceService_removeDocumentAgeOffRuleInheritance_args__isset() : documentId(false), documentUri(false), parentId(false), parentUri(false) {}
  bool documentId;
  bool documentUri;
  bool parentId;
  bool parentUri;
} _ProvenanceService_removeDocumentAgeOffRuleInheritance_args__isset;

class ProvenanceService_removeDocumentAgeOffRuleInheritance_args {
 public:

  ProvenanceService_removeDocumentAgeOffRuleInheritance_args() : documentId(0), documentUri(), parentId(0), parentUri() {
  }

  virtual ~ProvenanceService_removeDocumentAgeOffRuleInheritance_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  int64_t documentId;
  std::string documentUri;
  int64_t parentId;
  std::string parentUri;

  _ProvenanceService_removeDocumentAgeOffRuleInheritance_args__isset __isset;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_documentId(const int64_t val) {
    documentId = val;
  }

  void __set_documentUri(const std::string& val) {
    documentUri = val;
  }

  void __set_parentId(const int64_t val) {
    parentId = val;
  }

  void __set_parentUri(const std::string& val) {
    parentUri = val;
  }

  bool operator == (const ProvenanceService_removeDocumentAgeOffRuleInheritance_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(documentId == rhs.documentId))
      return false;
    if (!(documentUri == rhs.documentUri))
      return false;
    if (!(parentId == rhs.parentId))
      return false;
    if (!(parentUri == rhs.parentUri))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_removeDocumentAgeOffRuleInheritance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_removeDocumentAgeOffRuleInheritance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_removeDocumentAgeOffRuleInheritance_pargs {
 public:


  virtual ~ProvenanceService_removeDocumentAgeOffRuleInheritance_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const int64_t* documentId;
  const std::string* documentUri;
  const int64_t* parentId;
  const std::string* parentUri;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_removeDocumentAgeOffRuleInheritance_result__isset {
  _ProvenanceService_removeDocumentAgeOffRuleInheritance_result__isset() : security(false), documentNotFound(false), alreadyAged(false) {}
  bool security;
  bool documentNotFound;
  bool alreadyAged;
} _ProvenanceService_removeDocumentAgeOffRuleInheritance_result__isset;

class ProvenanceService_removeDocumentAgeOffRuleInheritance_result {
 public:

  ProvenanceService_removeDocumentAgeOffRuleInheritance_result() {
  }

  virtual ~ProvenanceService_removeDocumentAgeOffRuleInheritance_result() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentNotFoundException documentNotFound;
  ProvenanceAlreadyAgedException alreadyAged;

  _ProvenanceService_removeDocumentAgeOffRuleInheritance_result__isset __isset;

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_documentNotFound(const ProvenanceDocumentNotFoundException& val) {
    documentNotFound = val;
  }

  void __set_alreadyAged(const ProvenanceAlreadyAgedException& val) {
    alreadyAged = val;
  }

  bool operator == (const ProvenanceService_removeDocumentAgeOffRuleInheritance_result & rhs) const
  {
    if (!(security == rhs.security))
      return false;
    if (!(documentNotFound == rhs.documentNotFound))
      return false;
    if (!(alreadyAged == rhs.alreadyAged))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_removeDocumentAgeOffRuleInheritance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_removeDocumentAgeOffRuleInheritance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_removeDocumentAgeOffRuleInheritance_presult__isset {
  _ProvenanceService_removeDocumentAgeOffRuleInheritance_presult__isset() : security(false), documentNotFound(false), alreadyAged(false) {}
  bool security;
  bool documentNotFound;
  bool alreadyAged;
} _ProvenanceService_removeDocumentAgeOffRuleInheritance_presult__isset;

class ProvenanceService_removeDocumentAgeOffRuleInheritance_presult {
 public:


  virtual ~ProvenanceService_removeDocumentAgeOffRuleInheritance_presult() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentNotFoundException documentNotFound;
  ProvenanceAlreadyAgedException alreadyAged;

  _ProvenanceService_removeDocumentAgeOffRuleInheritance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_removeDocumentExplicitAgeOffRule_args__isset {
  _ProvenanceService_removeDocumentExplicitAgeOffRule_args__isset() : documentId(false), documentUri(false) {}
  bool documentId;
  bool documentUri;
} _ProvenanceService_removeDocumentExplicitAgeOffRule_args__isset;

class ProvenanceService_removeDocumentExplicitAgeOffRule_args {
 public:

  ProvenanceService_removeDocumentExplicitAgeOffRule_args() : documentId(0), documentUri(), ageOffRuleId(0) {
  }

  virtual ~ProvenanceService_removeDocumentExplicitAgeOffRule_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  int64_t documentId;
  std::string documentUri;
  int64_t ageOffRuleId;

  _ProvenanceService_removeDocumentExplicitAgeOffRule_args__isset __isset;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_documentId(const int64_t val) {
    documentId = val;
  }

  void __set_documentUri(const std::string& val) {
    documentUri = val;
  }

  void __set_ageOffRuleId(const int64_t val) {
    ageOffRuleId = val;
  }

  bool operator == (const ProvenanceService_removeDocumentExplicitAgeOffRule_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(documentId == rhs.documentId))
      return false;
    if (!(documentUri == rhs.documentUri))
      return false;
    if (!(ageOffRuleId == rhs.ageOffRuleId))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_removeDocumentExplicitAgeOffRule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_removeDocumentExplicitAgeOffRule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_removeDocumentExplicitAgeOffRule_pargs {
 public:


  virtual ~ProvenanceService_removeDocumentExplicitAgeOffRule_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const int64_t* documentId;
  const std::string* documentUri;
  const int64_t* ageOffRuleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_removeDocumentExplicitAgeOffRule_result__isset {
  _ProvenanceService_removeDocumentExplicitAgeOffRule_result__isset() : security(false), documentNotFound(false), ruleNotFound(false), alreadyAged(false) {}
  bool security;
  bool documentNotFound;
  bool ruleNotFound;
  bool alreadyAged;
} _ProvenanceService_removeDocumentExplicitAgeOffRule_result__isset;

class ProvenanceService_removeDocumentExplicitAgeOffRule_result {
 public:

  ProvenanceService_removeDocumentExplicitAgeOffRule_result() {
  }

  virtual ~ProvenanceService_removeDocumentExplicitAgeOffRule_result() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentNotFoundException documentNotFound;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;
  ProvenanceAlreadyAgedException alreadyAged;

  _ProvenanceService_removeDocumentExplicitAgeOffRule_result__isset __isset;

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_documentNotFound(const ProvenanceDocumentNotFoundException& val) {
    documentNotFound = val;
  }

  void __set_ruleNotFound(const ProvenanceAgeOffRuleNotFoundException& val) {
    ruleNotFound = val;
  }

  void __set_alreadyAged(const ProvenanceAlreadyAgedException& val) {
    alreadyAged = val;
  }

  bool operator == (const ProvenanceService_removeDocumentExplicitAgeOffRule_result & rhs) const
  {
    if (!(security == rhs.security))
      return false;
    if (!(documentNotFound == rhs.documentNotFound))
      return false;
    if (!(ruleNotFound == rhs.ruleNotFound))
      return false;
    if (!(alreadyAged == rhs.alreadyAged))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_removeDocumentExplicitAgeOffRule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_removeDocumentExplicitAgeOffRule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_removeDocumentExplicitAgeOffRule_presult__isset {
  _ProvenanceService_removeDocumentExplicitAgeOffRule_presult__isset() : security(false), documentNotFound(false), ruleNotFound(false), alreadyAged(false) {}
  bool security;
  bool documentNotFound;
  bool ruleNotFound;
  bool alreadyAged;
} _ProvenanceService_removeDocumentExplicitAgeOffRule_presult__isset;

class ProvenanceService_removeDocumentExplicitAgeOffRule_presult {
 public:


  virtual ~ProvenanceService_removeDocumentExplicitAgeOffRule_presult() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentNotFoundException documentNotFound;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;
  ProvenanceAlreadyAgedException alreadyAged;

  _ProvenanceService_removeDocumentExplicitAgeOffRule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addDocumentExplicitAgeOffRule_args__isset {
  _ProvenanceService_addDocumentExplicitAgeOffRule_args__isset() : documentId(false), documentUri(false) {}
  bool documentId;
  bool documentUri;
} _ProvenanceService_addDocumentExplicitAgeOffRule_args__isset;

class ProvenanceService_addDocumentExplicitAgeOffRule_args {
 public:

  ProvenanceService_addDocumentExplicitAgeOffRule_args() : documentId(0), documentUri() {
  }

  virtual ~ProvenanceService_addDocumentExplicitAgeOffRule_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  int64_t documentId;
  std::string documentUri;
  AgeOffMapping ageOffMapping;

  _ProvenanceService_addDocumentExplicitAgeOffRule_args__isset __isset;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_documentId(const int64_t val) {
    documentId = val;
  }

  void __set_documentUri(const std::string& val) {
    documentUri = val;
  }

  void __set_ageOffMapping(const AgeOffMapping& val) {
    ageOffMapping = val;
  }

  bool operator == (const ProvenanceService_addDocumentExplicitAgeOffRule_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(documentId == rhs.documentId))
      return false;
    if (!(documentUri == rhs.documentUri))
      return false;
    if (!(ageOffMapping == rhs.ageOffMapping))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_addDocumentExplicitAgeOffRule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_addDocumentExplicitAgeOffRule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_addDocumentExplicitAgeOffRule_pargs {
 public:


  virtual ~ProvenanceService_addDocumentExplicitAgeOffRule_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const int64_t* documentId;
  const std::string* documentUri;
  const AgeOffMapping* ageOffMapping;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addDocumentExplicitAgeOffRule_result__isset {
  _ProvenanceService_addDocumentExplicitAgeOffRule_result__isset() : security(false), documentNotFound(false), ruleNotFound(false), alreadyAged(false), edgeExists(false) {}
  bool security;
  bool documentNotFound;
  bool ruleNotFound;
  bool alreadyAged;
  bool edgeExists;
} _ProvenanceService_addDocumentExplicitAgeOffRule_result__isset;

class ProvenanceService_addDocumentExplicitAgeOffRule_result {
 public:

  ProvenanceService_addDocumentExplicitAgeOffRule_result() {
  }

  virtual ~ProvenanceService_addDocumentExplicitAgeOffRule_result() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentNotFoundException documentNotFound;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;
  ProvenanceAlreadyAgedException alreadyAged;
  ProvenanceAgeOffExistsException edgeExists;

  _ProvenanceService_addDocumentExplicitAgeOffRule_result__isset __isset;

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_documentNotFound(const ProvenanceDocumentNotFoundException& val) {
    documentNotFound = val;
  }

  void __set_ruleNotFound(const ProvenanceAgeOffRuleNotFoundException& val) {
    ruleNotFound = val;
  }

  void __set_alreadyAged(const ProvenanceAlreadyAgedException& val) {
    alreadyAged = val;
  }

  void __set_edgeExists(const ProvenanceAgeOffExistsException& val) {
    edgeExists = val;
  }

  bool operator == (const ProvenanceService_addDocumentExplicitAgeOffRule_result & rhs) const
  {
    if (!(security == rhs.security))
      return false;
    if (!(documentNotFound == rhs.documentNotFound))
      return false;
    if (!(ruleNotFound == rhs.ruleNotFound))
      return false;
    if (!(alreadyAged == rhs.alreadyAged))
      return false;
    if (!(edgeExists == rhs.edgeExists))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_addDocumentExplicitAgeOffRule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_addDocumentExplicitAgeOffRule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addDocumentExplicitAgeOffRule_presult__isset {
  _ProvenanceService_addDocumentExplicitAgeOffRule_presult__isset() : security(false), documentNotFound(false), ruleNotFound(false), alreadyAged(false), edgeExists(false) {}
  bool security;
  bool documentNotFound;
  bool ruleNotFound;
  bool alreadyAged;
  bool edgeExists;
} _ProvenanceService_addDocumentExplicitAgeOffRule_presult__isset;

class ProvenanceService_addDocumentExplicitAgeOffRule_presult {
 public:


  virtual ~ProvenanceService_addDocumentExplicitAgeOffRule_presult() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentNotFoundException documentNotFound;
  ProvenanceAgeOffRuleNotFoundException ruleNotFound;
  ProvenanceAlreadyAgedException alreadyAged;
  ProvenanceAgeOffExistsException edgeExists;

  _ProvenanceService_addDocumentExplicitAgeOffRule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addDocumentInheritanceInfo_args__isset {
  _ProvenanceService_addDocumentInheritanceInfo_args__isset() : documentId(false), documentUri(false) {}
  bool documentId;
  bool documentUri;
} _ProvenanceService_addDocumentInheritanceInfo_args__isset;

class ProvenanceService_addDocumentInheritanceInfo_args {
 public:

  ProvenanceService_addDocumentInheritanceInfo_args() : documentId(0), documentUri() {
  }

  virtual ~ProvenanceService_addDocumentInheritanceInfo_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  int64_t documentId;
  std::string documentUri;
  InheritanceInfo inheritanceInfo;

  _ProvenanceService_addDocumentInheritanceInfo_args__isset __isset;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_documentId(const int64_t val) {
    documentId = val;
  }

  void __set_documentUri(const std::string& val) {
    documentUri = val;
  }

  void __set_inheritanceInfo(const InheritanceInfo& val) {
    inheritanceInfo = val;
  }

  bool operator == (const ProvenanceService_addDocumentInheritanceInfo_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(documentId == rhs.documentId))
      return false;
    if (!(documentUri == rhs.documentUri))
      return false;
    if (!(inheritanceInfo == rhs.inheritanceInfo))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_addDocumentInheritanceInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_addDocumentInheritanceInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_addDocumentInheritanceInfo_pargs {
 public:


  virtual ~ProvenanceService_addDocumentInheritanceInfo_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const int64_t* documentId;
  const std::string* documentUri;
  const InheritanceInfo* inheritanceInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addDocumentInheritanceInfo_result__isset {
  _ProvenanceService_addDocumentInheritanceInfo_result__isset() : security(false), documentNotFound(false), circularInheritance(false), alreadyAged(false), inheritanceExists(false) {}
  bool security;
  bool documentNotFound;
  bool circularInheritance;
  bool alreadyAged;
  bool inheritanceExists;
} _ProvenanceService_addDocumentInheritanceInfo_result__isset;

class ProvenanceService_addDocumentInheritanceInfo_result {
 public:

  ProvenanceService_addDocumentInheritanceInfo_result() {
  }

  virtual ~ProvenanceService_addDocumentInheritanceInfo_result() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentNotFoundException documentNotFound;
  ProvenanceCircularInheritanceNotAllowedException circularInheritance;
  ProvenanceAlreadyAgedException alreadyAged;
  ProvenanceAgeOffInheritanceExistsException inheritanceExists;

  _ProvenanceService_addDocumentInheritanceInfo_result__isset __isset;

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  void __set_documentNotFound(const ProvenanceDocumentNotFoundException& val) {
    documentNotFound = val;
  }

  void __set_circularInheritance(const ProvenanceCircularInheritanceNotAllowedException& val) {
    circularInheritance = val;
  }

  void __set_alreadyAged(const ProvenanceAlreadyAgedException& val) {
    alreadyAged = val;
  }

  void __set_inheritanceExists(const ProvenanceAgeOffInheritanceExistsException& val) {
    inheritanceExists = val;
  }

  bool operator == (const ProvenanceService_addDocumentInheritanceInfo_result & rhs) const
  {
    if (!(security == rhs.security))
      return false;
    if (!(documentNotFound == rhs.documentNotFound))
      return false;
    if (!(circularInheritance == rhs.circularInheritance))
      return false;
    if (!(alreadyAged == rhs.alreadyAged))
      return false;
    if (!(inheritanceExists == rhs.inheritanceExists))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_addDocumentInheritanceInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_addDocumentInheritanceInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_addDocumentInheritanceInfo_presult__isset {
  _ProvenanceService_addDocumentInheritanceInfo_presult__isset() : security(false), documentNotFound(false), circularInheritance(false), alreadyAged(false), inheritanceExists(false) {}
  bool security;
  bool documentNotFound;
  bool circularInheritance;
  bool alreadyAged;
  bool inheritanceExists;
} _ProvenanceService_addDocumentInheritanceInfo_presult__isset;

class ProvenanceService_addDocumentInheritanceInfo_presult {
 public:


  virtual ~ProvenanceService_addDocumentInheritanceInfo_presult() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;
  ProvenanceDocumentNotFoundException documentNotFound;
  ProvenanceCircularInheritanceNotAllowedException circularInheritance;
  ProvenanceAlreadyAgedException alreadyAged;
  ProvenanceAgeOffInheritanceExistsException inheritanceExists;

  _ProvenanceService_addDocumentInheritanceInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_recordObjectAccess_args {
 public:

  ProvenanceService_recordObjectAccess_args() : documentUri(), accessType((ObjectAccessType::type)0) {
  }

  virtual ~ProvenanceService_recordObjectAccess_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::string documentUri;
  ObjectAccessType::type accessType;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_documentUri(const std::string& val) {
    documentUri = val;
  }

  void __set_accessType(const ObjectAccessType::type val) {
    accessType = val;
  }

  bool operator == (const ProvenanceService_recordObjectAccess_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(documentUri == rhs.documentUri))
      return false;
    if (!(accessType == rhs.accessType))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_recordObjectAccess_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_recordObjectAccess_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_recordObjectAccess_pargs {
 public:


  virtual ~ProvenanceService_recordObjectAccess_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::string* documentUri;
  const ObjectAccessType::type* accessType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_recordObjectAccess_result__isset {
  _ProvenanceService_recordObjectAccess_result__isset() : security(false) {}
  bool security;
} _ProvenanceService_recordObjectAccess_result__isset;

class ProvenanceService_recordObjectAccess_result {
 public:

  ProvenanceService_recordObjectAccess_result() {
  }

  virtual ~ProvenanceService_recordObjectAccess_result() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_recordObjectAccess_result__isset __isset;

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_recordObjectAccess_result & rhs) const
  {
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_recordObjectAccess_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_recordObjectAccess_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_recordObjectAccess_presult__isset {
  _ProvenanceService_recordObjectAccess_presult__isset() : security(false) {}
  bool security;
} _ProvenanceService_recordObjectAccess_presult__isset;

class ProvenanceService_recordObjectAccess_presult {
 public:


  virtual ~ProvenanceService_recordObjectAccess_presult() throw() {}

   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_recordObjectAccess_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_fetchUsersDocuments_args__isset {
  _ProvenanceService_fetchUsersDocuments_args__isset() : securityToken(false), userPrincipal(false), startDateTime(false), stopDateTime(false), numToFetch(false), continuationPoint(false) {}
  bool securityToken;
  bool userPrincipal;
  bool startDateTime;
  bool stopDateTime;
  bool numToFetch;
  bool continuationPoint;
} _ProvenanceService_fetchUsersDocuments_args__isset;

class ProvenanceService_fetchUsersDocuments_args {
 public:

  ProvenanceService_fetchUsersDocuments_args() : userPrincipal(), numToFetch(0) {
  }

  virtual ~ProvenanceService_fetchUsersDocuments_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::string userPrincipal;
   ::ezbake::base::thrift::DateTime startDateTime;
   ::ezbake::base::thrift::DateTime stopDateTime;
  int32_t numToFetch;
  AccumuloContinuationPoint continuationPoint;

  _ProvenanceService_fetchUsersDocuments_args__isset __isset;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_userPrincipal(const std::string& val) {
    userPrincipal = val;
  }

  void __set_startDateTime(const  ::ezbake::base::thrift::DateTime& val) {
    startDateTime = val;
  }

  void __set_stopDateTime(const  ::ezbake::base::thrift::DateTime& val) {
    stopDateTime = val;
  }

  void __set_numToFetch(const int32_t val) {
    numToFetch = val;
  }

  void __set_continuationPoint(const AccumuloContinuationPoint& val) {
    continuationPoint = val;
  }

  bool operator == (const ProvenanceService_fetchUsersDocuments_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(userPrincipal == rhs.userPrincipal))
      return false;
    if (!(startDateTime == rhs.startDateTime))
      return false;
    if (!(stopDateTime == rhs.stopDateTime))
      return false;
    if (!(numToFetch == rhs.numToFetch))
      return false;
    if (!(continuationPoint == rhs.continuationPoint))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_fetchUsersDocuments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_fetchUsersDocuments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_fetchUsersDocuments_pargs {
 public:


  virtual ~ProvenanceService_fetchUsersDocuments_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::string* userPrincipal;
  const  ::ezbake::base::thrift::DateTime* startDateTime;
  const  ::ezbake::base::thrift::DateTime* stopDateTime;
  const int32_t* numToFetch;
  const AccumuloContinuationPoint* continuationPoint;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_fetchUsersDocuments_result__isset {
  _ProvenanceService_fetchUsersDocuments_result__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_fetchUsersDocuments_result__isset;

class ProvenanceService_fetchUsersDocuments_result {
 public:

  ProvenanceService_fetchUsersDocuments_result() {
  }

  virtual ~ProvenanceService_fetchUsersDocuments_result() throw() {}

  ResultsAndContinuation success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_fetchUsersDocuments_result__isset __isset;

  void __set_success(const ResultsAndContinuation& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_fetchUsersDocuments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_fetchUsersDocuments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_fetchUsersDocuments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_fetchUsersDocuments_presult__isset {
  _ProvenanceService_fetchUsersDocuments_presult__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_fetchUsersDocuments_presult__isset;

class ProvenanceService_fetchUsersDocuments_presult {
 public:


  virtual ~ProvenanceService_fetchUsersDocuments_presult() throw() {}

  ResultsAndContinuation* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_fetchUsersDocuments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_fetchDocumentUsers_args__isset {
  _ProvenanceService_fetchDocumentUsers_args__isset() : securityToken(false), documentUri(false), startDateTime(false), stopDateTime(false), numToFetch(false), continuationPoint(false) {}
  bool securityToken;
  bool documentUri;
  bool startDateTime;
  bool stopDateTime;
  bool numToFetch;
  bool continuationPoint;
} _ProvenanceService_fetchDocumentUsers_args__isset;

class ProvenanceService_fetchDocumentUsers_args {
 public:

  ProvenanceService_fetchDocumentUsers_args() : documentUri(), numToFetch(0) {
  }

  virtual ~ProvenanceService_fetchDocumentUsers_args() throw() {}

   ::ezbake::base::thrift::EzSecurityToken securityToken;
  std::string documentUri;
   ::ezbake::base::thrift::DateTime startDateTime;
   ::ezbake::base::thrift::DateTime stopDateTime;
  int32_t numToFetch;
  AccumuloContinuationPoint continuationPoint;

  _ProvenanceService_fetchDocumentUsers_args__isset __isset;

  void __set_securityToken(const  ::ezbake::base::thrift::EzSecurityToken& val) {
    securityToken = val;
  }

  void __set_documentUri(const std::string& val) {
    documentUri = val;
  }

  void __set_startDateTime(const  ::ezbake::base::thrift::DateTime& val) {
    startDateTime = val;
  }

  void __set_stopDateTime(const  ::ezbake::base::thrift::DateTime& val) {
    stopDateTime = val;
  }

  void __set_numToFetch(const int32_t val) {
    numToFetch = val;
  }

  void __set_continuationPoint(const AccumuloContinuationPoint& val) {
    continuationPoint = val;
  }

  bool operator == (const ProvenanceService_fetchDocumentUsers_args & rhs) const
  {
    if (!(securityToken == rhs.securityToken))
      return false;
    if (!(documentUri == rhs.documentUri))
      return false;
    if (!(startDateTime == rhs.startDateTime))
      return false;
    if (!(stopDateTime == rhs.stopDateTime))
      return false;
    if (!(numToFetch == rhs.numToFetch))
      return false;
    if (!(continuationPoint == rhs.continuationPoint))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_fetchDocumentUsers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_fetchDocumentUsers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProvenanceService_fetchDocumentUsers_pargs {
 public:


  virtual ~ProvenanceService_fetchDocumentUsers_pargs() throw() {}

  const  ::ezbake::base::thrift::EzSecurityToken* securityToken;
  const std::string* documentUri;
  const  ::ezbake::base::thrift::DateTime* startDateTime;
  const  ::ezbake::base::thrift::DateTime* stopDateTime;
  const int32_t* numToFetch;
  const AccumuloContinuationPoint* continuationPoint;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_fetchDocumentUsers_result__isset {
  _ProvenanceService_fetchDocumentUsers_result__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_fetchDocumentUsers_result__isset;

class ProvenanceService_fetchDocumentUsers_result {
 public:

  ProvenanceService_fetchDocumentUsers_result() {
  }

  virtual ~ProvenanceService_fetchDocumentUsers_result() throw() {}

  ResultsAndContinuation success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_fetchDocumentUsers_result__isset __isset;

  void __set_success(const ResultsAndContinuation& val) {
    success = val;
  }

  void __set_security(const  ::ezbake::base::thrift::EzSecurityTokenException& val) {
    security = val;
  }

  bool operator == (const ProvenanceService_fetchDocumentUsers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(security == rhs.security))
      return false;
    return true;
  }
  bool operator != (const ProvenanceService_fetchDocumentUsers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceService_fetchDocumentUsers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProvenanceService_fetchDocumentUsers_presult__isset {
  _ProvenanceService_fetchDocumentUsers_presult__isset() : success(false), security(false) {}
  bool success;
  bool security;
} _ProvenanceService_fetchDocumentUsers_presult__isset;

class ProvenanceService_fetchDocumentUsers_presult {
 public:


  virtual ~ProvenanceService_fetchDocumentUsers_presult() throw() {}

  ResultsAndContinuation* success;
   ::ezbake::base::thrift::EzSecurityTokenException security;

  _ProvenanceService_fetchDocumentUsers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ProvenanceServiceClient : virtual public ProvenanceServiceIf, public  ::ezbake::base::thrift::EzBakeBaseServiceClient {
 public:
  ProvenanceServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::ezbake::base::thrift::EzBakeBaseServiceClient(prot, prot) {}
  ProvenanceServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
     ::ezbake::base::thrift::EzBakeBaseServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t addAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds, const int32_t maximumExecutionPeriod);
  void send_addAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds, const int32_t maximumExecutionPeriod);
  int64_t recv_addAgeOffRule();
  void getAgeOffRuleById(AgeOffRule& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId);
  void send_getAgeOffRuleById(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId);
  void recv_getAgeOffRuleById(AgeOffRule& _return);
  void getAgeOffRule(AgeOffRule& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name);
  void send_getAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name);
  void recv_getAgeOffRule(AgeOffRule& _return);
  void updateAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds);
  void send_updateAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds);
  void recv_updateAgeOffRule();
  void getAllAgeOffRules(std::vector<AgeOffRule> & _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int32_t limit, const int32_t page);
  void send_getAllAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int32_t limit, const int32_t page);
  void recv_getAllAgeOffRules(std::vector<AgeOffRule> & _return);
  int32_t countAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& securityToken);
  void send_countAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& securityToken);
  int32_t recv_countAgeOffRules();
  int64_t addDocument(const  ::ezbake::base::thrift::EzSecurityToken& token, const std::string& uri, const std::vector<InheritanceInfo> & parents, const std::vector<AgeOffMapping> & ageOffRules);
  void send_addDocument(const  ::ezbake::base::thrift::EzSecurityToken& token, const std::string& uri, const std::vector<InheritanceInfo> & parents, const std::vector<AgeOffMapping> & ageOffRules);
  int64_t recv_addDocument();
  void addDocuments(std::map<std::string, AddDocumentResult> & _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<AddDocumentEntry> & documents, const std::set<AgeOffMapping> & ageOffRules);
  void send_addDocuments(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<AddDocumentEntry> & documents, const std::set<AgeOffMapping> & ageOffRules);
  void recv_addDocuments(std::map<std::string, AddDocumentResult> & _return);
  int32_t getAddDocumentsMaxSize(const  ::ezbake::base::thrift::EzSecurityToken& securityToken);
  void send_getAddDocumentsMaxSize(const  ::ezbake::base::thrift::EzSecurityToken& securityToken);
  int32_t recv_getAddDocumentsMaxSize();
  void startAgeOffEvent(AgeOffInitiationResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId, const  ::ezbake::base::thrift::DateTime& effectiveTime);
  void send_startAgeOffEvent(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId, const  ::ezbake::base::thrift::DateTime& effectiveTime);
  void recv_startAgeOffEvent(AgeOffInitiationResult& _return);
  void markDocumentAsAged(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & agedDocumentIds);
  void send_markDocumentAsAged(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & agedDocumentIds);
  void recv_markDocumentAsAged();
  void getDocumentInfo(DocumentInfo& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t id, const std::string& uri);
  void send_getDocumentInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t id, const std::string& uri);
  void recv_getDocumentInfo(DocumentInfo& _return);
  void getDocumentAncestors(DerivedResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris);
  void send_getDocumentAncestors(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris);
  void recv_getDocumentAncestors(DerivedResult& _return);
  void getDocumentDescendants(DerivedResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris);
  void send_getDocumentDescendants(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris);
  void recv_getDocumentDescendants(DerivedResult& _return);
  void markDocumentForPurge(PurgeInitiationResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris, const std::string& name, const std::string& description);
  void send_markDocumentForPurge(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris, const std::string& name, const std::string& description);
  void recv_markDocumentForPurge(PurgeInitiationResult& _return);
  void getDocumentUriFromId(PositionsToUris& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<int64_t> & positionsList);
  void send_getDocumentUriFromId(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<int64_t> & positionsList);
  void recv_getDocumentUriFromId(PositionsToUris& _return);
  void getDocumentConvertedUrisFromIds(ConversionResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & ids);
  void send_getDocumentConvertedUrisFromIds(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & ids);
  void recv_getDocumentConvertedUrisFromIds(ConversionResult& _return);
  void getDocumentConvertedUrisFromUris(ConversionResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<std::string> & uris);
  void send_getDocumentConvertedUrisFromUris(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<std::string> & uris);
  void recv_getDocumentConvertedUrisFromUris(ConversionResult& _return);
  void getPurgeInfo(PurgeInfo& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId);
  void send_getPurgeInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId);
  void recv_getPurgeInfo(PurgeInfo& _return);
  void getAllPurgeIds(std::vector<int64_t> & _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken);
  void send_getAllPurgeIds(const  ::ezbake::base::thrift::EzSecurityToken& securityToken);
  void recv_getAllPurgeIds(std::vector<int64_t> & _return);
  void updatePurge(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId, const std::set<int64_t> & completelyPurged, const std::string& note, const bool resolved);
  void send_updatePurge(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId, const std::set<int64_t> & completelyPurged, const std::string& note, const bool resolved);
  void recv_updatePurge();
  void removeDocumentAgeOffRuleInheritance(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t parentId, const std::string& parentUri);
  void send_removeDocumentAgeOffRuleInheritance(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t parentId, const std::string& parentUri);
  void recv_removeDocumentAgeOffRuleInheritance();
  void removeDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t ageOffRuleId);
  void send_removeDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t ageOffRuleId);
  void recv_removeDocumentExplicitAgeOffRule();
  void addDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const AgeOffMapping& ageOffMapping);
  void send_addDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const AgeOffMapping& ageOffMapping);
  void recv_addDocumentExplicitAgeOffRule();
  void addDocumentInheritanceInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const InheritanceInfo& inheritanceInfo);
  void send_addDocumentInheritanceInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const InheritanceInfo& inheritanceInfo);
  void recv_addDocumentInheritanceInfo();
  void recordObjectAccess(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const ObjectAccessType::type accessType);
  void send_recordObjectAccess(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const ObjectAccessType::type accessType);
  void recv_recordObjectAccess();
  void fetchUsersDocuments(ResultsAndContinuation& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& userPrincipal, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint);
  void send_fetchUsersDocuments(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& userPrincipal, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint);
  void recv_fetchUsersDocuments(ResultsAndContinuation& _return);
  void fetchDocumentUsers(ResultsAndContinuation& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint);
  void send_fetchDocumentUsers(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint);
  void recv_fetchDocumentUsers(ResultsAndContinuation& _return);
};

class ProvenanceServiceProcessor : public  ::ezbake::base::thrift::EzBakeBaseServiceProcessor {
 protected:
  boost::shared_ptr<ProvenanceServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ProvenanceServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_addAgeOffRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAgeOffRuleById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAgeOffRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateAgeOffRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllAgeOffRules(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countAgeOffRules(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDocument(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDocuments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAddDocumentsMaxSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startAgeOffEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_markDocumentAsAged(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDocumentInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDocumentAncestors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDocumentDescendants(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_markDocumentForPurge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDocumentUriFromId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDocumentConvertedUrisFromIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDocumentConvertedUrisFromUris(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPurgeInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllPurgeIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updatePurge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeDocumentAgeOffRuleInheritance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeDocumentExplicitAgeOffRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDocumentExplicitAgeOffRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDocumentInheritanceInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recordObjectAccess(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchUsersDocuments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchDocumentUsers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ProvenanceServiceProcessor(boost::shared_ptr<ProvenanceServiceIf> iface) :
     ::ezbake::base::thrift::EzBakeBaseServiceProcessor(iface),
    iface_(iface) {
    processMap_["addAgeOffRule"] = &ProvenanceServiceProcessor::process_addAgeOffRule;
    processMap_["getAgeOffRuleById"] = &ProvenanceServiceProcessor::process_getAgeOffRuleById;
    processMap_["getAgeOffRule"] = &ProvenanceServiceProcessor::process_getAgeOffRule;
    processMap_["updateAgeOffRule"] = &ProvenanceServiceProcessor::process_updateAgeOffRule;
    processMap_["getAllAgeOffRules"] = &ProvenanceServiceProcessor::process_getAllAgeOffRules;
    processMap_["countAgeOffRules"] = &ProvenanceServiceProcessor::process_countAgeOffRules;
    processMap_["addDocument"] = &ProvenanceServiceProcessor::process_addDocument;
    processMap_["addDocuments"] = &ProvenanceServiceProcessor::process_addDocuments;
    processMap_["getAddDocumentsMaxSize"] = &ProvenanceServiceProcessor::process_getAddDocumentsMaxSize;
    processMap_["startAgeOffEvent"] = &ProvenanceServiceProcessor::process_startAgeOffEvent;
    processMap_["markDocumentAsAged"] = &ProvenanceServiceProcessor::process_markDocumentAsAged;
    processMap_["getDocumentInfo"] = &ProvenanceServiceProcessor::process_getDocumentInfo;
    processMap_["getDocumentAncestors"] = &ProvenanceServiceProcessor::process_getDocumentAncestors;
    processMap_["getDocumentDescendants"] = &ProvenanceServiceProcessor::process_getDocumentDescendants;
    processMap_["markDocumentForPurge"] = &ProvenanceServiceProcessor::process_markDocumentForPurge;
    processMap_["getDocumentUriFromId"] = &ProvenanceServiceProcessor::process_getDocumentUriFromId;
    processMap_["getDocumentConvertedUrisFromIds"] = &ProvenanceServiceProcessor::process_getDocumentConvertedUrisFromIds;
    processMap_["getDocumentConvertedUrisFromUris"] = &ProvenanceServiceProcessor::process_getDocumentConvertedUrisFromUris;
    processMap_["getPurgeInfo"] = &ProvenanceServiceProcessor::process_getPurgeInfo;
    processMap_["getAllPurgeIds"] = &ProvenanceServiceProcessor::process_getAllPurgeIds;
    processMap_["updatePurge"] = &ProvenanceServiceProcessor::process_updatePurge;
    processMap_["removeDocumentAgeOffRuleInheritance"] = &ProvenanceServiceProcessor::process_removeDocumentAgeOffRuleInheritance;
    processMap_["removeDocumentExplicitAgeOffRule"] = &ProvenanceServiceProcessor::process_removeDocumentExplicitAgeOffRule;
    processMap_["addDocumentExplicitAgeOffRule"] = &ProvenanceServiceProcessor::process_addDocumentExplicitAgeOffRule;
    processMap_["addDocumentInheritanceInfo"] = &ProvenanceServiceProcessor::process_addDocumentInheritanceInfo;
    processMap_["recordObjectAccess"] = &ProvenanceServiceProcessor::process_recordObjectAccess;
    processMap_["fetchUsersDocuments"] = &ProvenanceServiceProcessor::process_fetchUsersDocuments;
    processMap_["fetchDocumentUsers"] = &ProvenanceServiceProcessor::process_fetchDocumentUsers;
  }

  virtual ~ProvenanceServiceProcessor() {}
};

class ProvenanceServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ProvenanceServiceProcessorFactory(const ::boost::shared_ptr< ProvenanceServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ProvenanceServiceIfFactory > handlerFactory_;
};

class ProvenanceServiceMultiface : virtual public ProvenanceServiceIf, public  ::ezbake::base::thrift::EzBakeBaseServiceMultiface {
 public:
  ProvenanceServiceMultiface(std::vector<boost::shared_ptr<ProvenanceServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<ProvenanceServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::ezbake::base::thrift::EzBakeBaseServiceMultiface::add(*iter);
    }
  }
  virtual ~ProvenanceServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ProvenanceServiceIf> > ifaces_;
  ProvenanceServiceMultiface() {}
  void add(boost::shared_ptr<ProvenanceServiceIf> iface) {
     ::ezbake::base::thrift::EzBakeBaseServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  int64_t addAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds, const int32_t maximumExecutionPeriod) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addAgeOffRule(securityToken, name, retentionDurationSeconds, maximumExecutionPeriod);
    }
    return ifaces_[i]->addAgeOffRule(securityToken, name, retentionDurationSeconds, maximumExecutionPeriod);
  }

  void getAgeOffRuleById(AgeOffRule& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAgeOffRuleById(_return, securityToken, ruleId);
    }
    ifaces_[i]->getAgeOffRuleById(_return, securityToken, ruleId);
    return;
  }

  void getAgeOffRule(AgeOffRule& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAgeOffRule(_return, securityToken, name);
    }
    ifaces_[i]->getAgeOffRule(_return, securityToken, name);
    return;
  }

  void updateAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateAgeOffRule(securityToken, name, retentionDurationSeconds);
    }
    ifaces_[i]->updateAgeOffRule(securityToken, name, retentionDurationSeconds);
  }

  void getAllAgeOffRules(std::vector<AgeOffRule> & _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int32_t limit, const int32_t page) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllAgeOffRules(_return, securityToken, limit, page);
    }
    ifaces_[i]->getAllAgeOffRules(_return, securityToken, limit, page);
    return;
  }

  int32_t countAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& securityToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countAgeOffRules(securityToken);
    }
    return ifaces_[i]->countAgeOffRules(securityToken);
  }

  int64_t addDocument(const  ::ezbake::base::thrift::EzSecurityToken& token, const std::string& uri, const std::vector<InheritanceInfo> & parents, const std::vector<AgeOffMapping> & ageOffRules) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDocument(token, uri, parents, ageOffRules);
    }
    return ifaces_[i]->addDocument(token, uri, parents, ageOffRules);
  }

  void addDocuments(std::map<std::string, AddDocumentResult> & _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<AddDocumentEntry> & documents, const std::set<AgeOffMapping> & ageOffRules) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDocuments(_return, securityToken, documents, ageOffRules);
    }
    ifaces_[i]->addDocuments(_return, securityToken, documents, ageOffRules);
    return;
  }

  int32_t getAddDocumentsMaxSize(const  ::ezbake::base::thrift::EzSecurityToken& securityToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAddDocumentsMaxSize(securityToken);
    }
    return ifaces_[i]->getAddDocumentsMaxSize(securityToken);
  }

  void startAgeOffEvent(AgeOffInitiationResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId, const  ::ezbake::base::thrift::DateTime& effectiveTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startAgeOffEvent(_return, securityToken, ruleId, effectiveTime);
    }
    ifaces_[i]->startAgeOffEvent(_return, securityToken, ruleId, effectiveTime);
    return;
  }

  void markDocumentAsAged(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & agedDocumentIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->markDocumentAsAged(securityToken, agedDocumentIds);
    }
    ifaces_[i]->markDocumentAsAged(securityToken, agedDocumentIds);
  }

  void getDocumentInfo(DocumentInfo& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t id, const std::string& uri) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDocumentInfo(_return, securityToken, id, uri);
    }
    ifaces_[i]->getDocumentInfo(_return, securityToken, id, uri);
    return;
  }

  void getDocumentAncestors(DerivedResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDocumentAncestors(_return, securityToken, uris);
    }
    ifaces_[i]->getDocumentAncestors(_return, securityToken, uris);
    return;
  }

  void getDocumentDescendants(DerivedResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDocumentDescendants(_return, securityToken, uris);
    }
    ifaces_[i]->getDocumentDescendants(_return, securityToken, uris);
    return;
  }

  void markDocumentForPurge(PurgeInitiationResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris, const std::string& name, const std::string& description) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->markDocumentForPurge(_return, securityToken, uris, name, description);
    }
    ifaces_[i]->markDocumentForPurge(_return, securityToken, uris, name, description);
    return;
  }

  void getDocumentUriFromId(PositionsToUris& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<int64_t> & positionsList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDocumentUriFromId(_return, securityToken, positionsList);
    }
    ifaces_[i]->getDocumentUriFromId(_return, securityToken, positionsList);
    return;
  }

  void getDocumentConvertedUrisFromIds(ConversionResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDocumentConvertedUrisFromIds(_return, securityToken, ids);
    }
    ifaces_[i]->getDocumentConvertedUrisFromIds(_return, securityToken, ids);
    return;
  }

  void getDocumentConvertedUrisFromUris(ConversionResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<std::string> & uris) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDocumentConvertedUrisFromUris(_return, securityToken, uris);
    }
    ifaces_[i]->getDocumentConvertedUrisFromUris(_return, securityToken, uris);
    return;
  }

  void getPurgeInfo(PurgeInfo& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPurgeInfo(_return, securityToken, purgeId);
    }
    ifaces_[i]->getPurgeInfo(_return, securityToken, purgeId);
    return;
  }

  void getAllPurgeIds(std::vector<int64_t> & _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllPurgeIds(_return, securityToken);
    }
    ifaces_[i]->getAllPurgeIds(_return, securityToken);
    return;
  }

  void updatePurge(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId, const std::set<int64_t> & completelyPurged, const std::string& note, const bool resolved) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updatePurge(securityToken, purgeId, completelyPurged, note, resolved);
    }
    ifaces_[i]->updatePurge(securityToken, purgeId, completelyPurged, note, resolved);
  }

  void removeDocumentAgeOffRuleInheritance(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t parentId, const std::string& parentUri) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeDocumentAgeOffRuleInheritance(securityToken, documentId, documentUri, parentId, parentUri);
    }
    ifaces_[i]->removeDocumentAgeOffRuleInheritance(securityToken, documentId, documentUri, parentId, parentUri);
  }

  void removeDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t ageOffRuleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeDocumentExplicitAgeOffRule(securityToken, documentId, documentUri, ageOffRuleId);
    }
    ifaces_[i]->removeDocumentExplicitAgeOffRule(securityToken, documentId, documentUri, ageOffRuleId);
  }

  void addDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const AgeOffMapping& ageOffMapping) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDocumentExplicitAgeOffRule(securityToken, documentId, documentUri, ageOffMapping);
    }
    ifaces_[i]->addDocumentExplicitAgeOffRule(securityToken, documentId, documentUri, ageOffMapping);
  }

  void addDocumentInheritanceInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const InheritanceInfo& inheritanceInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDocumentInheritanceInfo(securityToken, documentId, documentUri, inheritanceInfo);
    }
    ifaces_[i]->addDocumentInheritanceInfo(securityToken, documentId, documentUri, inheritanceInfo);
  }

  void recordObjectAccess(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const ObjectAccessType::type accessType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recordObjectAccess(securityToken, documentUri, accessType);
    }
    ifaces_[i]->recordObjectAccess(securityToken, documentUri, accessType);
  }

  void fetchUsersDocuments(ResultsAndContinuation& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& userPrincipal, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchUsersDocuments(_return, securityToken, userPrincipal, startDateTime, stopDateTime, numToFetch, continuationPoint);
    }
    ifaces_[i]->fetchUsersDocuments(_return, securityToken, userPrincipal, startDateTime, stopDateTime, numToFetch, continuationPoint);
    return;
  }

  void fetchDocumentUsers(ResultsAndContinuation& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchDocumentUsers(_return, securityToken, documentUri, startDateTime, stopDateTime, numToFetch, continuationPoint);
    }
    ifaces_[i]->fetchDocumentUsers(_return, securityToken, documentUri, startDateTime, stopDateTime, numToFetch, continuationPoint);
    return;
  }

};

class ProvenanceServiceCobClient;

class ProvenanceServiceCobClIf : virtual public  ::ezbake::base::thrift::EzBakeBaseServiceCobClIf {
 public:
  virtual ~ProvenanceServiceCobClIf() {}
  virtual void addAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds, const int32_t maximumExecutionPeriod) = 0;
  virtual void getAgeOffRuleById(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId) = 0;
  virtual void getAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name) = 0;
  virtual void updateAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds) = 0;
  virtual void getAllAgeOffRules(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int32_t limit, const int32_t page) = 0;
  virtual void countAgeOffRules(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken) = 0;
  virtual void addDocument(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& token, const std::string& uri, const std::vector<InheritanceInfo> & parents, const std::vector<AgeOffMapping> & ageOffRules) = 0;
  virtual void addDocuments(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<AddDocumentEntry> & documents, const std::set<AgeOffMapping> & ageOffRules) = 0;
  virtual void getAddDocumentsMaxSize(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken) = 0;
  virtual void startAgeOffEvent(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId, const  ::ezbake::base::thrift::DateTime& effectiveTime) = 0;
  virtual void markDocumentAsAged(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & agedDocumentIds) = 0;
  virtual void getDocumentInfo(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t id, const std::string& uri) = 0;
  virtual void getDocumentAncestors(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris) = 0;
  virtual void getDocumentDescendants(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris) = 0;
  virtual void markDocumentForPurge(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris, const std::string& name, const std::string& description) = 0;
  virtual void getDocumentUriFromId(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<int64_t> & positionsList) = 0;
  virtual void getDocumentConvertedUrisFromIds(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & ids) = 0;
  virtual void getDocumentConvertedUrisFromUris(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<std::string> & uris) = 0;
  virtual void getPurgeInfo(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId) = 0;
  virtual void getAllPurgeIds(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken) = 0;
  virtual void updatePurge(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId, const std::set<int64_t> & completelyPurged, const std::string& note, const bool resolved) = 0;
  virtual void removeDocumentAgeOffRuleInheritance(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t parentId, const std::string& parentUri) = 0;
  virtual void removeDocumentExplicitAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t ageOffRuleId) = 0;
  virtual void addDocumentExplicitAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const AgeOffMapping& ageOffMapping) = 0;
  virtual void addDocumentInheritanceInfo(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const InheritanceInfo& inheritanceInfo) = 0;
  virtual void recordObjectAccess(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const ObjectAccessType::type accessType) = 0;
  virtual void fetchUsersDocuments(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& userPrincipal, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint) = 0;
  virtual void fetchDocumentUsers(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint) = 0;
};

class ProvenanceServiceCobSvIf : virtual public  ::ezbake::base::thrift::EzBakeBaseServiceCobSvIf {
 public:
  virtual ~ProvenanceServiceCobSvIf() {}
  virtual void addAgeOffRule(tcxx::function<void(int64_t const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds, const int32_t maximumExecutionPeriod) = 0;
  virtual void getAgeOffRuleById(tcxx::function<void(AgeOffRule const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId) = 0;
  virtual void getAgeOffRule(tcxx::function<void(AgeOffRule const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name) = 0;
  virtual void updateAgeOffRule(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds) = 0;
  virtual void getAllAgeOffRules(tcxx::function<void(std::vector<AgeOffRule>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int32_t limit, const int32_t page) = 0;
  virtual void countAgeOffRules(tcxx::function<void(int32_t const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken) = 0;
  virtual void addDocument(tcxx::function<void(int64_t const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& token, const std::string& uri, const std::vector<InheritanceInfo> & parents, const std::vector<AgeOffMapping> & ageOffRules) = 0;
  virtual void addDocuments(tcxx::function<void(std::map<std::string, AddDocumentResult>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<AddDocumentEntry> & documents, const std::set<AgeOffMapping> & ageOffRules) = 0;
  virtual void getAddDocumentsMaxSize(tcxx::function<void(int32_t const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken) = 0;
  virtual void startAgeOffEvent(tcxx::function<void(AgeOffInitiationResult const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId, const  ::ezbake::base::thrift::DateTime& effectiveTime) = 0;
  virtual void markDocumentAsAged(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & agedDocumentIds) = 0;
  virtual void getDocumentInfo(tcxx::function<void(DocumentInfo const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t id, const std::string& uri) = 0;
  virtual void getDocumentAncestors(tcxx::function<void(DerivedResult const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris) = 0;
  virtual void getDocumentDescendants(tcxx::function<void(DerivedResult const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris) = 0;
  virtual void markDocumentForPurge(tcxx::function<void(PurgeInitiationResult const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris, const std::string& name, const std::string& description) = 0;
  virtual void getDocumentUriFromId(tcxx::function<void(PositionsToUris const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<int64_t> & positionsList) = 0;
  virtual void getDocumentConvertedUrisFromIds(tcxx::function<void(ConversionResult const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & ids) = 0;
  virtual void getDocumentConvertedUrisFromUris(tcxx::function<void(ConversionResult const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<std::string> & uris) = 0;
  virtual void getPurgeInfo(tcxx::function<void(PurgeInfo const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId) = 0;
  virtual void getAllPurgeIds(tcxx::function<void(std::vector<int64_t>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken) = 0;
  virtual void updatePurge(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId, const std::set<int64_t> & completelyPurged, const std::string& note, const bool resolved) = 0;
  virtual void removeDocumentAgeOffRuleInheritance(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t parentId, const std::string& parentUri) = 0;
  virtual void removeDocumentExplicitAgeOffRule(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t ageOffRuleId) = 0;
  virtual void addDocumentExplicitAgeOffRule(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const AgeOffMapping& ageOffMapping) = 0;
  virtual void addDocumentInheritanceInfo(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const InheritanceInfo& inheritanceInfo) = 0;
  virtual void recordObjectAccess(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const ObjectAccessType::type accessType) = 0;
  virtual void fetchUsersDocuments(tcxx::function<void(ResultsAndContinuation const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& userPrincipal, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint) = 0;
  virtual void fetchDocumentUsers(tcxx::function<void(ResultsAndContinuation const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint) = 0;
};

class ProvenanceServiceCobSvIfFactory : virtual public  ::ezbake::base::thrift::EzBakeBaseServiceCobSvIfFactory {
 public:
  typedef ProvenanceServiceCobSvIf Handler;

  virtual ~ProvenanceServiceCobSvIfFactory() {}

  virtual ProvenanceServiceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::ezbake::base::thrift::EzBakeBaseServiceCobSvIf* /* handler */) = 0;
};

class ProvenanceServiceCobSvIfSingletonFactory : virtual public ProvenanceServiceCobSvIfFactory {
 public:
  ProvenanceServiceCobSvIfSingletonFactory(const boost::shared_ptr<ProvenanceServiceCobSvIf>& iface) : iface_(iface) {}
  virtual ~ProvenanceServiceCobSvIfSingletonFactory() {}

  virtual ProvenanceServiceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::ezbake::base::thrift::EzBakeBaseServiceCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<ProvenanceServiceCobSvIf> iface_;
};

class ProvenanceServiceCobSvNull : virtual public ProvenanceServiceCobSvIf , virtual public  ::ezbake::base::thrift::EzBakeBaseServiceCobSvNull {
 public:
  virtual ~ProvenanceServiceCobSvNull() {}
  void addAgeOffRule(tcxx::function<void(int64_t const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::string& /* name */, const int64_t /* retentionDurationSeconds */, const int32_t /* maximumExecutionPeriod */) {
    int64_t _return = 0;
    return cob(_return);
  }
  void getAgeOffRuleById(tcxx::function<void(AgeOffRule const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* ruleId */) {
    AgeOffRule _return;
    return cob(_return);
  }
  void getAgeOffRule(tcxx::function<void(AgeOffRule const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::string& /* name */) {
    AgeOffRule _return;
    return cob(_return);
  }
  void updateAgeOffRule(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::string& /* name */, const int64_t /* retentionDurationSeconds */) {
    return cob();
  }
  void getAllAgeOffRules(tcxx::function<void(std::vector<AgeOffRule>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int32_t /* limit */, const int32_t /* page */) {
    std::vector<AgeOffRule>  _return;
    return cob(_return);
  }
  void countAgeOffRules(tcxx::function<void(int32_t const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void addDocument(tcxx::function<void(int64_t const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* token */, const std::string& /* uri */, const std::vector<InheritanceInfo> & /* parents */, const std::vector<AgeOffMapping> & /* ageOffRules */) {
    int64_t _return = 0;
    return cob(_return);
  }
  void addDocuments(tcxx::function<void(std::map<std::string, AddDocumentResult>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::set<AddDocumentEntry> & /* documents */, const std::set<AgeOffMapping> & /* ageOffRules */) {
    std::map<std::string, AddDocumentResult>  _return;
    return cob(_return);
  }
  void getAddDocumentsMaxSize(tcxx::function<void(int32_t const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */) {
    int32_t _return = 0;
    return cob(_return);
  }
  void startAgeOffEvent(tcxx::function<void(AgeOffInitiationResult const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* ruleId */, const  ::ezbake::base::thrift::DateTime& /* effectiveTime */) {
    AgeOffInitiationResult _return;
    return cob(_return);
  }
  void markDocumentAsAged(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::set<int64_t> & /* agedDocumentIds */) {
    return cob();
  }
  void getDocumentInfo(tcxx::function<void(DocumentInfo const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* id */, const std::string& /* uri */) {
    DocumentInfo _return;
    return cob(_return);
  }
  void getDocumentAncestors(tcxx::function<void(DerivedResult const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::vector<std::string> & /* uris */) {
    DerivedResult _return;
    return cob(_return);
  }
  void getDocumentDescendants(tcxx::function<void(DerivedResult const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::vector<std::string> & /* uris */) {
    DerivedResult _return;
    return cob(_return);
  }
  void markDocumentForPurge(tcxx::function<void(PurgeInitiationResult const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::vector<std::string> & /* uris */, const std::string& /* name */, const std::string& /* description */) {
    PurgeInitiationResult _return;
    return cob(_return);
  }
  void getDocumentUriFromId(tcxx::function<void(PositionsToUris const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::vector<int64_t> & /* positionsList */) {
    PositionsToUris _return;
    return cob(_return);
  }
  void getDocumentConvertedUrisFromIds(tcxx::function<void(ConversionResult const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::set<int64_t> & /* ids */) {
    ConversionResult _return;
    return cob(_return);
  }
  void getDocumentConvertedUrisFromUris(tcxx::function<void(ConversionResult const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::set<std::string> & /* uris */) {
    ConversionResult _return;
    return cob(_return);
  }
  void getPurgeInfo(tcxx::function<void(PurgeInfo const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* purgeId */) {
    PurgeInfo _return;
    return cob(_return);
  }
  void getAllPurgeIds(tcxx::function<void(std::vector<int64_t>  const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */) {
    std::vector<int64_t>  _return;
    return cob(_return);
  }
  void updatePurge(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* purgeId */, const std::set<int64_t> & /* completelyPurged */, const std::string& /* note */, const bool /* resolved */) {
    return cob();
  }
  void removeDocumentAgeOffRuleInheritance(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* documentId */, const std::string& /* documentUri */, const int64_t /* parentId */, const std::string& /* parentUri */) {
    return cob();
  }
  void removeDocumentExplicitAgeOffRule(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* documentId */, const std::string& /* documentUri */, const int64_t /* ageOffRuleId */) {
    return cob();
  }
  void addDocumentExplicitAgeOffRule(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* documentId */, const std::string& /* documentUri */, const AgeOffMapping& /* ageOffMapping */) {
    return cob();
  }
  void addDocumentInheritanceInfo(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const int64_t /* documentId */, const std::string& /* documentUri */, const InheritanceInfo& /* inheritanceInfo */) {
    return cob();
  }
  void recordObjectAccess(tcxx::function<void()> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::string& /* documentUri */, const ObjectAccessType::type /* accessType */) {
    return cob();
  }
  void fetchUsersDocuments(tcxx::function<void(ResultsAndContinuation const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::string& /* userPrincipal */, const  ::ezbake::base::thrift::DateTime& /* startDateTime */, const  ::ezbake::base::thrift::DateTime& /* stopDateTime */, const int32_t /* numToFetch */, const AccumuloContinuationPoint& /* continuationPoint */) {
    ResultsAndContinuation _return;
    return cob(_return);
  }
  void fetchDocumentUsers(tcxx::function<void(ResultsAndContinuation const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const  ::ezbake::base::thrift::EzSecurityToken& /* securityToken */, const std::string& /* documentUri */, const  ::ezbake::base::thrift::DateTime& /* startDateTime */, const  ::ezbake::base::thrift::DateTime& /* stopDateTime */, const int32_t /* numToFetch */, const AccumuloContinuationPoint& /* continuationPoint */) {
    ResultsAndContinuation _return;
    return cob(_return);
  }
};

class ProvenanceServiceCobClient : virtual public ProvenanceServiceCobClIf, public  ::ezbake::base::thrift::EzBakeBaseServiceCobClient {
 public:
  ProvenanceServiceCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
     ::ezbake::base::thrift::EzBakeBaseServiceCobClient(channel, protocolFactory) {}
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void addAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds, const int32_t maximumExecutionPeriod);
  void send_addAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds, const int32_t maximumExecutionPeriod);
  int64_t recv_addAgeOffRule();
  void getAgeOffRuleById(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId);
  void send_getAgeOffRuleById(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId);
  void recv_getAgeOffRuleById(AgeOffRule& _return);
  void getAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name);
  void send_getAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name);
  void recv_getAgeOffRule(AgeOffRule& _return);
  void updateAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds);
  void send_updateAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds);
  void recv_updateAgeOffRule();
  void getAllAgeOffRules(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int32_t limit, const int32_t page);
  void send_getAllAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int32_t limit, const int32_t page);
  void recv_getAllAgeOffRules(std::vector<AgeOffRule> & _return);
  void countAgeOffRules(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken);
  void send_countAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& securityToken);
  int32_t recv_countAgeOffRules();
  void addDocument(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& token, const std::string& uri, const std::vector<InheritanceInfo> & parents, const std::vector<AgeOffMapping> & ageOffRules);
  void send_addDocument(const  ::ezbake::base::thrift::EzSecurityToken& token, const std::string& uri, const std::vector<InheritanceInfo> & parents, const std::vector<AgeOffMapping> & ageOffRules);
  int64_t recv_addDocument();
  void addDocuments(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<AddDocumentEntry> & documents, const std::set<AgeOffMapping> & ageOffRules);
  void send_addDocuments(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<AddDocumentEntry> & documents, const std::set<AgeOffMapping> & ageOffRules);
  void recv_addDocuments(std::map<std::string, AddDocumentResult> & _return);
  void getAddDocumentsMaxSize(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken);
  void send_getAddDocumentsMaxSize(const  ::ezbake::base::thrift::EzSecurityToken& securityToken);
  int32_t recv_getAddDocumentsMaxSize();
  void startAgeOffEvent(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId, const  ::ezbake::base::thrift::DateTime& effectiveTime);
  void send_startAgeOffEvent(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId, const  ::ezbake::base::thrift::DateTime& effectiveTime);
  void recv_startAgeOffEvent(AgeOffInitiationResult& _return);
  void markDocumentAsAged(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & agedDocumentIds);
  void send_markDocumentAsAged(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & agedDocumentIds);
  void recv_markDocumentAsAged();
  void getDocumentInfo(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t id, const std::string& uri);
  void send_getDocumentInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t id, const std::string& uri);
  void recv_getDocumentInfo(DocumentInfo& _return);
  void getDocumentAncestors(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris);
  void send_getDocumentAncestors(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris);
  void recv_getDocumentAncestors(DerivedResult& _return);
  void getDocumentDescendants(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris);
  void send_getDocumentDescendants(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris);
  void recv_getDocumentDescendants(DerivedResult& _return);
  void markDocumentForPurge(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris, const std::string& name, const std::string& description);
  void send_markDocumentForPurge(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris, const std::string& name, const std::string& description);
  void recv_markDocumentForPurge(PurgeInitiationResult& _return);
  void getDocumentUriFromId(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<int64_t> & positionsList);
  void send_getDocumentUriFromId(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<int64_t> & positionsList);
  void recv_getDocumentUriFromId(PositionsToUris& _return);
  void getDocumentConvertedUrisFromIds(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & ids);
  void send_getDocumentConvertedUrisFromIds(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & ids);
  void recv_getDocumentConvertedUrisFromIds(ConversionResult& _return);
  void getDocumentConvertedUrisFromUris(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<std::string> & uris);
  void send_getDocumentConvertedUrisFromUris(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<std::string> & uris);
  void recv_getDocumentConvertedUrisFromUris(ConversionResult& _return);
  void getPurgeInfo(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId);
  void send_getPurgeInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId);
  void recv_getPurgeInfo(PurgeInfo& _return);
  void getAllPurgeIds(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken);
  void send_getAllPurgeIds(const  ::ezbake::base::thrift::EzSecurityToken& securityToken);
  void recv_getAllPurgeIds(std::vector<int64_t> & _return);
  void updatePurge(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId, const std::set<int64_t> & completelyPurged, const std::string& note, const bool resolved);
  void send_updatePurge(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId, const std::set<int64_t> & completelyPurged, const std::string& note, const bool resolved);
  void recv_updatePurge();
  void removeDocumentAgeOffRuleInheritance(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t parentId, const std::string& parentUri);
  void send_removeDocumentAgeOffRuleInheritance(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t parentId, const std::string& parentUri);
  void recv_removeDocumentAgeOffRuleInheritance();
  void removeDocumentExplicitAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t ageOffRuleId);
  void send_removeDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t ageOffRuleId);
  void recv_removeDocumentExplicitAgeOffRule();
  void addDocumentExplicitAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const AgeOffMapping& ageOffMapping);
  void send_addDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const AgeOffMapping& ageOffMapping);
  void recv_addDocumentExplicitAgeOffRule();
  void addDocumentInheritanceInfo(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const InheritanceInfo& inheritanceInfo);
  void send_addDocumentInheritanceInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const InheritanceInfo& inheritanceInfo);
  void recv_addDocumentInheritanceInfo();
  void recordObjectAccess(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const ObjectAccessType::type accessType);
  void send_recordObjectAccess(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const ObjectAccessType::type accessType);
  void recv_recordObjectAccess();
  void fetchUsersDocuments(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& userPrincipal, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint);
  void send_fetchUsersDocuments(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& userPrincipal, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint);
  void recv_fetchUsersDocuments(ResultsAndContinuation& _return);
  void fetchDocumentUsers(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint);
  void send_fetchDocumentUsers(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint);
  void recv_fetchDocumentUsers(ResultsAndContinuation& _return);
};

class ProvenanceServiceAsyncProcessor : public  ::ezbake::base::thrift::EzBakeBaseServiceAsyncProcessor {
 protected:
  boost::shared_ptr<ProvenanceServiceCobSvIf> iface_;
  virtual void dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (ProvenanceServiceAsyncProcessor::*ProcessFunction)(tcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_addAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_addAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int64_t& _return);
  void throw_addAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_getAgeOffRuleById(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getAgeOffRuleById(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const AgeOffRule& _return);
  void throw_getAgeOffRuleById(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_getAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const AgeOffRule& _return);
  void throw_getAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_updateAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_updateAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_updateAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_getAllAgeOffRules(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getAllAgeOffRules(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<AgeOffRule> & _return);
  void throw_getAllAgeOffRules(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_countAgeOffRules(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_countAgeOffRules(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_countAgeOffRules(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_addDocument(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_addDocument(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int64_t& _return);
  void throw_addDocument(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_addDocuments(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_addDocuments(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::map<std::string, AddDocumentResult> & _return);
  void throw_addDocuments(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_getAddDocumentsMaxSize(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getAddDocumentsMaxSize(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return);
  void throw_getAddDocumentsMaxSize(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_startAgeOffEvent(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_startAgeOffEvent(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const AgeOffInitiationResult& _return);
  void throw_startAgeOffEvent(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_markDocumentAsAged(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_markDocumentAsAged(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_markDocumentAsAged(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_getDocumentInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getDocumentInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const DocumentInfo& _return);
  void throw_getDocumentInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_getDocumentAncestors(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getDocumentAncestors(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const DerivedResult& _return);
  void throw_getDocumentAncestors(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_getDocumentDescendants(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getDocumentDescendants(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const DerivedResult& _return);
  void throw_getDocumentDescendants(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_markDocumentForPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_markDocumentForPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeInitiationResult& _return);
  void throw_markDocumentForPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_getDocumentUriFromId(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getDocumentUriFromId(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PositionsToUris& _return);
  void throw_getDocumentUriFromId(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_getDocumentConvertedUrisFromIds(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getDocumentConvertedUrisFromIds(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ConversionResult& _return);
  void throw_getDocumentConvertedUrisFromIds(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_getDocumentConvertedUrisFromUris(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getDocumentConvertedUrisFromUris(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ConversionResult& _return);
  void throw_getDocumentConvertedUrisFromUris(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_getPurgeInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getPurgeInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeInfo& _return);
  void throw_getPurgeInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_getAllPurgeIds(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_getAllPurgeIds(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<int64_t> & _return);
  void throw_getAllPurgeIds(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_updatePurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_updatePurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_updatePurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_removeDocumentAgeOffRuleInheritance(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_removeDocumentAgeOffRuleInheritance(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_removeDocumentAgeOffRuleInheritance(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_removeDocumentExplicitAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_removeDocumentExplicitAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_removeDocumentExplicitAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_addDocumentExplicitAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_addDocumentExplicitAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_addDocumentExplicitAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_addDocumentInheritanceInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_addDocumentInheritanceInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_addDocumentInheritanceInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_recordObjectAccess(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_recordObjectAccess(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_recordObjectAccess(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_fetchUsersDocuments(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_fetchUsersDocuments(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResultsAndContinuation& _return);
  void throw_fetchUsersDocuments(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_fetchDocumentUsers(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_fetchDocumentUsers(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResultsAndContinuation& _return);
  void throw_fetchDocumentUsers(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  ProvenanceServiceAsyncProcessor(boost::shared_ptr<ProvenanceServiceCobSvIf> iface) :
     ::ezbake::base::thrift::EzBakeBaseServiceAsyncProcessor(iface),
    iface_(iface) {
    processMap_["addAgeOffRule"] = &ProvenanceServiceAsyncProcessor::process_addAgeOffRule;
    processMap_["getAgeOffRuleById"] = &ProvenanceServiceAsyncProcessor::process_getAgeOffRuleById;
    processMap_["getAgeOffRule"] = &ProvenanceServiceAsyncProcessor::process_getAgeOffRule;
    processMap_["updateAgeOffRule"] = &ProvenanceServiceAsyncProcessor::process_updateAgeOffRule;
    processMap_["getAllAgeOffRules"] = &ProvenanceServiceAsyncProcessor::process_getAllAgeOffRules;
    processMap_["countAgeOffRules"] = &ProvenanceServiceAsyncProcessor::process_countAgeOffRules;
    processMap_["addDocument"] = &ProvenanceServiceAsyncProcessor::process_addDocument;
    processMap_["addDocuments"] = &ProvenanceServiceAsyncProcessor::process_addDocuments;
    processMap_["getAddDocumentsMaxSize"] = &ProvenanceServiceAsyncProcessor::process_getAddDocumentsMaxSize;
    processMap_["startAgeOffEvent"] = &ProvenanceServiceAsyncProcessor::process_startAgeOffEvent;
    processMap_["markDocumentAsAged"] = &ProvenanceServiceAsyncProcessor::process_markDocumentAsAged;
    processMap_["getDocumentInfo"] = &ProvenanceServiceAsyncProcessor::process_getDocumentInfo;
    processMap_["getDocumentAncestors"] = &ProvenanceServiceAsyncProcessor::process_getDocumentAncestors;
    processMap_["getDocumentDescendants"] = &ProvenanceServiceAsyncProcessor::process_getDocumentDescendants;
    processMap_["markDocumentForPurge"] = &ProvenanceServiceAsyncProcessor::process_markDocumentForPurge;
    processMap_["getDocumentUriFromId"] = &ProvenanceServiceAsyncProcessor::process_getDocumentUriFromId;
    processMap_["getDocumentConvertedUrisFromIds"] = &ProvenanceServiceAsyncProcessor::process_getDocumentConvertedUrisFromIds;
    processMap_["getDocumentConvertedUrisFromUris"] = &ProvenanceServiceAsyncProcessor::process_getDocumentConvertedUrisFromUris;
    processMap_["getPurgeInfo"] = &ProvenanceServiceAsyncProcessor::process_getPurgeInfo;
    processMap_["getAllPurgeIds"] = &ProvenanceServiceAsyncProcessor::process_getAllPurgeIds;
    processMap_["updatePurge"] = &ProvenanceServiceAsyncProcessor::process_updatePurge;
    processMap_["removeDocumentAgeOffRuleInheritance"] = &ProvenanceServiceAsyncProcessor::process_removeDocumentAgeOffRuleInheritance;
    processMap_["removeDocumentExplicitAgeOffRule"] = &ProvenanceServiceAsyncProcessor::process_removeDocumentExplicitAgeOffRule;
    processMap_["addDocumentExplicitAgeOffRule"] = &ProvenanceServiceAsyncProcessor::process_addDocumentExplicitAgeOffRule;
    processMap_["addDocumentInheritanceInfo"] = &ProvenanceServiceAsyncProcessor::process_addDocumentInheritanceInfo;
    processMap_["recordObjectAccess"] = &ProvenanceServiceAsyncProcessor::process_recordObjectAccess;
    processMap_["fetchUsersDocuments"] = &ProvenanceServiceAsyncProcessor::process_fetchUsersDocuments;
    processMap_["fetchDocumentUsers"] = &ProvenanceServiceAsyncProcessor::process_fetchDocumentUsers;
  }

  virtual ~ProvenanceServiceAsyncProcessor() {}
};

class ProvenanceServiceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  ProvenanceServiceAsyncProcessorFactory(const ::boost::shared_ptr< ProvenanceServiceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ProvenanceServiceCobSvIfFactory > handlerFactory_;
};



#endif
