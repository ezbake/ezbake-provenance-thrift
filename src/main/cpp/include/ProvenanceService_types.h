/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ProvenanceService_TYPES_H
#define ProvenanceService_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "ezbakeBaseTypes_types.h"
#include "ezbakeBaseService_types.h"




struct AddDocumentStatus {
  enum type {
    SUCCESS = 0,
    ALREADY_EXISTS = 1,
    PARENT_NOT_FOUND = 2,
    CIRCULAR_INHERITANCE_NOT_ALLOWED = 3,
    UNKNOWN_ERROR = 4
  };
};

extern const std::map<int, const char*> _AddDocumentStatus_VALUES_TO_NAMES;

struct ObjectAccessType {
  enum type {
    CREATE = 0,
    READ = 1,
    WRITE = 2,
    MANAGE = 3,
    DELETE = 4
  };
};

extern const std::map<int, const char*> _ObjectAccessType_VALUES_TO_NAMES;

typedef struct _InheritanceInfo__isset {
  _InheritanceInfo__isset() : ageOffRelevantDateTime(false) {}
  bool ageOffRelevantDateTime;
} _InheritanceInfo__isset;

class InheritanceInfo {
 public:

  static const char* ascii_fingerprint; // = "2C6AF00F534915CED6A3CB8E51ED4502";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x6A,0xF0,0x0F,0x53,0x49,0x15,0xCE,0xD6,0xA3,0xCB,0x8E,0x51,0xED,0x45,0x02};

  InheritanceInfo() : parentUri(), inheritParentAgeOff(0), trackParentAgeOff(0) {
  }

  virtual ~InheritanceInfo() throw() {}

  std::string parentUri;
  bool inheritParentAgeOff;
  bool trackParentAgeOff;
   ::ezbake::base::thrift::DateTime ageOffRelevantDateTime;

  _InheritanceInfo__isset __isset;

  void __set_parentUri(const std::string& val) {
    parentUri = val;
  }

  void __set_inheritParentAgeOff(const bool val) {
    inheritParentAgeOff = val;
  }

  void __set_trackParentAgeOff(const bool val) {
    trackParentAgeOff = val;
  }

  void __set_ageOffRelevantDateTime(const  ::ezbake::base::thrift::DateTime& val) {
    ageOffRelevantDateTime = val;
    __isset.ageOffRelevantDateTime = true;
  }

  bool operator == (const InheritanceInfo & rhs) const
  {
    if (!(parentUri == rhs.parentUri))
      return false;
    if (!(inheritParentAgeOff == rhs.inheritParentAgeOff))
      return false;
    if (!(trackParentAgeOff == rhs.trackParentAgeOff))
      return false;
    if (__isset.ageOffRelevantDateTime != rhs.__isset.ageOffRelevantDateTime)
      return false;
    else if (__isset.ageOffRelevantDateTime && !(ageOffRelevantDateTime == rhs.ageOffRelevantDateTime))
      return false;
    return true;
  }
  bool operator != (const InheritanceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InheritanceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InheritanceInfo &a, InheritanceInfo &b);

typedef struct _AccumuloContinuationPoint__isset {
  _AccumuloContinuationPoint__isset() : rowId(false), colFam(false), colQual(false) {}
  bool rowId;
  bool colFam;
  bool colQual;
} _AccumuloContinuationPoint__isset;

class AccumuloContinuationPoint {
 public:

  static const char* ascii_fingerprint; // = "70FDE8E2CF7554673E73BFFD9EF87777";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0xFD,0xE8,0xE2,0xCF,0x75,0x54,0x67,0x3E,0x73,0xBF,0xFD,0x9E,0xF8,0x77,0x77};

  AccumuloContinuationPoint() : startAtBeginning(0), rowId(), colFam(), colQual() {
  }

  virtual ~AccumuloContinuationPoint() throw() {}

  bool startAtBeginning;
  std::string rowId;
  std::string colFam;
  std::string colQual;

  _AccumuloContinuationPoint__isset __isset;

  void __set_startAtBeginning(const bool val) {
    startAtBeginning = val;
  }

  void __set_rowId(const std::string& val) {
    rowId = val;
    __isset.rowId = true;
  }

  void __set_colFam(const std::string& val) {
    colFam = val;
    __isset.colFam = true;
  }

  void __set_colQual(const std::string& val) {
    colQual = val;
    __isset.colQual = true;
  }

  bool operator == (const AccumuloContinuationPoint & rhs) const
  {
    if (!(startAtBeginning == rhs.startAtBeginning))
      return false;
    if (__isset.rowId != rhs.__isset.rowId)
      return false;
    else if (__isset.rowId && !(rowId == rhs.rowId))
      return false;
    if (__isset.colFam != rhs.__isset.colFam)
      return false;
    else if (__isset.colFam && !(colFam == rhs.colFam))
      return false;
    if (__isset.colQual != rhs.__isset.colQual)
      return false;
    else if (__isset.colQual && !(colQual == rhs.colQual))
      return false;
    return true;
  }
  bool operator != (const AccumuloContinuationPoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccumuloContinuationPoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AccumuloContinuationPoint &a, AccumuloContinuationPoint &b);


class ResultsAndContinuation {
 public:

  static const char* ascii_fingerprint; // = "C782A14F99A968E51BB8F55B3D4D2076";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0x82,0xA1,0x4F,0x99,0xA9,0x68,0xE5,0x1B,0xB8,0xF5,0x5B,0x3D,0x4D,0x20,0x76};

  ResultsAndContinuation() {
  }

  virtual ~ResultsAndContinuation() throw() {}

  std::vector<std::string>  results;
  AccumuloContinuationPoint continuationPoint;

  void __set_results(const std::vector<std::string> & val) {
    results = val;
  }

  void __set_continuationPoint(const AccumuloContinuationPoint& val) {
    continuationPoint = val;
  }

  bool operator == (const ResultsAndContinuation & rhs) const
  {
    if (!(results == rhs.results))
      return false;
    if (!(continuationPoint == rhs.continuationPoint))
      return false;
    return true;
  }
  bool operator != (const ResultsAndContinuation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResultsAndContinuation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResultsAndContinuation &a, ResultsAndContinuation &b);


class AgeOffMapping {
 public:

  static const char* ascii_fingerprint; // = "2E0B4012E347CE32BECAB5B768CF1313";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0x0B,0x40,0x12,0xE3,0x47,0xCE,0x32,0xBE,0xCA,0xB5,0xB7,0x68,0xCF,0x13,0x13};

  AgeOffMapping() : ruleId(0) {
  }

  virtual ~AgeOffMapping() throw() {}

  int64_t ruleId;
   ::ezbake::base::thrift::DateTime ageOffRelevantDateTime;

  void __set_ruleId(const int64_t val) {
    ruleId = val;
  }

  void __set_ageOffRelevantDateTime(const  ::ezbake::base::thrift::DateTime& val) {
    ageOffRelevantDateTime = val;
  }

  bool operator == (const AgeOffMapping & rhs) const
  {
    if (!(ruleId == rhs.ruleId))
      return false;
    if (!(ageOffRelevantDateTime == rhs.ageOffRelevantDateTime))
      return false;
    return true;
  }
  bool operator != (const AgeOffMapping &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgeOffMapping & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AgeOffMapping &a, AgeOffMapping &b);

typedef struct _DerivedResult__isset {
  _DerivedResult__isset() : immediateChildren(false) {}
  bool immediateChildren;
} _DerivedResult__isset;

class DerivedResult {
 public:

  static const char* ascii_fingerprint; // = "329F97BF882984AD77256F3B975E3227";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x9F,0x97,0xBF,0x88,0x29,0x84,0xAD,0x77,0x25,0x6F,0x3B,0x97,0x5E,0x32,0x27};

  DerivedResult() {
  }

  virtual ~DerivedResult() throw() {}

  std::set<int64_t>  derivedDocs;
  std::vector<std::string>  urisNotFound;
  std::vector<int64_t>  immediateChildren;

  _DerivedResult__isset __isset;

  void __set_derivedDocs(const std::set<int64_t> & val) {
    derivedDocs = val;
  }

  void __set_urisNotFound(const std::vector<std::string> & val) {
    urisNotFound = val;
  }

  void __set_immediateChildren(const std::vector<int64_t> & val) {
    immediateChildren = val;
    __isset.immediateChildren = true;
  }

  bool operator == (const DerivedResult & rhs) const
  {
    if (!(derivedDocs == rhs.derivedDocs))
      return false;
    if (!(urisNotFound == rhs.urisNotFound))
      return false;
    if (__isset.immediateChildren != rhs.__isset.immediateChildren)
      return false;
    else if (__isset.immediateChildren && !(immediateChildren == rhs.immediateChildren))
      return false;
    return true;
  }
  bool operator != (const DerivedResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DerivedResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DerivedResult &a, DerivedResult &b);

typedef struct _DocumentAgeOffInfo__isset {
  _DocumentAgeOffInfo__isset() : inheritedFromId(false), inheritedFromUri(false) {}
  bool inheritedFromId;
  bool inheritedFromUri;
} _DocumentAgeOffInfo__isset;

class DocumentAgeOffInfo {
 public:

  static const char* ascii_fingerprint; // = "9AE2DC5E8CAD76C2FC9D50FF7F136582";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0xE2,0xDC,0x5E,0x8C,0xAD,0x76,0xC2,0xFC,0x9D,0x50,0xFF,0x7F,0x13,0x65,0x82};

  DocumentAgeOffInfo() : ruleId(0), maximumExecutionPeriod(0), application(), user(), inherited(0), inheritedFromId(0), inheritedFromUri() {
  }

  virtual ~DocumentAgeOffInfo() throw() {}

  int64_t ruleId;
   ::ezbake::base::thrift::DateTime ageOffRelevantDateTime;
  int32_t maximumExecutionPeriod;
   ::ezbake::base::thrift::DateTime timeStamp;
  std::string application;
  std::string user;
  bool inherited;
  int64_t inheritedFromId;
  std::string inheritedFromUri;

  _DocumentAgeOffInfo__isset __isset;

  void __set_ruleId(const int64_t val) {
    ruleId = val;
  }

  void __set_ageOffRelevantDateTime(const  ::ezbake::base::thrift::DateTime& val) {
    ageOffRelevantDateTime = val;
  }

  void __set_maximumExecutionPeriod(const int32_t val) {
    maximumExecutionPeriod = val;
  }

  void __set_timeStamp(const  ::ezbake::base::thrift::DateTime& val) {
    timeStamp = val;
  }

  void __set_application(const std::string& val) {
    application = val;
  }

  void __set_user(const std::string& val) {
    user = val;
  }

  void __set_inherited(const bool val) {
    inherited = val;
  }

  void __set_inheritedFromId(const int64_t val) {
    inheritedFromId = val;
    __isset.inheritedFromId = true;
  }

  void __set_inheritedFromUri(const std::string& val) {
    inheritedFromUri = val;
    __isset.inheritedFromUri = true;
  }

  bool operator == (const DocumentAgeOffInfo & rhs) const
  {
    if (!(ruleId == rhs.ruleId))
      return false;
    if (!(ageOffRelevantDateTime == rhs.ageOffRelevantDateTime))
      return false;
    if (!(maximumExecutionPeriod == rhs.maximumExecutionPeriod))
      return false;
    if (!(timeStamp == rhs.timeStamp))
      return false;
    if (!(application == rhs.application))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(inherited == rhs.inherited))
      return false;
    if (__isset.inheritedFromId != rhs.__isset.inheritedFromId)
      return false;
    else if (__isset.inheritedFromId && !(inheritedFromId == rhs.inheritedFromId))
      return false;
    if (__isset.inheritedFromUri != rhs.__isset.inheritedFromUri)
      return false;
    else if (__isset.inheritedFromUri && !(inheritedFromUri == rhs.inheritedFromUri))
      return false;
    return true;
  }
  bool operator != (const DocumentAgeOffInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentAgeOffInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DocumentAgeOffInfo &a, DocumentAgeOffInfo &b);


class DocumentInfo {
 public:

  static const char* ascii_fingerprint; // = "896DEB481EB842931F99DCAD63D51FD9";
  static const uint8_t binary_fingerprint[16]; // = {0x89,0x6D,0xEB,0x48,0x1E,0xB8,0x42,0x93,0x1F,0x99,0xDC,0xAD,0x63,0xD5,0x1F,0xD9};

  DocumentInfo() : uri(), documentId(0), application(), user(), aged(0) {
  }

  virtual ~DocumentInfo() throw() {}

  std::string uri;
  int64_t documentId;
  std::string application;
   ::ezbake::base::thrift::DateTime timeStamp;
  std::string user;
  std::vector<std::map<int64_t, std::string> >  parents;
  std::vector<std::map<int64_t, std::string> >  children;
  std::vector<DocumentAgeOffInfo>  ageOffInfo;
  bool aged;

  void __set_uri(const std::string& val) {
    uri = val;
  }

  void __set_documentId(const int64_t val) {
    documentId = val;
  }

  void __set_application(const std::string& val) {
    application = val;
  }

  void __set_timeStamp(const  ::ezbake::base::thrift::DateTime& val) {
    timeStamp = val;
  }

  void __set_user(const std::string& val) {
    user = val;
  }

  void __set_parents(const std::vector<std::map<int64_t, std::string> > & val) {
    parents = val;
  }

  void __set_children(const std::vector<std::map<int64_t, std::string> > & val) {
    children = val;
  }

  void __set_ageOffInfo(const std::vector<DocumentAgeOffInfo> & val) {
    ageOffInfo = val;
  }

  void __set_aged(const bool val) {
    aged = val;
  }

  bool operator == (const DocumentInfo & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (!(documentId == rhs.documentId))
      return false;
    if (!(application == rhs.application))
      return false;
    if (!(timeStamp == rhs.timeStamp))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(parents == rhs.parents))
      return false;
    if (!(children == rhs.children))
      return false;
    if (!(ageOffInfo == rhs.ageOffInfo))
      return false;
    if (!(aged == rhs.aged))
      return false;
    return true;
  }
  bool operator != (const DocumentInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocumentInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DocumentInfo &a, DocumentInfo &b);

typedef struct _ConversionResult__isset {
  _ConversionResult__isset() : urisNotFound(false), idsNotFound(false) {}
  bool urisNotFound;
  bool idsNotFound;
} _ConversionResult__isset;

class ConversionResult {
 public:

  static const char* ascii_fingerprint; // = "6E23A63EF18E1680D0E67D4779B17EDE";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x23,0xA6,0x3E,0xF1,0x8E,0x16,0x80,0xD0,0xE6,0x7D,0x47,0x79,0xB1,0x7E,0xDE};

  ConversionResult() {
  }

  virtual ~ConversionResult() throw() {}

  std::vector<int64_t>  convertedUris;
  std::vector<std::string>  urisNotFound;
  std::vector<int64_t>  idsNotFound;

  _ConversionResult__isset __isset;

  void __set_convertedUris(const std::vector<int64_t> & val) {
    convertedUris = val;
  }

  void __set_urisNotFound(const std::vector<std::string> & val) {
    urisNotFound = val;
    __isset.urisNotFound = true;
  }

  void __set_idsNotFound(const std::vector<int64_t> & val) {
    idsNotFound = val;
    __isset.idsNotFound = true;
  }

  bool operator == (const ConversionResult & rhs) const
  {
    if (!(convertedUris == rhs.convertedUris))
      return false;
    if (__isset.urisNotFound != rhs.__isset.urisNotFound)
      return false;
    else if (__isset.urisNotFound && !(urisNotFound == rhs.urisNotFound))
      return false;
    if (__isset.idsNotFound != rhs.__isset.idsNotFound)
      return false;
    else if (__isset.idsNotFound && !(idsNotFound == rhs.idsNotFound))
      return false;
    return true;
  }
  bool operator != (const ConversionResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConversionResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ConversionResult &a, ConversionResult &b);


class AgeOffInitiationResult {
 public:

  static const char* ascii_fingerprint; // = "590531FF1BE8611678B255374F6109EE";
  static const uint8_t binary_fingerprint[16]; // = {0x59,0x05,0x31,0xFF,0x1B,0xE8,0x61,0x16,0x78,0xB2,0x55,0x37,0x4F,0x61,0x09,0xEE};

  AgeOffInitiationResult() : ageOffId(0) {
  }

  virtual ~AgeOffInitiationResult() throw() {}

  int64_t ageOffId;
  std::set<int64_t>  ageOffDocumentIds;

  void __set_ageOffId(const int64_t val) {
    ageOffId = val;
  }

  void __set_ageOffDocumentIds(const std::set<int64_t> & val) {
    ageOffDocumentIds = val;
  }

  bool operator == (const AgeOffInitiationResult & rhs) const
  {
    if (!(ageOffId == rhs.ageOffId))
      return false;
    if (!(ageOffDocumentIds == rhs.ageOffDocumentIds))
      return false;
    return true;
  }
  bool operator != (const AgeOffInitiationResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgeOffInitiationResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AgeOffInitiationResult &a, AgeOffInitiationResult &b);


class PurgeInitiationResult {
 public:

  static const char* ascii_fingerprint; // = "864AD30F493D05F6C5C6C204CDEE9AE8";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x4A,0xD3,0x0F,0x49,0x3D,0x05,0xF6,0xC5,0xC6,0xC2,0x04,0xCD,0xEE,0x9A,0xE8};

  PurgeInitiationResult() : purgeId(0) {
  }

  virtual ~PurgeInitiationResult() throw() {}

  std::set<int64_t>  toBePurged;
  std::vector<std::string>  urisNotFound;
  int64_t purgeId;

  void __set_toBePurged(const std::set<int64_t> & val) {
    toBePurged = val;
  }

  void __set_urisNotFound(const std::vector<std::string> & val) {
    urisNotFound = val;
  }

  void __set_purgeId(const int64_t val) {
    purgeId = val;
  }

  bool operator == (const PurgeInitiationResult & rhs) const
  {
    if (!(toBePurged == rhs.toBePurged))
      return false;
    if (!(urisNotFound == rhs.urisNotFound))
      return false;
    if (!(purgeId == rhs.purgeId))
      return false;
    return true;
  }
  bool operator != (const PurgeInitiationResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PurgeInitiationResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PurgeInitiationResult &a, PurgeInitiationResult &b);

typedef struct _PurgeInfo__isset {
  _PurgeInfo__isset() : name(false), description(false) {}
  bool name;
  bool description;
} _PurgeInfo__isset;

class PurgeInfo {
 public:

  static const char* ascii_fingerprint; // = "C24FC023808E89F7D4D032D895D4B5E3";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x4F,0xC0,0x23,0x80,0x8E,0x89,0xF7,0xD4,0xD0,0x32,0xD8,0x95,0xD4,0xB5,0xE3};

  PurgeInfo() : id(0), user(), name(), description(), resolved(0) {
  }

  virtual ~PurgeInfo() throw() {}

  int64_t id;
   ::ezbake::base::thrift::DateTime timeStamp;
  std::vector<std::string>  documentUris;
  std::vector<std::string>  documentUrisNotFound;
  std::set<int64_t>  purgeDocumentIds;
  std::set<int64_t>  completelyPurgedDocumentIds;
  std::string user;
  std::string name;
  std::string description;
  bool resolved;

  _PurgeInfo__isset __isset;

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_timeStamp(const  ::ezbake::base::thrift::DateTime& val) {
    timeStamp = val;
  }

  void __set_documentUris(const std::vector<std::string> & val) {
    documentUris = val;
  }

  void __set_documentUrisNotFound(const std::vector<std::string> & val) {
    documentUrisNotFound = val;
  }

  void __set_purgeDocumentIds(const std::set<int64_t> & val) {
    purgeDocumentIds = val;
  }

  void __set_completelyPurgedDocumentIds(const std::set<int64_t> & val) {
    completelyPurgedDocumentIds = val;
  }

  void __set_user(const std::string& val) {
    user = val;
  }

  void __set_name(const std::string& val) {
    name = val;
    __isset.name = true;
  }

  void __set_description(const std::string& val) {
    description = val;
    __isset.description = true;
  }

  void __set_resolved(const bool val) {
    resolved = val;
  }

  bool operator == (const PurgeInfo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(timeStamp == rhs.timeStamp))
      return false;
    if (!(documentUris == rhs.documentUris))
      return false;
    if (!(documentUrisNotFound == rhs.documentUrisNotFound))
      return false;
    if (!(purgeDocumentIds == rhs.purgeDocumentIds))
      return false;
    if (!(completelyPurgedDocumentIds == rhs.completelyPurgedDocumentIds))
      return false;
    if (!(user == rhs.user))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (!(resolved == rhs.resolved))
      return false;
    return true;
  }
  bool operator != (const PurgeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PurgeInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PurgeInfo &a, PurgeInfo &b);


class PositionsToUris {
 public:

  static const char* ascii_fingerprint; // = "4BB914762921D4E8002CAA52FBD65029";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xB9,0x14,0x76,0x29,0x21,0xD4,0xE8,0x00,0x2C,0xAA,0x52,0xFB,0xD6,0x50,0x29};

  PositionsToUris() {
  }

  virtual ~PositionsToUris() throw() {}

  std::map<int64_t, std::string>  mapping;
  std::vector<int64_t>  unfoundPositionList;

  void __set_mapping(const std::map<int64_t, std::string> & val) {
    mapping = val;
  }

  void __set_unfoundPositionList(const std::vector<int64_t> & val) {
    unfoundPositionList = val;
  }

  bool operator == (const PositionsToUris & rhs) const
  {
    if (!(mapping == rhs.mapping))
      return false;
    if (!(unfoundPositionList == rhs.unfoundPositionList))
      return false;
    return true;
  }
  bool operator != (const PositionsToUris &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PositionsToUris & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PositionsToUris &a, PositionsToUris &b);


class AgeOffRule {
 public:

  static const char* ascii_fingerprint; // = "F3737B4D6EC90156BCF4E24516702365";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x73,0x7B,0x4D,0x6E,0xC9,0x01,0x56,0xBC,0xF4,0xE2,0x45,0x16,0x70,0x23,0x65};

  AgeOffRule() : name(), id(0), retentionDurationSeconds(0), maximumExecutionPeriod(0), application(), user() {
  }

  virtual ~AgeOffRule() throw() {}

  std::string name;
  int64_t id;
  int64_t retentionDurationSeconds;
  int32_t maximumExecutionPeriod;
  std::string application;
  std::string user;
   ::ezbake::base::thrift::DateTime timeStamp;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_retentionDurationSeconds(const int64_t val) {
    retentionDurationSeconds = val;
  }

  void __set_maximumExecutionPeriod(const int32_t val) {
    maximumExecutionPeriod = val;
  }

  void __set_application(const std::string& val) {
    application = val;
  }

  void __set_user(const std::string& val) {
    user = val;
  }

  void __set_timeStamp(const  ::ezbake::base::thrift::DateTime& val) {
    timeStamp = val;
  }

  bool operator == (const AgeOffRule & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(retentionDurationSeconds == rhs.retentionDurationSeconds))
      return false;
    if (!(maximumExecutionPeriod == rhs.maximumExecutionPeriod))
      return false;
    if (!(application == rhs.application))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(timeStamp == rhs.timeStamp))
      return false;
    return true;
  }
  bool operator != (const AgeOffRule &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgeOffRule & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AgeOffRule &a, AgeOffRule &b);

typedef struct _AddDocumentEntry__isset {
  _AddDocumentEntry__isset() : parents(false) {}
  bool parents;
} _AddDocumentEntry__isset;

class AddDocumentEntry {
 public:

  static const char* ascii_fingerprint; // = "7E437D8F13AEF7D028A78C323AF801EC";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x43,0x7D,0x8F,0x13,0xAE,0xF7,0xD0,0x28,0xA7,0x8C,0x32,0x3A,0xF8,0x01,0xEC};

  AddDocumentEntry() : uri() {
  }

  virtual ~AddDocumentEntry() throw() {}

  std::string uri;
  std::set<InheritanceInfo>  parents;

  _AddDocumentEntry__isset __isset;

  void __set_uri(const std::string& val) {
    uri = val;
  }

  void __set_parents(const std::set<InheritanceInfo> & val) {
    parents = val;
    __isset.parents = true;
  }

  bool operator == (const AddDocumentEntry & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (__isset.parents != rhs.__isset.parents)
      return false;
    else if (__isset.parents && !(parents == rhs.parents))
      return false;
    return true;
  }
  bool operator != (const AddDocumentEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddDocumentEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddDocumentEntry &a, AddDocumentEntry &b);

typedef struct _AddDocumentResult__isset {
  _AddDocumentResult__isset() : documentId(false), parentsNotFound(false) {}
  bool documentId;
  bool parentsNotFound;
} _AddDocumentResult__isset;

class AddDocumentResult {
 public:

  static const char* ascii_fingerprint; // = "1904FBB60DDA037950D63897918E2779";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x04,0xFB,0xB6,0x0D,0xDA,0x03,0x79,0x50,0xD6,0x38,0x97,0x91,0x8E,0x27,0x79};

  AddDocumentResult() : status((AddDocumentStatus::type)0), documentId(0) {
  }

  virtual ~AddDocumentResult() throw() {}

  AddDocumentStatus::type status;
  int64_t documentId;
  std::vector<std::string>  parentsNotFound;

  _AddDocumentResult__isset __isset;

  void __set_status(const AddDocumentStatus::type val) {
    status = val;
  }

  void __set_documentId(const int64_t val) {
    documentId = val;
    __isset.documentId = true;
  }

  void __set_parentsNotFound(const std::vector<std::string> & val) {
    parentsNotFound = val;
    __isset.parentsNotFound = true;
  }

  bool operator == (const AddDocumentResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.documentId != rhs.__isset.documentId)
      return false;
    else if (__isset.documentId && !(documentId == rhs.documentId))
      return false;
    if (__isset.parentsNotFound != rhs.__isset.parentsNotFound)
      return false;
    else if (__isset.parentsNotFound && !(parentsNotFound == rhs.parentsNotFound))
      return false;
    return true;
  }
  bool operator != (const AddDocumentResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddDocumentResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddDocumentResult &a, AddDocumentResult &b);

typedef struct _ProvenanceDocumentNotFoundException__isset {
  _ProvenanceDocumentNotFoundException__isset() : message(false) {}
  bool message;
} _ProvenanceDocumentNotFoundException__isset;

class ProvenanceDocumentNotFoundException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceDocumentNotFoundException() : message() {
  }

  virtual ~ProvenanceDocumentNotFoundException() throw() {}

  std::string message;

  _ProvenanceDocumentNotFoundException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceDocumentNotFoundException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceDocumentNotFoundException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceDocumentNotFoundException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceDocumentNotFoundException &a, ProvenanceDocumentNotFoundException &b);

typedef struct _ProvenanceParentDocumentNotFoundException__isset {
  _ProvenanceParentDocumentNotFoundException__isset() : message(false), parentUris(false) {}
  bool message;
  bool parentUris;
} _ProvenanceParentDocumentNotFoundException__isset;

class ProvenanceParentDocumentNotFoundException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

  ProvenanceParentDocumentNotFoundException() : message() {
  }

  virtual ~ProvenanceParentDocumentNotFoundException() throw() {}

  std::string message;
  std::vector<std::string>  parentUris;

  _ProvenanceParentDocumentNotFoundException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  void __set_parentUris(const std::vector<std::string> & val) {
    parentUris = val;
  }

  bool operator == (const ProvenanceParentDocumentNotFoundException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(parentUris == rhs.parentUris))
      return false;
    return true;
  }
  bool operator != (const ProvenanceParentDocumentNotFoundException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceParentDocumentNotFoundException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceParentDocumentNotFoundException &a, ProvenanceParentDocumentNotFoundException &b);

typedef struct _ProvenanceAgeOffRuleNameExistsException__isset {
  _ProvenanceAgeOffRuleNameExistsException__isset() : message(false) {}
  bool message;
} _ProvenanceAgeOffRuleNameExistsException__isset;

class ProvenanceAgeOffRuleNameExistsException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceAgeOffRuleNameExistsException() : message() {
  }

  virtual ~ProvenanceAgeOffRuleNameExistsException() throw() {}

  std::string message;

  _ProvenanceAgeOffRuleNameExistsException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceAgeOffRuleNameExistsException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceAgeOffRuleNameExistsException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceAgeOffRuleNameExistsException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceAgeOffRuleNameExistsException &a, ProvenanceAgeOffRuleNameExistsException &b);

typedef struct _ProvenanceIllegalAgeOffDurationSecondsException__isset {
  _ProvenanceIllegalAgeOffDurationSecondsException__isset() : message(false) {}
  bool message;
} _ProvenanceIllegalAgeOffDurationSecondsException__isset;

class ProvenanceIllegalAgeOffDurationSecondsException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceIllegalAgeOffDurationSecondsException() : message() {
  }

  virtual ~ProvenanceIllegalAgeOffDurationSecondsException() throw() {}

  std::string message;

  _ProvenanceIllegalAgeOffDurationSecondsException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceIllegalAgeOffDurationSecondsException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceIllegalAgeOffDurationSecondsException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceIllegalAgeOffDurationSecondsException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceIllegalAgeOffDurationSecondsException &a, ProvenanceIllegalAgeOffDurationSecondsException &b);

typedef struct _ProvenanceIllegalAgeOffRuleNameException__isset {
  _ProvenanceIllegalAgeOffRuleNameException__isset() : message(false) {}
  bool message;
} _ProvenanceIllegalAgeOffRuleNameException__isset;

class ProvenanceIllegalAgeOffRuleNameException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceIllegalAgeOffRuleNameException() : message() {
  }

  virtual ~ProvenanceIllegalAgeOffRuleNameException() throw() {}

  std::string message;

  _ProvenanceIllegalAgeOffRuleNameException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceIllegalAgeOffRuleNameException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceIllegalAgeOffRuleNameException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceIllegalAgeOffRuleNameException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceIllegalAgeOffRuleNameException &a, ProvenanceIllegalAgeOffRuleNameException &b);

typedef struct _ProvenanceIllegalMaximumExecutionPeriodException__isset {
  _ProvenanceIllegalMaximumExecutionPeriodException__isset() : message(false) {}
  bool message;
} _ProvenanceIllegalMaximumExecutionPeriodException__isset;

class ProvenanceIllegalMaximumExecutionPeriodException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceIllegalMaximumExecutionPeriodException() : message() {
  }

  virtual ~ProvenanceIllegalMaximumExecutionPeriodException() throw() {}

  std::string message;

  _ProvenanceIllegalMaximumExecutionPeriodException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceIllegalMaximumExecutionPeriodException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceIllegalMaximumExecutionPeriodException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceIllegalMaximumExecutionPeriodException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceIllegalMaximumExecutionPeriodException &a, ProvenanceIllegalMaximumExecutionPeriodException &b);

typedef struct _ProvenanceAgeOffRuleNotFoundException__isset {
  _ProvenanceAgeOffRuleNotFoundException__isset() : message(false) {}
  bool message;
} _ProvenanceAgeOffRuleNotFoundException__isset;

class ProvenanceAgeOffRuleNotFoundException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceAgeOffRuleNotFoundException() : message() {
  }

  virtual ~ProvenanceAgeOffRuleNotFoundException() throw() {}

  std::string message;

  _ProvenanceAgeOffRuleNotFoundException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceAgeOffRuleNotFoundException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceAgeOffRuleNotFoundException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceAgeOffRuleNotFoundException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceAgeOffRuleNotFoundException &a, ProvenanceAgeOffRuleNotFoundException &b);

typedef struct _ProvenanceDocumentExistsException__isset {
  _ProvenanceDocumentExistsException__isset() : message(false) {}
  bool message;
} _ProvenanceDocumentExistsException__isset;

class ProvenanceDocumentExistsException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceDocumentExistsException() : message() {
  }

  virtual ~ProvenanceDocumentExistsException() throw() {}

  std::string message;

  _ProvenanceDocumentExistsException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceDocumentExistsException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceDocumentExistsException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceDocumentExistsException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceDocumentExistsException &a, ProvenanceDocumentExistsException &b);

typedef struct _ProvenanceCircularInheritanceNotAllowedException__isset {
  _ProvenanceCircularInheritanceNotAllowedException__isset() : message(false) {}
  bool message;
} _ProvenanceCircularInheritanceNotAllowedException__isset;

class ProvenanceCircularInheritanceNotAllowedException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceCircularInheritanceNotAllowedException() : message() {
  }

  virtual ~ProvenanceCircularInheritanceNotAllowedException() throw() {}

  std::string message;

  _ProvenanceCircularInheritanceNotAllowedException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceCircularInheritanceNotAllowedException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceCircularInheritanceNotAllowedException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceCircularInheritanceNotAllowedException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceCircularInheritanceNotAllowedException &a, ProvenanceCircularInheritanceNotAllowedException &b);

typedef struct _ProvenancePurgeIdNotFoundException__isset {
  _ProvenancePurgeIdNotFoundException__isset() : message(false) {}
  bool message;
} _ProvenancePurgeIdNotFoundException__isset;

class ProvenancePurgeIdNotFoundException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenancePurgeIdNotFoundException() : message() {
  }

  virtual ~ProvenancePurgeIdNotFoundException() throw() {}

  std::string message;

  _ProvenancePurgeIdNotFoundException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenancePurgeIdNotFoundException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenancePurgeIdNotFoundException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenancePurgeIdNotFoundException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenancePurgeIdNotFoundException &a, ProvenancePurgeIdNotFoundException &b);

typedef struct _ProvenanceAgeOffExistsException__isset {
  _ProvenanceAgeOffExistsException__isset() : message(false) {}
  bool message;
} _ProvenanceAgeOffExistsException__isset;

class ProvenanceAgeOffExistsException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceAgeOffExistsException() : message() {
  }

  virtual ~ProvenanceAgeOffExistsException() throw() {}

  std::string message;

  _ProvenanceAgeOffExistsException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceAgeOffExistsException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceAgeOffExistsException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceAgeOffExistsException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceAgeOffExistsException &a, ProvenanceAgeOffExistsException &b);

typedef struct _ProvenanceAgeOffInheritanceExistsException__isset {
  _ProvenanceAgeOffInheritanceExistsException__isset() : message(false) {}
  bool message;
} _ProvenanceAgeOffInheritanceExistsException__isset;

class ProvenanceAgeOffInheritanceExistsException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceAgeOffInheritanceExistsException() : message() {
  }

  virtual ~ProvenanceAgeOffInheritanceExistsException() throw() {}

  std::string message;

  _ProvenanceAgeOffInheritanceExistsException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceAgeOffInheritanceExistsException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceAgeOffInheritanceExistsException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceAgeOffInheritanceExistsException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceAgeOffInheritanceExistsException &a, ProvenanceAgeOffInheritanceExistsException &b);

typedef struct _ProvenanceDocumentNotInPurgeException__isset {
  _ProvenanceDocumentNotInPurgeException__isset() : message(false) {}
  bool message;
} _ProvenanceDocumentNotInPurgeException__isset;

class ProvenanceDocumentNotInPurgeException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceDocumentNotInPurgeException() : message() {
  }

  virtual ~ProvenanceDocumentNotInPurgeException() throw() {}

  std::string message;

  _ProvenanceDocumentNotInPurgeException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceDocumentNotInPurgeException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceDocumentNotInPurgeException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceDocumentNotInPurgeException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceDocumentNotInPurgeException &a, ProvenanceDocumentNotInPurgeException &b);

typedef struct _ProvenanceAlreadyAgedException__isset {
  _ProvenanceAlreadyAgedException__isset() : message(false) {}
  bool message;
} _ProvenanceAlreadyAgedException__isset;

class ProvenanceAlreadyAgedException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceAlreadyAgedException() : message() {
  }

  virtual ~ProvenanceAlreadyAgedException() throw() {}

  std::string message;

  _ProvenanceAlreadyAgedException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceAlreadyAgedException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceAlreadyAgedException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceAlreadyAgedException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceAlreadyAgedException &a, ProvenanceAlreadyAgedException &b);

typedef struct _ProvenanceExceedsMaxBatchSizeException__isset {
  _ProvenanceExceedsMaxBatchSizeException__isset() : message(false) {}
  bool message;
} _ProvenanceExceedsMaxBatchSizeException__isset;

class ProvenanceExceedsMaxBatchSizeException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ProvenanceExceedsMaxBatchSizeException() : message() {
  }

  virtual ~ProvenanceExceedsMaxBatchSizeException() throw() {}

  std::string message;

  _ProvenanceExceedsMaxBatchSizeException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ProvenanceExceedsMaxBatchSizeException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ProvenanceExceedsMaxBatchSizeException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvenanceExceedsMaxBatchSizeException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvenanceExceedsMaxBatchSizeException &a, ProvenanceExceedsMaxBatchSizeException &b);



#endif
