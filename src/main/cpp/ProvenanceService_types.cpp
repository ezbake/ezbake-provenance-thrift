/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ProvenanceService_types.h"

#include <algorithm>



int _kAddDocumentStatusValues[] = {
  AddDocumentStatus::SUCCESS,
  AddDocumentStatus::ALREADY_EXISTS,
  AddDocumentStatus::PARENT_NOT_FOUND,
  AddDocumentStatus::CIRCULAR_INHERITANCE_NOT_ALLOWED,
  AddDocumentStatus::UNKNOWN_ERROR
};
const char* _kAddDocumentStatusNames[] = {
  "SUCCESS",
  "ALREADY_EXISTS",
  "PARENT_NOT_FOUND",
  "CIRCULAR_INHERITANCE_NOT_ALLOWED",
  "UNKNOWN_ERROR"
};
const std::map<int, const char*> _AddDocumentStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kAddDocumentStatusValues, _kAddDocumentStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kObjectAccessTypeValues[] = {
  ObjectAccessType::CREATE,
  ObjectAccessType::READ,
  ObjectAccessType::WRITE,
  ObjectAccessType::MANAGE,
  ObjectAccessType::DELETE
};
const char* _kObjectAccessTypeNames[] = {
  "CREATE",
  "READ",
  "WRITE",
  "MANAGE",
  "DELETE"
};
const std::map<int, const char*> _ObjectAccessType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kObjectAccessTypeValues, _kObjectAccessTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* InheritanceInfo::ascii_fingerprint = "2C6AF00F534915CED6A3CB8E51ED4502";
const uint8_t InheritanceInfo::binary_fingerprint[16] = {0x2C,0x6A,0xF0,0x0F,0x53,0x49,0x15,0xCE,0xD6,0xA3,0xCB,0x8E,0x51,0xED,0x45,0x02};

uint32_t InheritanceInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_parentUri = false;
  bool isset_inheritParentAgeOff = false;
  bool isset_trackParentAgeOff = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parentUri);
          isset_parentUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->inheritParentAgeOff);
          isset_inheritParentAgeOff = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->trackParentAgeOff);
          isset_trackParentAgeOff = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ageOffRelevantDateTime.read(iprot);
          this->__isset.ageOffRelevantDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_parentUri)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inheritParentAgeOff)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_trackParentAgeOff)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InheritanceInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("InheritanceInfo");

  xfer += oprot->writeFieldBegin("parentUri", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->parentUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inheritParentAgeOff", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->inheritParentAgeOff);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trackParentAgeOff", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->trackParentAgeOff);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.ageOffRelevantDateTime) {
    xfer += oprot->writeFieldBegin("ageOffRelevantDateTime", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->ageOffRelevantDateTime.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InheritanceInfo &a, InheritanceInfo &b) {
  using ::std::swap;
  swap(a.parentUri, b.parentUri);
  swap(a.inheritParentAgeOff, b.inheritParentAgeOff);
  swap(a.trackParentAgeOff, b.trackParentAgeOff);
  swap(a.ageOffRelevantDateTime, b.ageOffRelevantDateTime);
  swap(a.__isset, b.__isset);
}

const char* AccumuloContinuationPoint::ascii_fingerprint = "70FDE8E2CF7554673E73BFFD9EF87777";
const uint8_t AccumuloContinuationPoint::binary_fingerprint[16] = {0x70,0xFD,0xE8,0xE2,0xCF,0x75,0x54,0x67,0x3E,0x73,0xBF,0xFD,0x9E,0xF8,0x77,0x77};

uint32_t AccumuloContinuationPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_startAtBeginning = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->startAtBeginning);
          isset_startAtBeginning = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rowId);
          this->__isset.rowId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->colFam);
          this->__isset.colFam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->colQual);
          this->__isset.colQual = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_startAtBeginning)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AccumuloContinuationPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AccumuloContinuationPoint");

  xfer += oprot->writeFieldBegin("startAtBeginning", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->startAtBeginning);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rowId) {
    xfer += oprot->writeFieldBegin("rowId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->rowId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.colFam) {
    xfer += oprot->writeFieldBegin("colFam", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->colFam);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.colQual) {
    xfer += oprot->writeFieldBegin("colQual", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->colQual);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AccumuloContinuationPoint &a, AccumuloContinuationPoint &b) {
  using ::std::swap;
  swap(a.startAtBeginning, b.startAtBeginning);
  swap(a.rowId, b.rowId);
  swap(a.colFam, b.colFam);
  swap(a.colQual, b.colQual);
  swap(a.__isset, b.__isset);
}

const char* ResultsAndContinuation::ascii_fingerprint = "C782A14F99A968E51BB8F55B3D4D2076";
const uint8_t ResultsAndContinuation::binary_fingerprint[16] = {0xC7,0x82,0xA1,0x4F,0x99,0xA9,0x68,0xE5,0x1B,0xB8,0xF5,0x5B,0x3D,0x4D,0x20,0x76};

uint32_t ResultsAndContinuation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_results = false;
  bool isset_continuationPoint = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->results.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->results.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->results[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_results = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->continuationPoint.read(iprot);
          isset_continuationPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_results)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_continuationPoint)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ResultsAndContinuation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResultsAndContinuation");

  xfer += oprot->writeFieldBegin("results", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->results.size()));
    std::vector<std::string> ::const_iterator _iter5;
    for (_iter5 = this->results.begin(); _iter5 != this->results.end(); ++_iter5)
    {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationPoint", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->continuationPoint.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResultsAndContinuation &a, ResultsAndContinuation &b) {
  using ::std::swap;
  swap(a.results, b.results);
  swap(a.continuationPoint, b.continuationPoint);
}

const char* AgeOffMapping::ascii_fingerprint = "2E0B4012E347CE32BECAB5B768CF1313";
const uint8_t AgeOffMapping::binary_fingerprint[16] = {0x2E,0x0B,0x40,0x12,0xE3,0x47,0xCE,0x32,0xBE,0xCA,0xB5,0xB7,0x68,0xCF,0x13,0x13};

uint32_t AgeOffMapping::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ruleId = false;
  bool isset_ageOffRelevantDateTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ruleId);
          isset_ruleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ageOffRelevantDateTime.read(iprot);
          isset_ageOffRelevantDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ruleId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ageOffRelevantDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AgeOffMapping::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AgeOffMapping");

  xfer += oprot->writeFieldBegin("ruleId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->ruleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ageOffRelevantDateTime", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ageOffRelevantDateTime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AgeOffMapping &a, AgeOffMapping &b) {
  using ::std::swap;
  swap(a.ruleId, b.ruleId);
  swap(a.ageOffRelevantDateTime, b.ageOffRelevantDateTime);
}

const char* DerivedResult::ascii_fingerprint = "329F97BF882984AD77256F3B975E3227";
const uint8_t DerivedResult::binary_fingerprint[16] = {0x32,0x9F,0x97,0xBF,0x88,0x29,0x84,0xAD,0x77,0x25,0x6F,0x3B,0x97,0x5E,0x32,0x27};

uint32_t DerivedResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_derivedDocs = false;
  bool isset_urisNotFound = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->derivedDocs.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readSetBegin(_etype9, _size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              int64_t _elem11;
              xfer += iprot->readI64(_elem11);
              this->derivedDocs.insert(_elem11);
            }
            xfer += iprot->readSetEnd();
          }
          isset_derivedDocs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->urisNotFound.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->urisNotFound.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->urisNotFound[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          isset_urisNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->immediateChildren.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->immediateChildren.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += iprot->readI64(this->immediateChildren[_i21]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.immediateChildren = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_derivedDocs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_urisNotFound)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DerivedResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DerivedResult");

  xfer += oprot->writeFieldBegin("derivedDocs", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->derivedDocs.size()));
    std::set<int64_t> ::const_iterator _iter22;
    for (_iter22 = this->derivedDocs.begin(); _iter22 != this->derivedDocs.end(); ++_iter22)
    {
      xfer += oprot->writeI64((*_iter22));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("urisNotFound", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->urisNotFound.size()));
    std::vector<std::string> ::const_iterator _iter23;
    for (_iter23 = this->urisNotFound.begin(); _iter23 != this->urisNotFound.end(); ++_iter23)
    {
      xfer += oprot->writeString((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.immediateChildren) {
    xfer += oprot->writeFieldBegin("immediateChildren", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->immediateChildren.size()));
      std::vector<int64_t> ::const_iterator _iter24;
      for (_iter24 = this->immediateChildren.begin(); _iter24 != this->immediateChildren.end(); ++_iter24)
      {
        xfer += oprot->writeI64((*_iter24));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DerivedResult &a, DerivedResult &b) {
  using ::std::swap;
  swap(a.derivedDocs, b.derivedDocs);
  swap(a.urisNotFound, b.urisNotFound);
  swap(a.immediateChildren, b.immediateChildren);
  swap(a.__isset, b.__isset);
}

const char* DocumentAgeOffInfo::ascii_fingerprint = "9AE2DC5E8CAD76C2FC9D50FF7F136582";
const uint8_t DocumentAgeOffInfo::binary_fingerprint[16] = {0x9A,0xE2,0xDC,0x5E,0x8C,0xAD,0x76,0xC2,0xFC,0x9D,0x50,0xFF,0x7F,0x13,0x65,0x82};

uint32_t DocumentAgeOffInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ruleId = false;
  bool isset_ageOffRelevantDateTime = false;
  bool isset_maximumExecutionPeriod = false;
  bool isset_timeStamp = false;
  bool isset_application = false;
  bool isset_user = false;
  bool isset_inherited = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ruleId);
          isset_ruleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ageOffRelevantDateTime.read(iprot);
          isset_ageOffRelevantDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maximumExecutionPeriod);
          isset_maximumExecutionPeriod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timeStamp.read(iprot);
          isset_timeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->application);
          isset_application = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->inherited);
          isset_inherited = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->inheritedFromId);
          this->__isset.inheritedFromId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inheritedFromUri);
          this->__isset.inheritedFromUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ruleId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ageOffRelevantDateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maximumExecutionPeriod)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timeStamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_application)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inherited)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DocumentAgeOffInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DocumentAgeOffInfo");

  xfer += oprot->writeFieldBegin("ruleId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->ruleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ageOffRelevantDateTime", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ageOffRelevantDateTime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maximumExecutionPeriod", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->maximumExecutionPeriod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeStamp", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->timeStamp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("application", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->application);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inherited", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->inherited);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.inheritedFromId) {
    xfer += oprot->writeFieldBegin("inheritedFromId", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->inheritedFromId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inheritedFromUri) {
    xfer += oprot->writeFieldBegin("inheritedFromUri", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->inheritedFromUri);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DocumentAgeOffInfo &a, DocumentAgeOffInfo &b) {
  using ::std::swap;
  swap(a.ruleId, b.ruleId);
  swap(a.ageOffRelevantDateTime, b.ageOffRelevantDateTime);
  swap(a.maximumExecutionPeriod, b.maximumExecutionPeriod);
  swap(a.timeStamp, b.timeStamp);
  swap(a.application, b.application);
  swap(a.user, b.user);
  swap(a.inherited, b.inherited);
  swap(a.inheritedFromId, b.inheritedFromId);
  swap(a.inheritedFromUri, b.inheritedFromUri);
  swap(a.__isset, b.__isset);
}

const char* DocumentInfo::ascii_fingerprint = "896DEB481EB842931F99DCAD63D51FD9";
const uint8_t DocumentInfo::binary_fingerprint[16] = {0x89,0x6D,0xEB,0x48,0x1E,0xB8,0x42,0x93,0x1F,0x99,0xDC,0xAD,0x63,0xD5,0x1F,0xD9};

uint32_t DocumentInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uri = false;
  bool isset_documentId = false;
  bool isset_application = false;
  bool isset_timeStamp = false;
  bool isset_user = false;
  bool isset_parents = false;
  bool isset_children = false;
  bool isset_ageOffInfo = false;
  bool isset_aged = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          isset_uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->documentId);
          isset_documentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->application);
          isset_application = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timeStamp.read(iprot);
          isset_timeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->parents.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->parents.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              {
                this->parents[_i29].clear();
                uint32_t _size30;
                ::apache::thrift::protocol::TType _ktype31;
                ::apache::thrift::protocol::TType _vtype32;
                xfer += iprot->readMapBegin(_ktype31, _vtype32, _size30);
                uint32_t _i34;
                for (_i34 = 0; _i34 < _size30; ++_i34)
                {
                  int64_t _key35;
                  xfer += iprot->readI64(_key35);
                  std::string& _val36 = this->parents[_i29][_key35];
                  xfer += iprot->readString(_val36);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          isset_parents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->children.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->children.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              {
                this->children[_i41].clear();
                uint32_t _size42;
                ::apache::thrift::protocol::TType _ktype43;
                ::apache::thrift::protocol::TType _vtype44;
                xfer += iprot->readMapBegin(_ktype43, _vtype44, _size42);
                uint32_t _i46;
                for (_i46 = 0; _i46 < _size42; ++_i46)
                {
                  int64_t _key47;
                  xfer += iprot->readI64(_key47);
                  std::string& _val48 = this->children[_i41][_key47];
                  xfer += iprot->readString(_val48);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          isset_children = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ageOffInfo.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->ageOffInfo.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += this->ageOffInfo[_i53].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_ageOffInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->aged);
          isset_aged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uri)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_documentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_application)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timeStamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parents)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_children)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ageOffInfo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_aged)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DocumentInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DocumentInfo");

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->documentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("application", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->application);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeStamp", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->timeStamp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parents", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->parents.size()));
    std::vector<std::map<int64_t, std::string> > ::const_iterator _iter54;
    for (_iter54 = this->parents.begin(); _iter54 != this->parents.end(); ++_iter54)
    {
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter54).size()));
        std::map<int64_t, std::string> ::const_iterator _iter55;
        for (_iter55 = (*_iter54).begin(); _iter55 != (*_iter54).end(); ++_iter55)
        {
          xfer += oprot->writeI64(_iter55->first);
          xfer += oprot->writeString(_iter55->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("children", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->children.size()));
    std::vector<std::map<int64_t, std::string> > ::const_iterator _iter56;
    for (_iter56 = this->children.begin(); _iter56 != this->children.end(); ++_iter56)
    {
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter56).size()));
        std::map<int64_t, std::string> ::const_iterator _iter57;
        for (_iter57 = (*_iter56).begin(); _iter57 != (*_iter56).end(); ++_iter57)
        {
          xfer += oprot->writeI64(_iter57->first);
          xfer += oprot->writeString(_iter57->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ageOffInfo", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ageOffInfo.size()));
    std::vector<DocumentAgeOffInfo> ::const_iterator _iter58;
    for (_iter58 = this->ageOffInfo.begin(); _iter58 != this->ageOffInfo.end(); ++_iter58)
    {
      xfer += (*_iter58).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aged", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->aged);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DocumentInfo &a, DocumentInfo &b) {
  using ::std::swap;
  swap(a.uri, b.uri);
  swap(a.documentId, b.documentId);
  swap(a.application, b.application);
  swap(a.timeStamp, b.timeStamp);
  swap(a.user, b.user);
  swap(a.parents, b.parents);
  swap(a.children, b.children);
  swap(a.ageOffInfo, b.ageOffInfo);
  swap(a.aged, b.aged);
}

const char* ConversionResult::ascii_fingerprint = "6E23A63EF18E1680D0E67D4779B17EDE";
const uint8_t ConversionResult::binary_fingerprint[16] = {0x6E,0x23,0xA6,0x3E,0xF1,0x8E,0x16,0x80,0xD0,0xE6,0x7D,0x47,0x79,0xB1,0x7E,0xDE};

uint32_t ConversionResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_convertedUris = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->convertedUris.clear();
            uint32_t _size59;
            ::apache::thrift::protocol::TType _etype62;
            xfer += iprot->readListBegin(_etype62, _size59);
            this->convertedUris.resize(_size59);
            uint32_t _i63;
            for (_i63 = 0; _i63 < _size59; ++_i63)
            {
              xfer += iprot->readI64(this->convertedUris[_i63]);
            }
            xfer += iprot->readListEnd();
          }
          isset_convertedUris = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->urisNotFound.clear();
            uint32_t _size64;
            ::apache::thrift::protocol::TType _etype67;
            xfer += iprot->readListBegin(_etype67, _size64);
            this->urisNotFound.resize(_size64);
            uint32_t _i68;
            for (_i68 = 0; _i68 < _size64; ++_i68)
            {
              xfer += iprot->readString(this->urisNotFound[_i68]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.urisNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->idsNotFound.clear();
            uint32_t _size69;
            ::apache::thrift::protocol::TType _etype72;
            xfer += iprot->readListBegin(_etype72, _size69);
            this->idsNotFound.resize(_size69);
            uint32_t _i73;
            for (_i73 = 0; _i73 < _size69; ++_i73)
            {
              xfer += iprot->readI64(this->idsNotFound[_i73]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.idsNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_convertedUris)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ConversionResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ConversionResult");

  xfer += oprot->writeFieldBegin("convertedUris", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->convertedUris.size()));
    std::vector<int64_t> ::const_iterator _iter74;
    for (_iter74 = this->convertedUris.begin(); _iter74 != this->convertedUris.end(); ++_iter74)
    {
      xfer += oprot->writeI64((*_iter74));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.urisNotFound) {
    xfer += oprot->writeFieldBegin("urisNotFound", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->urisNotFound.size()));
      std::vector<std::string> ::const_iterator _iter75;
      for (_iter75 = this->urisNotFound.begin(); _iter75 != this->urisNotFound.end(); ++_iter75)
      {
        xfer += oprot->writeString((*_iter75));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.idsNotFound) {
    xfer += oprot->writeFieldBegin("idsNotFound", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->idsNotFound.size()));
      std::vector<int64_t> ::const_iterator _iter76;
      for (_iter76 = this->idsNotFound.begin(); _iter76 != this->idsNotFound.end(); ++_iter76)
      {
        xfer += oprot->writeI64((*_iter76));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConversionResult &a, ConversionResult &b) {
  using ::std::swap;
  swap(a.convertedUris, b.convertedUris);
  swap(a.urisNotFound, b.urisNotFound);
  swap(a.idsNotFound, b.idsNotFound);
  swap(a.__isset, b.__isset);
}

const char* AgeOffInitiationResult::ascii_fingerprint = "590531FF1BE8611678B255374F6109EE";
const uint8_t AgeOffInitiationResult::binary_fingerprint[16] = {0x59,0x05,0x31,0xFF,0x1B,0xE8,0x61,0x16,0x78,0xB2,0x55,0x37,0x4F,0x61,0x09,0xEE};

uint32_t AgeOffInitiationResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ageOffId = false;
  bool isset_ageOffDocumentIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ageOffId);
          isset_ageOffId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->ageOffDocumentIds.clear();
            uint32_t _size77;
            ::apache::thrift::protocol::TType _etype80;
            xfer += iprot->readSetBegin(_etype80, _size77);
            uint32_t _i81;
            for (_i81 = 0; _i81 < _size77; ++_i81)
            {
              int64_t _elem82;
              xfer += iprot->readI64(_elem82);
              this->ageOffDocumentIds.insert(_elem82);
            }
            xfer += iprot->readSetEnd();
          }
          isset_ageOffDocumentIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ageOffId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ageOffDocumentIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AgeOffInitiationResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AgeOffInitiationResult");

  xfer += oprot->writeFieldBegin("ageOffId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->ageOffId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ageOffDocumentIds", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->ageOffDocumentIds.size()));
    std::set<int64_t> ::const_iterator _iter83;
    for (_iter83 = this->ageOffDocumentIds.begin(); _iter83 != this->ageOffDocumentIds.end(); ++_iter83)
    {
      xfer += oprot->writeI64((*_iter83));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AgeOffInitiationResult &a, AgeOffInitiationResult &b) {
  using ::std::swap;
  swap(a.ageOffId, b.ageOffId);
  swap(a.ageOffDocumentIds, b.ageOffDocumentIds);
}

const char* PurgeInitiationResult::ascii_fingerprint = "864AD30F493D05F6C5C6C204CDEE9AE8";
const uint8_t PurgeInitiationResult::binary_fingerprint[16] = {0x86,0x4A,0xD3,0x0F,0x49,0x3D,0x05,0xF6,0xC5,0xC6,0xC2,0x04,0xCD,0xEE,0x9A,0xE8};

uint32_t PurgeInitiationResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_toBePurged = false;
  bool isset_urisNotFound = false;
  bool isset_purgeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->toBePurged.clear();
            uint32_t _size84;
            ::apache::thrift::protocol::TType _etype87;
            xfer += iprot->readSetBegin(_etype87, _size84);
            uint32_t _i88;
            for (_i88 = 0; _i88 < _size84; ++_i88)
            {
              int64_t _elem89;
              xfer += iprot->readI64(_elem89);
              this->toBePurged.insert(_elem89);
            }
            xfer += iprot->readSetEnd();
          }
          isset_toBePurged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->urisNotFound.clear();
            uint32_t _size90;
            ::apache::thrift::protocol::TType _etype93;
            xfer += iprot->readListBegin(_etype93, _size90);
            this->urisNotFound.resize(_size90);
            uint32_t _i94;
            for (_i94 = 0; _i94 < _size90; ++_i94)
            {
              xfer += iprot->readString(this->urisNotFound[_i94]);
            }
            xfer += iprot->readListEnd();
          }
          isset_urisNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->purgeId);
          isset_purgeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_toBePurged)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_urisNotFound)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_purgeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PurgeInitiationResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PurgeInitiationResult");

  xfer += oprot->writeFieldBegin("toBePurged", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->toBePurged.size()));
    std::set<int64_t> ::const_iterator _iter95;
    for (_iter95 = this->toBePurged.begin(); _iter95 != this->toBePurged.end(); ++_iter95)
    {
      xfer += oprot->writeI64((*_iter95));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("urisNotFound", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->urisNotFound.size()));
    std::vector<std::string> ::const_iterator _iter96;
    for (_iter96 = this->urisNotFound.begin(); _iter96 != this->urisNotFound.end(); ++_iter96)
    {
      xfer += oprot->writeString((*_iter96));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->purgeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PurgeInitiationResult &a, PurgeInitiationResult &b) {
  using ::std::swap;
  swap(a.toBePurged, b.toBePurged);
  swap(a.urisNotFound, b.urisNotFound);
  swap(a.purgeId, b.purgeId);
}

const char* PurgeInfo::ascii_fingerprint = "C24FC023808E89F7D4D032D895D4B5E3";
const uint8_t PurgeInfo::binary_fingerprint[16] = {0xC2,0x4F,0xC0,0x23,0x80,0x8E,0x89,0xF7,0xD4,0xD0,0x32,0xD8,0x95,0xD4,0xB5,0xE3};

uint32_t PurgeInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_timeStamp = false;
  bool isset_documentUris = false;
  bool isset_documentUrisNotFound = false;
  bool isset_purgeDocumentIds = false;
  bool isset_completelyPurgedDocumentIds = false;
  bool isset_user = false;
  bool isset_resolved = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timeStamp.read(iprot);
          isset_timeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->documentUris.clear();
            uint32_t _size97;
            ::apache::thrift::protocol::TType _etype100;
            xfer += iprot->readListBegin(_etype100, _size97);
            this->documentUris.resize(_size97);
            uint32_t _i101;
            for (_i101 = 0; _i101 < _size97; ++_i101)
            {
              xfer += iprot->readString(this->documentUris[_i101]);
            }
            xfer += iprot->readListEnd();
          }
          isset_documentUris = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->documentUrisNotFound.clear();
            uint32_t _size102;
            ::apache::thrift::protocol::TType _etype105;
            xfer += iprot->readListBegin(_etype105, _size102);
            this->documentUrisNotFound.resize(_size102);
            uint32_t _i106;
            for (_i106 = 0; _i106 < _size102; ++_i106)
            {
              xfer += iprot->readString(this->documentUrisNotFound[_i106]);
            }
            xfer += iprot->readListEnd();
          }
          isset_documentUrisNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->purgeDocumentIds.clear();
            uint32_t _size107;
            ::apache::thrift::protocol::TType _etype110;
            xfer += iprot->readSetBegin(_etype110, _size107);
            uint32_t _i111;
            for (_i111 = 0; _i111 < _size107; ++_i111)
            {
              int64_t _elem112;
              xfer += iprot->readI64(_elem112);
              this->purgeDocumentIds.insert(_elem112);
            }
            xfer += iprot->readSetEnd();
          }
          isset_purgeDocumentIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->completelyPurgedDocumentIds.clear();
            uint32_t _size113;
            ::apache::thrift::protocol::TType _etype116;
            xfer += iprot->readSetBegin(_etype116, _size113);
            uint32_t _i117;
            for (_i117 = 0; _i117 < _size113; ++_i117)
            {
              int64_t _elem118;
              xfer += iprot->readI64(_elem118);
              this->completelyPurgedDocumentIds.insert(_elem118);
            }
            xfer += iprot->readSetEnd();
          }
          isset_completelyPurgedDocumentIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->resolved);
          isset_resolved = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timeStamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_documentUris)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_documentUrisNotFound)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_purgeDocumentIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_completelyPurgedDocumentIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_resolved)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PurgeInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PurgeInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeStamp", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->timeStamp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUris", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->documentUris.size()));
    std::vector<std::string> ::const_iterator _iter119;
    for (_iter119 = this->documentUris.begin(); _iter119 != this->documentUris.end(); ++_iter119)
    {
      xfer += oprot->writeString((*_iter119));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUrisNotFound", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->documentUrisNotFound.size()));
    std::vector<std::string> ::const_iterator _iter120;
    for (_iter120 = this->documentUrisNotFound.begin(); _iter120 != this->documentUrisNotFound.end(); ++_iter120)
    {
      xfer += oprot->writeString((*_iter120));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeDocumentIds", ::apache::thrift::protocol::T_SET, 5);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->purgeDocumentIds.size()));
    std::set<int64_t> ::const_iterator _iter121;
    for (_iter121 = this->purgeDocumentIds.begin(); _iter121 != this->purgeDocumentIds.end(); ++_iter121)
    {
      xfer += oprot->writeI64((*_iter121));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("completelyPurgedDocumentIds", ::apache::thrift::protocol::T_SET, 6);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->completelyPurgedDocumentIds.size()));
    std::set<int64_t> ::const_iterator _iter122;
    for (_iter122 = this->completelyPurgedDocumentIds.begin(); _iter122 != this->completelyPurgedDocumentIds.end(); ++_iter122)
    {
      xfer += oprot->writeI64((*_iter122));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("resolved", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->resolved);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PurgeInfo &a, PurgeInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.timeStamp, b.timeStamp);
  swap(a.documentUris, b.documentUris);
  swap(a.documentUrisNotFound, b.documentUrisNotFound);
  swap(a.purgeDocumentIds, b.purgeDocumentIds);
  swap(a.completelyPurgedDocumentIds, b.completelyPurgedDocumentIds);
  swap(a.user, b.user);
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.resolved, b.resolved);
  swap(a.__isset, b.__isset);
}

const char* PositionsToUris::ascii_fingerprint = "4BB914762921D4E8002CAA52FBD65029";
const uint8_t PositionsToUris::binary_fingerprint[16] = {0x4B,0xB9,0x14,0x76,0x29,0x21,0xD4,0xE8,0x00,0x2C,0xAA,0x52,0xFB,0xD6,0x50,0x29};

uint32_t PositionsToUris::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_mapping = false;
  bool isset_unfoundPositionList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->mapping.clear();
            uint32_t _size123;
            ::apache::thrift::protocol::TType _ktype124;
            ::apache::thrift::protocol::TType _vtype125;
            xfer += iprot->readMapBegin(_ktype124, _vtype125, _size123);
            uint32_t _i127;
            for (_i127 = 0; _i127 < _size123; ++_i127)
            {
              int64_t _key128;
              xfer += iprot->readI64(_key128);
              std::string& _val129 = this->mapping[_key128];
              xfer += iprot->readString(_val129);
            }
            xfer += iprot->readMapEnd();
          }
          isset_mapping = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->unfoundPositionList.clear();
            uint32_t _size130;
            ::apache::thrift::protocol::TType _etype133;
            xfer += iprot->readListBegin(_etype133, _size130);
            this->unfoundPositionList.resize(_size130);
            uint32_t _i134;
            for (_i134 = 0; _i134 < _size130; ++_i134)
            {
              xfer += iprot->readI64(this->unfoundPositionList[_i134]);
            }
            xfer += iprot->readListEnd();
          }
          isset_unfoundPositionList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_mapping)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unfoundPositionList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PositionsToUris::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PositionsToUris");

  xfer += oprot->writeFieldBegin("mapping", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->mapping.size()));
    std::map<int64_t, std::string> ::const_iterator _iter135;
    for (_iter135 = this->mapping.begin(); _iter135 != this->mapping.end(); ++_iter135)
    {
      xfer += oprot->writeI64(_iter135->first);
      xfer += oprot->writeString(_iter135->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unfoundPositionList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->unfoundPositionList.size()));
    std::vector<int64_t> ::const_iterator _iter136;
    for (_iter136 = this->unfoundPositionList.begin(); _iter136 != this->unfoundPositionList.end(); ++_iter136)
    {
      xfer += oprot->writeI64((*_iter136));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PositionsToUris &a, PositionsToUris &b) {
  using ::std::swap;
  swap(a.mapping, b.mapping);
  swap(a.unfoundPositionList, b.unfoundPositionList);
}

const char* AgeOffRule::ascii_fingerprint = "F3737B4D6EC90156BCF4E24516702365";
const uint8_t AgeOffRule::binary_fingerprint[16] = {0xF3,0x73,0x7B,0x4D,0x6E,0xC9,0x01,0x56,0xBC,0xF4,0xE2,0x45,0x16,0x70,0x23,0x65};

uint32_t AgeOffRule::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_id = false;
  bool isset_retentionDurationSeconds = false;
  bool isset_maximumExecutionPeriod = false;
  bool isset_application = false;
  bool isset_user = false;
  bool isset_timeStamp = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->retentionDurationSeconds);
          isset_retentionDurationSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maximumExecutionPeriod);
          isset_maximumExecutionPeriod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->application);
          isset_application = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timeStamp.read(iprot);
          isset_timeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_retentionDurationSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maximumExecutionPeriod)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_application)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timeStamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AgeOffRule::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AgeOffRule");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retentionDurationSeconds", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->retentionDurationSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maximumExecutionPeriod", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->maximumExecutionPeriod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("application", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->application);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeStamp", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->timeStamp.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AgeOffRule &a, AgeOffRule &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.id, b.id);
  swap(a.retentionDurationSeconds, b.retentionDurationSeconds);
  swap(a.maximumExecutionPeriod, b.maximumExecutionPeriod);
  swap(a.application, b.application);
  swap(a.user, b.user);
  swap(a.timeStamp, b.timeStamp);
}

const char* AddDocumentEntry::ascii_fingerprint = "7E437D8F13AEF7D028A78C323AF801EC";
const uint8_t AddDocumentEntry::binary_fingerprint[16] = {0x7E,0x43,0x7D,0x8F,0x13,0xAE,0xF7,0xD0,0x28,0xA7,0x8C,0x32,0x3A,0xF8,0x01,0xEC};

uint32_t AddDocumentEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uri = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          isset_uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->parents.clear();
            uint32_t _size137;
            ::apache::thrift::protocol::TType _etype140;
            xfer += iprot->readSetBegin(_etype140, _size137);
            uint32_t _i141;
            for (_i141 = 0; _i141 < _size137; ++_i141)
            {
              InheritanceInfo _elem142;
              xfer += _elem142.read(iprot);
              this->parents.insert(_elem142);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.parents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uri)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddDocumentEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AddDocumentEntry");

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uri);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.parents) {
    xfer += oprot->writeFieldBegin("parents", ::apache::thrift::protocol::T_SET, 2);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->parents.size()));
      std::set<InheritanceInfo> ::const_iterator _iter143;
      for (_iter143 = this->parents.begin(); _iter143 != this->parents.end(); ++_iter143)
      {
        xfer += (*_iter143).write(oprot);
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddDocumentEntry &a, AddDocumentEntry &b) {
  using ::std::swap;
  swap(a.uri, b.uri);
  swap(a.parents, b.parents);
  swap(a.__isset, b.__isset);
}

const char* AddDocumentResult::ascii_fingerprint = "1904FBB60DDA037950D63897918E2779";
const uint8_t AddDocumentResult::binary_fingerprint[16] = {0x19,0x04,0xFB,0xB6,0x0D,0xDA,0x03,0x79,0x50,0xD6,0x38,0x97,0x91,0x8E,0x27,0x79};

uint32_t AddDocumentResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast144;
          xfer += iprot->readI32(ecast144);
          this->status = (AddDocumentStatus::type)ecast144;
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->documentId);
          this->__isset.documentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->parentsNotFound.clear();
            uint32_t _size145;
            ::apache::thrift::protocol::TType _etype148;
            xfer += iprot->readListBegin(_etype148, _size145);
            this->parentsNotFound.resize(_size145);
            uint32_t _i149;
            for (_i149 = 0; _i149 < _size145; ++_i149)
            {
              xfer += iprot->readString(this->parentsNotFound[_i149]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.parentsNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddDocumentResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AddDocumentResult");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.documentId) {
    xfer += oprot->writeFieldBegin("documentId", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->documentId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parentsNotFound) {
    xfer += oprot->writeFieldBegin("parentsNotFound", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parentsNotFound.size()));
      std::vector<std::string> ::const_iterator _iter150;
      for (_iter150 = this->parentsNotFound.begin(); _iter150 != this->parentsNotFound.end(); ++_iter150)
      {
        xfer += oprot->writeString((*_iter150));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddDocumentResult &a, AddDocumentResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.documentId, b.documentId);
  swap(a.parentsNotFound, b.parentsNotFound);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceDocumentNotFoundException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceDocumentNotFoundException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceDocumentNotFoundException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceDocumentNotFoundException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceDocumentNotFoundException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceDocumentNotFoundException &a, ProvenanceDocumentNotFoundException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceParentDocumentNotFoundException::ascii_fingerprint = "25702B8D5E28AA39160F267DABBC8446";
const uint8_t ProvenanceParentDocumentNotFoundException::binary_fingerprint[16] = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

uint32_t ProvenanceParentDocumentNotFoundException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->parentUris.clear();
            uint32_t _size151;
            ::apache::thrift::protocol::TType _etype154;
            xfer += iprot->readListBegin(_etype154, _size151);
            this->parentUris.resize(_size151);
            uint32_t _i155;
            for (_i155 = 0; _i155 < _size151; ++_i155)
            {
              xfer += iprot->readString(this->parentUris[_i155]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.parentUris = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceParentDocumentNotFoundException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceParentDocumentNotFoundException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parentUris", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parentUris.size()));
    std::vector<std::string> ::const_iterator _iter156;
    for (_iter156 = this->parentUris.begin(); _iter156 != this->parentUris.end(); ++_iter156)
    {
      xfer += oprot->writeString((*_iter156));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceParentDocumentNotFoundException &a, ProvenanceParentDocumentNotFoundException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.parentUris, b.parentUris);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceAgeOffRuleNameExistsException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceAgeOffRuleNameExistsException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceAgeOffRuleNameExistsException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceAgeOffRuleNameExistsException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceAgeOffRuleNameExistsException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceAgeOffRuleNameExistsException &a, ProvenanceAgeOffRuleNameExistsException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceIllegalAgeOffDurationSecondsException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceIllegalAgeOffDurationSecondsException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceIllegalAgeOffDurationSecondsException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceIllegalAgeOffDurationSecondsException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceIllegalAgeOffDurationSecondsException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceIllegalAgeOffDurationSecondsException &a, ProvenanceIllegalAgeOffDurationSecondsException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceIllegalAgeOffRuleNameException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceIllegalAgeOffRuleNameException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceIllegalAgeOffRuleNameException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceIllegalAgeOffRuleNameException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceIllegalAgeOffRuleNameException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceIllegalAgeOffRuleNameException &a, ProvenanceIllegalAgeOffRuleNameException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceIllegalMaximumExecutionPeriodException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceIllegalMaximumExecutionPeriodException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceIllegalMaximumExecutionPeriodException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceIllegalMaximumExecutionPeriodException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceIllegalMaximumExecutionPeriodException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceIllegalMaximumExecutionPeriodException &a, ProvenanceIllegalMaximumExecutionPeriodException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceAgeOffRuleNotFoundException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceAgeOffRuleNotFoundException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceAgeOffRuleNotFoundException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceAgeOffRuleNotFoundException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceAgeOffRuleNotFoundException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceAgeOffRuleNotFoundException &a, ProvenanceAgeOffRuleNotFoundException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceDocumentExistsException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceDocumentExistsException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceDocumentExistsException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceDocumentExistsException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceDocumentExistsException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceDocumentExistsException &a, ProvenanceDocumentExistsException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceCircularInheritanceNotAllowedException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceCircularInheritanceNotAllowedException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceCircularInheritanceNotAllowedException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceCircularInheritanceNotAllowedException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceCircularInheritanceNotAllowedException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceCircularInheritanceNotAllowedException &a, ProvenanceCircularInheritanceNotAllowedException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenancePurgeIdNotFoundException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenancePurgeIdNotFoundException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenancePurgeIdNotFoundException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenancePurgeIdNotFoundException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenancePurgeIdNotFoundException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenancePurgeIdNotFoundException &a, ProvenancePurgeIdNotFoundException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceAgeOffExistsException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceAgeOffExistsException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceAgeOffExistsException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceAgeOffExistsException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceAgeOffExistsException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceAgeOffExistsException &a, ProvenanceAgeOffExistsException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceAgeOffInheritanceExistsException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceAgeOffInheritanceExistsException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceAgeOffInheritanceExistsException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceAgeOffInheritanceExistsException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceAgeOffInheritanceExistsException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceAgeOffInheritanceExistsException &a, ProvenanceAgeOffInheritanceExistsException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceDocumentNotInPurgeException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceDocumentNotInPurgeException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceDocumentNotInPurgeException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceDocumentNotInPurgeException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceDocumentNotInPurgeException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceDocumentNotInPurgeException &a, ProvenanceDocumentNotInPurgeException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceAlreadyAgedException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceAlreadyAgedException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceAlreadyAgedException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceAlreadyAgedException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceAlreadyAgedException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceAlreadyAgedException &a, ProvenanceAlreadyAgedException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ProvenanceExceedsMaxBatchSizeException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ProvenanceExceedsMaxBatchSizeException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ProvenanceExceedsMaxBatchSizeException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceExceedsMaxBatchSizeException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceExceedsMaxBatchSizeException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProvenanceExceedsMaxBatchSizeException &a, ProvenanceExceedsMaxBatchSizeException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}


