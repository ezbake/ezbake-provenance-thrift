/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ProvenanceService.h"
#include "thrift/async/TAsyncChannel.h"



uint32_t ProvenanceService_addAgeOffRule_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_name = false;
  bool isset_retentionDurationSeconds = false;
  bool isset_maximumExecutionPeriod = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->retentionDurationSeconds);
          isset_retentionDurationSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maximumExecutionPeriod);
          isset_maximumExecutionPeriod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_retentionDurationSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maximumExecutionPeriod)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_addAgeOffRule_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addAgeOffRule_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retentionDurationSeconds", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->retentionDurationSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maximumExecutionPeriod", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->maximumExecutionPeriod);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addAgeOffRule_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addAgeOffRule_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->name)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retentionDurationSeconds", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64((*(this->retentionDurationSeconds)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maximumExecutionPeriod", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->maximumExecutionPeriod)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addAgeOffRule_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->nameExists.read(iprot);
          this->__isset.nameExists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->illegalAgeOffDurationSeconds.read(iprot);
          this->__isset.illegalAgeOffDurationSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->illegalAgeOffName.read(iprot);
          this->__isset.illegalAgeOffName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->illegalMaxPeriod.read(iprot);
          this->__isset.illegalMaxPeriod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_addAgeOffRule_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_addAgeOffRule_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.nameExists) {
    xfer += oprot->writeFieldBegin("nameExists", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->nameExists.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.illegalAgeOffDurationSeconds) {
    xfer += oprot->writeFieldBegin("illegalAgeOffDurationSeconds", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->illegalAgeOffDurationSeconds.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.illegalAgeOffName) {
    xfer += oprot->writeFieldBegin("illegalAgeOffName", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->illegalAgeOffName.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.illegalMaxPeriod) {
    xfer += oprot->writeFieldBegin("illegalMaxPeriod", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->illegalMaxPeriod.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addAgeOffRule_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->nameExists.read(iprot);
          this->__isset.nameExists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->illegalAgeOffDurationSeconds.read(iprot);
          this->__isset.illegalAgeOffDurationSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->illegalAgeOffName.read(iprot);
          this->__isset.illegalAgeOffName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->illegalMaxPeriod.read(iprot);
          this->__isset.illegalMaxPeriod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_addAgeOffRule_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addAgeOffRule_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
  xfer += oprot->writeI64((*(this->success)));
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nameExists) {
    xfer += oprot->writeFieldBegin("nameExists", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->nameExists.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.illegalAgeOffDurationSeconds) {
    xfer += oprot->writeFieldBegin("illegalAgeOffDurationSeconds", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->illegalAgeOffDurationSeconds.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.illegalAgeOffName) {
    xfer += oprot->writeFieldBegin("illegalAgeOffName", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->illegalAgeOffName.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.illegalMaxPeriod) {
    xfer += oprot->writeFieldBegin("illegalMaxPeriod", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->illegalMaxPeriod.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAgeOffRuleById_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_ruleId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ruleId);
          isset_ruleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ruleId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_getAgeOffRuleById_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAgeOffRuleById_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ruleId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->ruleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAgeOffRuleById_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAgeOffRuleById_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ruleId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->ruleId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAgeOffRuleById_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getAgeOffRuleById_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_getAgeOffRuleById_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAgeOffRuleById_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getAgeOffRuleById_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAgeOffRuleById_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAgeOffRule_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_getAgeOffRule_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAgeOffRule_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAgeOffRule_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAgeOffRule_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->name)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAgeOffRule_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getAgeOffRule_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_getAgeOffRule_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAgeOffRule_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getAgeOffRule_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAgeOffRule_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_updateAgeOffRule_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_name = false;
  bool isset_retentionDurationSeconds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->retentionDurationSeconds);
          isset_retentionDurationSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_retentionDurationSeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_updateAgeOffRule_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_updateAgeOffRule_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retentionDurationSeconds", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->retentionDurationSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_updateAgeOffRule_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_updateAgeOffRule_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->name)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retentionDurationSeconds", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64((*(this->retentionDurationSeconds)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_updateAgeOffRule_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->illegalAgeOffDurationSeconds.read(iprot);
          this->__isset.illegalAgeOffDurationSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->illegalAgeOffName.read(iprot);
          this->__isset.illegalAgeOffName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_updateAgeOffRule_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_updateAgeOffRule_result");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.illegalAgeOffDurationSeconds) {
    xfer += oprot->writeFieldBegin("illegalAgeOffDurationSeconds", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->illegalAgeOffDurationSeconds.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.illegalAgeOffName) {
    xfer += oprot->writeFieldBegin("illegalAgeOffName", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->illegalAgeOffName.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_updateAgeOffRule_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->illegalAgeOffDurationSeconds.read(iprot);
          this->__isset.illegalAgeOffDurationSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->illegalAgeOffName.read(iprot);
          this->__isset.illegalAgeOffName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_updateAgeOffRule_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_updateAgeOffRule_presult");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.illegalAgeOffDurationSeconds) {
    xfer += oprot->writeFieldBegin("illegalAgeOffDurationSeconds", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->illegalAgeOffDurationSeconds.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.illegalAgeOffName) {
    xfer += oprot->writeFieldBegin("illegalAgeOffName", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->illegalAgeOffName.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAllAgeOffRules_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->page);
          this->__isset.page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_getAllAgeOffRules_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAllAgeOffRules_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->page);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAllAgeOffRules_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAllAgeOffRules_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->limit)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->page)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAllAgeOffRules_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size157;
            ::apache::thrift::protocol::TType _etype160;
            xfer += iprot->readListBegin(_etype160, _size157);
            this->success.resize(_size157);
            uint32_t _i161;
            for (_i161 = 0; _i161 < _size157; ++_i161)
            {
              xfer += this->success[_i161].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getAllAgeOffRules_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_getAllAgeOffRules_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
      std::vector<AgeOffRule> ::const_iterator _iter162;
      for (_iter162 = this->success.begin(); _iter162 != this->success.end(); ++_iter162)
      {
        xfer += (*_iter162).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAllAgeOffRules_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size163;
            ::apache::thrift::protocol::TType _etype166;
            xfer += iprot->readListBegin(_etype166, _size163);
            (*(this->success)).resize(_size163);
            uint32_t _i167;
            for (_i167 = 0; _i167 < _size163; ++_i167)
            {
              xfer += (*(this->success))[_i167].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getAllAgeOffRules_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAllAgeOffRules_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->success)).size()));
    std::vector<AgeOffRule> ::const_iterator _iter168;
    for (_iter168 = (*(this->success)).begin(); _iter168 != (*(this->success)).end(); ++_iter168)
    {
      xfer += (*_iter168).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_countAgeOffRules_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_countAgeOffRules_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_countAgeOffRules_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_countAgeOffRules_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_countAgeOffRules_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_countAgeOffRules_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_countAgeOffRules_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_countAgeOffRules_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_countAgeOffRules_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_countAgeOffRules_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_countAgeOffRules_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
  xfer += oprot->writeI32((*(this->success)));
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocument_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_token = false;
  bool isset_uri = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->token.read(iprot);
          isset_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          isset_uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->parents.clear();
            uint32_t _size169;
            ::apache::thrift::protocol::TType _etype172;
            xfer += iprot->readListBegin(_etype172, _size169);
            this->parents.resize(_size169);
            uint32_t _i173;
            for (_i173 = 0; _i173 < _size169; ++_i173)
            {
              xfer += this->parents[_i173].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.parents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ageOffRules.clear();
            uint32_t _size174;
            ::apache::thrift::protocol::TType _etype177;
            xfer += iprot->readListBegin(_etype177, _size174);
            this->ageOffRules.resize(_size174);
            uint32_t _i178;
            for (_i178 = 0; _i178 < _size174; ++_i178)
            {
              xfer += this->ageOffRules[_i178].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ageOffRules = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_token)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_uri)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_addDocument_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addDocument_args");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->token.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->uri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parents", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->parents.size()));
    std::vector<InheritanceInfo> ::const_iterator _iter179;
    for (_iter179 = this->parents.begin(); _iter179 != this->parents.end(); ++_iter179)
    {
      xfer += (*_iter179).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ageOffRules", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ageOffRules.size()));
    std::vector<AgeOffMapping> ::const_iterator _iter180;
    for (_iter180 = this->ageOffRules.begin(); _iter180 != this->ageOffRules.end(); ++_iter180)
    {
      xfer += (*_iter180).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocument_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addDocument_pargs");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->token)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->uri)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parents", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->parents)).size()));
    std::vector<InheritanceInfo> ::const_iterator _iter181;
    for (_iter181 = (*(this->parents)).begin(); _iter181 != (*(this->parents)).end(); ++_iter181)
    {
      xfer += (*_iter181).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ageOffRules", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->ageOffRules)).size()));
    std::vector<AgeOffMapping> ::const_iterator _iter182;
    for (_iter182 = (*(this->ageOffRules)).begin(); _iter182 != (*(this->ageOffRules)).end(); ++_iter182)
    {
      xfer += (*_iter182).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocument_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentExists.read(iprot);
          this->__isset.documentExists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parentNotFound.read(iprot);
          this->__isset.parentNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->circularInheritanceNotAllowed.read(iprot);
          this->__isset.circularInheritanceNotAllowed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_addDocument_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_addDocument_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.documentExists) {
    xfer += oprot->writeFieldBegin("documentExists", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->documentExists.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.parentNotFound) {
    xfer += oprot->writeFieldBegin("parentNotFound", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->parentNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.circularInheritanceNotAllowed) {
    xfer += oprot->writeFieldBegin("circularInheritanceNotAllowed", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->circularInheritanceNotAllowed.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocument_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentExists.read(iprot);
          this->__isset.documentExists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parentNotFound.read(iprot);
          this->__isset.parentNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->circularInheritanceNotAllowed.read(iprot);
          this->__isset.circularInheritanceNotAllowed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_addDocument_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addDocument_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
  xfer += oprot->writeI64((*(this->success)));
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.documentExists) {
    xfer += oprot->writeFieldBegin("documentExists", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->documentExists.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parentNotFound) {
    xfer += oprot->writeFieldBegin("parentNotFound", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->parentNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.circularInheritanceNotAllowed) {
    xfer += oprot->writeFieldBegin("circularInheritanceNotAllowed", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->circularInheritanceNotAllowed.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocuments_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_documents = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->documents.clear();
            uint32_t _size183;
            ::apache::thrift::protocol::TType _etype186;
            xfer += iprot->readSetBegin(_etype186, _size183);
            uint32_t _i187;
            for (_i187 = 0; _i187 < _size183; ++_i187)
            {
              AddDocumentEntry _elem188;
              xfer += _elem188.read(iprot);
              this->documents.insert(_elem188);
            }
            xfer += iprot->readSetEnd();
          }
          isset_documents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->ageOffRules.clear();
            uint32_t _size189;
            ::apache::thrift::protocol::TType _etype192;
            xfer += iprot->readSetBegin(_etype192, _size189);
            uint32_t _i193;
            for (_i193 = 0; _i193 < _size189; ++_i193)
            {
              AgeOffMapping _elem194;
              xfer += _elem194.read(iprot);
              this->ageOffRules.insert(_elem194);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.ageOffRules = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_documents)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_addDocuments_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addDocuments_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documents", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->documents.size()));
    std::set<AddDocumentEntry> ::const_iterator _iter195;
    for (_iter195 = this->documents.begin(); _iter195 != this->documents.end(); ++_iter195)
    {
      xfer += (*_iter195).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ageOffRules", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ageOffRules.size()));
    std::set<AgeOffMapping> ::const_iterator _iter196;
    for (_iter196 = this->ageOffRules.begin(); _iter196 != this->ageOffRules.end(); ++_iter196)
    {
      xfer += (*_iter196).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocuments_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addDocuments_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documents", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->documents)).size()));
    std::set<AddDocumentEntry> ::const_iterator _iter197;
    for (_iter197 = (*(this->documents)).begin(); _iter197 != (*(this->documents)).end(); ++_iter197)
    {
      xfer += (*_iter197).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ageOffRules", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->ageOffRules)).size()));
    std::set<AgeOffMapping> ::const_iterator _iter198;
    for (_iter198 = (*(this->ageOffRules)).begin(); _iter198 != (*(this->ageOffRules)).end(); ++_iter198)
    {
      xfer += (*_iter198).write(oprot);
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocuments_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->success.clear();
            uint32_t _size199;
            ::apache::thrift::protocol::TType _ktype200;
            ::apache::thrift::protocol::TType _vtype201;
            xfer += iprot->readMapBegin(_ktype200, _vtype201, _size199);
            uint32_t _i203;
            for (_i203 = 0; _i203 < _size199; ++_i203)
            {
              std::string _key204;
              xfer += iprot->readString(_key204);
              AddDocumentResult& _val205 = this->success[_key204];
              xfer += _val205.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->exceedsMaxSize.read(iprot);
          this->__isset.exceedsMaxSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_addDocuments_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_addDocuments_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
      std::map<std::string, AddDocumentResult> ::const_iterator _iter206;
      for (_iter206 = this->success.begin(); _iter206 != this->success.end(); ++_iter206)
      {
        xfer += oprot->writeString(_iter206->first);
        xfer += _iter206->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.exceedsMaxSize) {
    xfer += oprot->writeFieldBegin("exceedsMaxSize", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->exceedsMaxSize.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocuments_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            (*(this->success)).clear();
            uint32_t _size207;
            ::apache::thrift::protocol::TType _ktype208;
            ::apache::thrift::protocol::TType _vtype209;
            xfer += iprot->readMapBegin(_ktype208, _vtype209, _size207);
            uint32_t _i211;
            for (_i211 = 0; _i211 < _size207; ++_i211)
            {
              std::string _key212;
              xfer += iprot->readString(_key212);
              AddDocumentResult& _val213 = (*(this->success))[_key212];
              xfer += _val213.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->exceedsMaxSize.read(iprot);
          this->__isset.exceedsMaxSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_addDocuments_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addDocuments_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->success)).size()));
    std::map<std::string, AddDocumentResult> ::const_iterator _iter214;
    for (_iter214 = (*(this->success)).begin(); _iter214 != (*(this->success)).end(); ++_iter214)
    {
      xfer += oprot->writeString(_iter214->first);
      xfer += _iter214->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exceedsMaxSize) {
    xfer += oprot->writeFieldBegin("exceedsMaxSize", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->exceedsMaxSize.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAddDocumentsMaxSize_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_getAddDocumentsMaxSize_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAddDocumentsMaxSize_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAddDocumentsMaxSize_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAddDocumentsMaxSize_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAddDocumentsMaxSize_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getAddDocumentsMaxSize_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_getAddDocumentsMaxSize_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAddDocumentsMaxSize_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getAddDocumentsMaxSize_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAddDocumentsMaxSize_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
  xfer += oprot->writeI32((*(this->success)));
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_startAgeOffEvent_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_ruleId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ruleId);
          isset_ruleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->effectiveTime.read(iprot);
          this->__isset.effectiveTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ruleId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_startAgeOffEvent_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_startAgeOffEvent_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ruleId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->ruleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effectiveTime", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->effectiveTime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_startAgeOffEvent_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_startAgeOffEvent_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ruleId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->ruleId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("effectiveTime", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += (*(this->effectiveTime)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_startAgeOffEvent_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_startAgeOffEvent_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_startAgeOffEvent_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_startAgeOffEvent_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_startAgeOffEvent_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_startAgeOffEvent_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_markDocumentAsAged_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_agedDocumentIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->agedDocumentIds.clear();
            uint32_t _size215;
            ::apache::thrift::protocol::TType _etype218;
            xfer += iprot->readSetBegin(_etype218, _size215);
            uint32_t _i219;
            for (_i219 = 0; _i219 < _size215; ++_i219)
            {
              int64_t _elem220;
              xfer += iprot->readI64(_elem220);
              this->agedDocumentIds.insert(_elem220);
            }
            xfer += iprot->readSetEnd();
          }
          isset_agedDocumentIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_agedDocumentIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_markDocumentAsAged_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_markDocumentAsAged_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("agedDocumentIds", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->agedDocumentIds.size()));
    std::set<int64_t> ::const_iterator _iter221;
    for (_iter221 = this->agedDocumentIds.begin(); _iter221 != this->agedDocumentIds.end(); ++_iter221)
    {
      xfer += oprot->writeI64((*_iter221));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_markDocumentAsAged_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_markDocumentAsAged_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("agedDocumentIds", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->agedDocumentIds)).size()));
    std::set<int64_t> ::const_iterator _iter222;
    for (_iter222 = (*(this->agedDocumentIds)).begin(); _iter222 != (*(this->agedDocumentIds)).end(); ++_iter222)
    {
      xfer += oprot->writeI64((*_iter222));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_markDocumentAsAged_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentNotFound.read(iprot);
          this->__isset.documentNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_markDocumentAsAged_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_markDocumentAsAged_result");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.documentNotFound) {
    xfer += oprot->writeFieldBegin("documentNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->documentNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_markDocumentAsAged_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentNotFound.read(iprot);
          this->__isset.documentNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_markDocumentAsAged_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_markDocumentAsAged_presult");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.documentNotFound) {
    xfer += oprot->writeFieldBegin("documentNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->documentNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentInfo_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_getDocumentInfo_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentInfo_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->uri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentInfo_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentInfo_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->uri)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentInfo_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->docNotFound.read(iprot);
          this->__isset.docNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getDocumentInfo_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentInfo_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.docNotFound) {
    xfer += oprot->writeFieldBegin("docNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->docNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentInfo_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->docNotFound.read(iprot);
          this->__isset.docNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getDocumentInfo_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentInfo_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.docNotFound) {
    xfer += oprot->writeFieldBegin("docNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->docNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentAncestors_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_uris = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->uris.clear();
            uint32_t _size223;
            ::apache::thrift::protocol::TType _etype226;
            xfer += iprot->readListBegin(_etype226, _size223);
            this->uris.resize(_size223);
            uint32_t _i227;
            for (_i227 = 0; _i227 < _size223; ++_i227)
            {
              xfer += iprot->readString(this->uris[_i227]);
            }
            xfer += iprot->readListEnd();
          }
          isset_uris = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_uris)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_getDocumentAncestors_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentAncestors_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uris", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->uris.size()));
    std::vector<std::string> ::const_iterator _iter228;
    for (_iter228 = this->uris.begin(); _iter228 != this->uris.end(); ++_iter228)
    {
      xfer += oprot->writeString((*_iter228));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentAncestors_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentAncestors_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uris", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->uris)).size()));
    std::vector<std::string> ::const_iterator _iter229;
    for (_iter229 = (*(this->uris)).begin(); _iter229 != (*(this->uris)).end(); ++_iter229)
    {
      xfer += oprot->writeString((*_iter229));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentAncestors_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getDocumentAncestors_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentAncestors_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentAncestors_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getDocumentAncestors_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentAncestors_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentDescendants_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_uris = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->uris.clear();
            uint32_t _size230;
            ::apache::thrift::protocol::TType _etype233;
            xfer += iprot->readListBegin(_etype233, _size230);
            this->uris.resize(_size230);
            uint32_t _i234;
            for (_i234 = 0; _i234 < _size230; ++_i234)
            {
              xfer += iprot->readString(this->uris[_i234]);
            }
            xfer += iprot->readListEnd();
          }
          isset_uris = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_uris)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_getDocumentDescendants_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentDescendants_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uris", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->uris.size()));
    std::vector<std::string> ::const_iterator _iter235;
    for (_iter235 = this->uris.begin(); _iter235 != this->uris.end(); ++_iter235)
    {
      xfer += oprot->writeString((*_iter235));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentDescendants_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentDescendants_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uris", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->uris)).size()));
    std::vector<std::string> ::const_iterator _iter236;
    for (_iter236 = (*(this->uris)).begin(); _iter236 != (*(this->uris)).end(); ++_iter236)
    {
      xfer += oprot->writeString((*_iter236));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentDescendants_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getDocumentDescendants_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentDescendants_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentDescendants_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getDocumentDescendants_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentDescendants_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_markDocumentForPurge_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_uris = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->uris.clear();
            uint32_t _size237;
            ::apache::thrift::protocol::TType _etype240;
            xfer += iprot->readListBegin(_etype240, _size237);
            this->uris.resize(_size237);
            uint32_t _i241;
            for (_i241 = 0; _i241 < _size237; ++_i241)
            {
              xfer += iprot->readString(this->uris[_i241]);
            }
            xfer += iprot->readListEnd();
          }
          isset_uris = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_uris)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_markDocumentForPurge_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_markDocumentForPurge_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uris", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->uris.size()));
    std::vector<std::string> ::const_iterator _iter242;
    for (_iter242 = this->uris.begin(); _iter242 != this->uris.end(); ++_iter242)
    {
      xfer += oprot->writeString((*_iter242));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_markDocumentForPurge_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_markDocumentForPurge_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uris", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->uris)).size()));
    std::vector<std::string> ::const_iterator _iter243;
    for (_iter243 = (*(this->uris)).begin(); _iter243 != (*(this->uris)).end(); ++_iter243)
    {
      xfer += oprot->writeString((*_iter243));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->name)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString((*(this->description)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_markDocumentForPurge_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_markDocumentForPurge_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_markDocumentForPurge_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_markDocumentForPurge_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_markDocumentForPurge_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_markDocumentForPurge_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentUriFromId_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_positionsList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->positionsList.clear();
            uint32_t _size244;
            ::apache::thrift::protocol::TType _etype247;
            xfer += iprot->readListBegin(_etype247, _size244);
            this->positionsList.resize(_size244);
            uint32_t _i248;
            for (_i248 = 0; _i248 < _size244; ++_i248)
            {
              xfer += iprot->readI64(this->positionsList[_i248]);
            }
            xfer += iprot->readListEnd();
          }
          isset_positionsList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_positionsList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_getDocumentUriFromId_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentUriFromId_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("positionsList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->positionsList.size()));
    std::vector<int64_t> ::const_iterator _iter249;
    for (_iter249 = this->positionsList.begin(); _iter249 != this->positionsList.end(); ++_iter249)
    {
      xfer += oprot->writeI64((*_iter249));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentUriFromId_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentUriFromId_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("positionsList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->positionsList)).size()));
    std::vector<int64_t> ::const_iterator _iter250;
    for (_iter250 = (*(this->positionsList)).begin(); _iter250 != (*(this->positionsList)).end(); ++_iter250)
    {
      xfer += oprot->writeI64((*_iter250));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentUriFromId_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getDocumentUriFromId_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentUriFromId_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentUriFromId_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getDocumentUriFromId_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentUriFromId_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromIds_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_ids = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->ids.clear();
            uint32_t _size251;
            ::apache::thrift::protocol::TType _etype254;
            xfer += iprot->readSetBegin(_etype254, _size251);
            uint32_t _i255;
            for (_i255 = 0; _i255 < _size251; ++_i255)
            {
              int64_t _elem256;
              xfer += iprot->readI64(_elem256);
              this->ids.insert(_elem256);
            }
            xfer += iprot->readSetEnd();
          }
          isset_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ids)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromIds_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentConvertedUrisFromIds_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ids", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->ids.size()));
    std::set<int64_t> ::const_iterator _iter257;
    for (_iter257 = this->ids.begin(); _iter257 != this->ids.end(); ++_iter257)
    {
      xfer += oprot->writeI64((*_iter257));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromIds_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentConvertedUrisFromIds_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ids", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->ids)).size()));
    std::set<int64_t> ::const_iterator _iter258;
    for (_iter258 = (*(this->ids)).begin(); _iter258 != (*(this->ids)).end(); ++_iter258)
    {
      xfer += oprot->writeI64((*_iter258));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromIds_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromIds_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentConvertedUrisFromIds_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromIds_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromIds_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentConvertedUrisFromIds_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromUris_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_uris = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->uris.clear();
            uint32_t _size259;
            ::apache::thrift::protocol::TType _etype262;
            xfer += iprot->readSetBegin(_etype262, _size259);
            uint32_t _i263;
            for (_i263 = 0; _i263 < _size259; ++_i263)
            {
              std::string _elem264;
              xfer += iprot->readString(_elem264);
              this->uris.insert(_elem264);
            }
            xfer += iprot->readSetEnd();
          }
          isset_uris = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_uris)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromUris_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentConvertedUrisFromUris_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uris", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->uris.size()));
    std::set<std::string> ::const_iterator _iter265;
    for (_iter265 = this->uris.begin(); _iter265 != this->uris.end(); ++_iter265)
    {
      xfer += oprot->writeString((*_iter265));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromUris_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentConvertedUrisFromUris_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uris", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->uris)).size()));
    std::set<std::string> ::const_iterator _iter266;
    for (_iter266 = (*(this->uris)).begin(); _iter266 != (*(this->uris)).end(); ++_iter266)
    {
      xfer += oprot->writeString((*_iter266));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromUris_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromUris_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentConvertedUrisFromUris_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromUris_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getDocumentConvertedUrisFromUris_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getDocumentConvertedUrisFromUris_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getPurgeInfo_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_purgeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->purgeId);
          isset_purgeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_purgeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_getPurgeInfo_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getPurgeInfo_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->purgeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getPurgeInfo_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getPurgeInfo_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->purgeId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getPurgeInfo_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->purgeNotFound.read(iprot);
          this->__isset.purgeNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getPurgeInfo_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_getPurgeInfo_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.purgeNotFound) {
    xfer += oprot->writeFieldBegin("purgeNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->purgeNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getPurgeInfo_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->purgeNotFound.read(iprot);
          this->__isset.purgeNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getPurgeInfo_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getPurgeInfo_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.purgeNotFound) {
    xfer += oprot->writeFieldBegin("purgeNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->purgeNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAllPurgeIds_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_getAllPurgeIds_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAllPurgeIds_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAllPurgeIds_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAllPurgeIds_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAllPurgeIds_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size267;
            ::apache::thrift::protocol::TType _etype270;
            xfer += iprot->readListBegin(_etype270, _size267);
            this->success.resize(_size267);
            uint32_t _i271;
            for (_i271 = 0; _i271 < _size267; ++_i271)
            {
              xfer += iprot->readI64(this->success[_i271]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getAllPurgeIds_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_getAllPurgeIds_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
      std::vector<int64_t> ::const_iterator _iter272;
      for (_iter272 = this->success.begin(); _iter272 != this->success.end(); ++_iter272)
      {
        xfer += oprot->writeI64((*_iter272));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_getAllPurgeIds_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size273;
            ::apache::thrift::protocol::TType _etype276;
            xfer += iprot->readListBegin(_etype276, _size273);
            (*(this->success)).resize(_size273);
            uint32_t _i277;
            for (_i277 = 0; _i277 < _size273; ++_i277)
            {
              xfer += iprot->readI64((*(this->success))[_i277]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_getAllPurgeIds_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_getAllPurgeIds_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->success)).size()));
    std::vector<int64_t> ::const_iterator _iter278;
    for (_iter278 = (*(this->success)).begin(); _iter278 != (*(this->success)).end(); ++_iter278)
    {
      xfer += oprot->writeI64((*_iter278));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_updatePurge_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_purgeId = false;
  bool isset_completelyPurged = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->purgeId);
          isset_purgeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->completelyPurged.clear();
            uint32_t _size279;
            ::apache::thrift::protocol::TType _etype282;
            xfer += iprot->readSetBegin(_etype282, _size279);
            uint32_t _i283;
            for (_i283 = 0; _i283 < _size279; ++_i283)
            {
              int64_t _elem284;
              xfer += iprot->readI64(_elem284);
              this->completelyPurged.insert(_elem284);
            }
            xfer += iprot->readSetEnd();
          }
          isset_completelyPurged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->resolved);
          this->__isset.resolved = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_purgeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_completelyPurged)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_updatePurge_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_updatePurge_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->purgeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("completelyPurged", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->completelyPurged.size()));
    std::set<int64_t> ::const_iterator _iter285;
    for (_iter285 = this->completelyPurged.begin(); _iter285 != this->completelyPurged.end(); ++_iter285)
    {
      xfer += oprot->writeI64((*_iter285));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resolved", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->resolved);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_updatePurge_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_updatePurge_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purgeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->purgeId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("completelyPurged", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->completelyPurged)).size()));
    std::set<int64_t> ::const_iterator _iter286;
    for (_iter286 = (*(this->completelyPurged)).begin(); _iter286 != (*(this->completelyPurged)).end(); ++_iter286)
    {
      xfer += oprot->writeI64((*_iter286));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString((*(this->note)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resolved", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool((*(this->resolved)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_updatePurge_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->purgeNotFound.read(iprot);
          this->__isset.purgeNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentNotInPurge.read(iprot);
          this->__isset.documentNotInPurge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_updatePurge_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_updatePurge_result");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.purgeNotFound) {
    xfer += oprot->writeFieldBegin("purgeNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->purgeNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.documentNotInPurge) {
    xfer += oprot->writeFieldBegin("documentNotInPurge", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->documentNotInPurge.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_updatePurge_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->purgeNotFound.read(iprot);
          this->__isset.purgeNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentNotInPurge.read(iprot);
          this->__isset.documentNotInPurge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_updatePurge_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_updatePurge_presult");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.purgeNotFound) {
    xfer += oprot->writeFieldBegin("purgeNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->purgeNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.documentNotInPurge) {
    xfer += oprot->writeFieldBegin("documentNotInPurge", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->documentNotInPurge.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_removeDocumentAgeOffRuleInheritance_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->documentId);
          this->__isset.documentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->documentUri);
          this->__isset.documentUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parentId);
          this->__isset.parentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parentUri);
          this->__isset.parentUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_removeDocumentAgeOffRuleInheritance_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_removeDocumentAgeOffRuleInheritance_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->documentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->documentUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parentId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->parentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parentUri", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->parentUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_removeDocumentAgeOffRuleInheritance_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_removeDocumentAgeOffRuleInheritance_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->documentId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->documentUri)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parentId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64((*(this->parentId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parentUri", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString((*(this->parentUri)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_removeDocumentAgeOffRuleInheritance_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentNotFound.read(iprot);
          this->__isset.documentNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alreadyAged.read(iprot);
          this->__isset.alreadyAged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_removeDocumentAgeOffRuleInheritance_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_removeDocumentAgeOffRuleInheritance_result");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.documentNotFound) {
    xfer += oprot->writeFieldBegin("documentNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->documentNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.alreadyAged) {
    xfer += oprot->writeFieldBegin("alreadyAged", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->alreadyAged.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_removeDocumentAgeOffRuleInheritance_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentNotFound.read(iprot);
          this->__isset.documentNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alreadyAged.read(iprot);
          this->__isset.alreadyAged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_removeDocumentAgeOffRuleInheritance_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_removeDocumentAgeOffRuleInheritance_presult");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.documentNotFound) {
    xfer += oprot->writeFieldBegin("documentNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->documentNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alreadyAged) {
    xfer += oprot->writeFieldBegin("alreadyAged", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->alreadyAged.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_removeDocumentExplicitAgeOffRule_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_ageOffRuleId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->documentId);
          this->__isset.documentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->documentUri);
          this->__isset.documentUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ageOffRuleId);
          isset_ageOffRuleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ageOffRuleId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_removeDocumentExplicitAgeOffRule_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_removeDocumentExplicitAgeOffRule_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->documentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->documentUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ageOffRuleId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->ageOffRuleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_removeDocumentExplicitAgeOffRule_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_removeDocumentExplicitAgeOffRule_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->documentId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->documentUri)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ageOffRuleId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64((*(this->ageOffRuleId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_removeDocumentExplicitAgeOffRule_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentNotFound.read(iprot);
          this->__isset.documentNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alreadyAged.read(iprot);
          this->__isset.alreadyAged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_removeDocumentExplicitAgeOffRule_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_removeDocumentExplicitAgeOffRule_result");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.documentNotFound) {
    xfer += oprot->writeFieldBegin("documentNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->documentNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.alreadyAged) {
    xfer += oprot->writeFieldBegin("alreadyAged", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->alreadyAged.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_removeDocumentExplicitAgeOffRule_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentNotFound.read(iprot);
          this->__isset.documentNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alreadyAged.read(iprot);
          this->__isset.alreadyAged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_removeDocumentExplicitAgeOffRule_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_removeDocumentExplicitAgeOffRule_presult");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.documentNotFound) {
    xfer += oprot->writeFieldBegin("documentNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->documentNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alreadyAged) {
    xfer += oprot->writeFieldBegin("alreadyAged", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->alreadyAged.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocumentExplicitAgeOffRule_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_ageOffMapping = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->documentId);
          this->__isset.documentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->documentUri);
          this->__isset.documentUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ageOffMapping.read(iprot);
          isset_ageOffMapping = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ageOffMapping)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_addDocumentExplicitAgeOffRule_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addDocumentExplicitAgeOffRule_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->documentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->documentUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ageOffMapping", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->ageOffMapping.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocumentExplicitAgeOffRule_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addDocumentExplicitAgeOffRule_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->documentId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->documentUri)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ageOffMapping", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->ageOffMapping)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocumentExplicitAgeOffRule_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentNotFound.read(iprot);
          this->__isset.documentNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alreadyAged.read(iprot);
          this->__isset.alreadyAged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->edgeExists.read(iprot);
          this->__isset.edgeExists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_addDocumentExplicitAgeOffRule_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_addDocumentExplicitAgeOffRule_result");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.documentNotFound) {
    xfer += oprot->writeFieldBegin("documentNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->documentNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.alreadyAged) {
    xfer += oprot->writeFieldBegin("alreadyAged", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->alreadyAged.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.edgeExists) {
    xfer += oprot->writeFieldBegin("edgeExists", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->edgeExists.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocumentExplicitAgeOffRule_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentNotFound.read(iprot);
          this->__isset.documentNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ruleNotFound.read(iprot);
          this->__isset.ruleNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alreadyAged.read(iprot);
          this->__isset.alreadyAged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->edgeExists.read(iprot);
          this->__isset.edgeExists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_addDocumentExplicitAgeOffRule_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addDocumentExplicitAgeOffRule_presult");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.documentNotFound) {
    xfer += oprot->writeFieldBegin("documentNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->documentNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ruleNotFound) {
    xfer += oprot->writeFieldBegin("ruleNotFound", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->ruleNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alreadyAged) {
    xfer += oprot->writeFieldBegin("alreadyAged", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->alreadyAged.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.edgeExists) {
    xfer += oprot->writeFieldBegin("edgeExists", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->edgeExists.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocumentInheritanceInfo_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_inheritanceInfo = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->documentId);
          this->__isset.documentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->documentUri);
          this->__isset.documentUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->inheritanceInfo.read(iprot);
          isset_inheritanceInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inheritanceInfo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_addDocumentInheritanceInfo_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addDocumentInheritanceInfo_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->documentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->documentUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inheritanceInfo", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->inheritanceInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocumentInheritanceInfo_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addDocumentInheritanceInfo_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->documentId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->documentUri)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inheritanceInfo", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->inheritanceInfo)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocumentInheritanceInfo_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentNotFound.read(iprot);
          this->__isset.documentNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->circularInheritance.read(iprot);
          this->__isset.circularInheritance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alreadyAged.read(iprot);
          this->__isset.alreadyAged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->inheritanceExists.read(iprot);
          this->__isset.inheritanceExists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_addDocumentInheritanceInfo_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_addDocumentInheritanceInfo_result");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.documentNotFound) {
    xfer += oprot->writeFieldBegin("documentNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->documentNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.circularInheritance) {
    xfer += oprot->writeFieldBegin("circularInheritance", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->circularInheritance.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.alreadyAged) {
    xfer += oprot->writeFieldBegin("alreadyAged", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->alreadyAged.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.inheritanceExists) {
    xfer += oprot->writeFieldBegin("inheritanceExists", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->inheritanceExists.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_addDocumentInheritanceInfo_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->documentNotFound.read(iprot);
          this->__isset.documentNotFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->circularInheritance.read(iprot);
          this->__isset.circularInheritance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alreadyAged.read(iprot);
          this->__isset.alreadyAged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->inheritanceExists.read(iprot);
          this->__isset.inheritanceExists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_addDocumentInheritanceInfo_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_addDocumentInheritanceInfo_presult");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.documentNotFound) {
    xfer += oprot->writeFieldBegin("documentNotFound", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->documentNotFound.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.circularInheritance) {
    xfer += oprot->writeFieldBegin("circularInheritance", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->circularInheritance.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alreadyAged) {
    xfer += oprot->writeFieldBegin("alreadyAged", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->alreadyAged.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inheritanceExists) {
    xfer += oprot->writeFieldBegin("inheritanceExists", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->inheritanceExists.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_recordObjectAccess_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_securityToken = false;
  bool isset_documentUri = false;
  bool isset_accessType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          isset_securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->documentUri);
          isset_documentUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast287;
          xfer += iprot->readI32(ecast287);
          this->accessType = (ObjectAccessType::type)ecast287;
          isset_accessType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_securityToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_documentUri)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_accessType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProvenanceService_recordObjectAccess_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_recordObjectAccess_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUri", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->documentUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accessType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->accessType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_recordObjectAccess_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_recordObjectAccess_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUri", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->documentUri)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accessType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)(*(this->accessType)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_recordObjectAccess_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_recordObjectAccess_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_recordObjectAccess_result");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_recordObjectAccess_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_recordObjectAccess_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_recordObjectAccess_presult");

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_fetchUsersDocuments_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          this->__isset.securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userPrincipal);
          this->__isset.userPrincipal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->startDateTime.read(iprot);
          this->__isset.startDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stopDateTime.read(iprot);
          this->__isset.stopDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numToFetch);
          this->__isset.numToFetch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->continuationPoint.read(iprot);
          this->__isset.continuationPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_fetchUsersDocuments_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_fetchUsersDocuments_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userPrincipal", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userPrincipal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startDateTime", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->startDateTime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopDateTime", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->stopDateTime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numToFetch", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->numToFetch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationPoint", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->continuationPoint.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_fetchUsersDocuments_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_fetchUsersDocuments_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userPrincipal", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->userPrincipal)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startDateTime", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += (*(this->startDateTime)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopDateTime", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->stopDateTime)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numToFetch", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((*(this->numToFetch)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationPoint", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += (*(this->continuationPoint)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_fetchUsersDocuments_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_fetchUsersDocuments_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_fetchUsersDocuments_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_fetchUsersDocuments_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_fetchUsersDocuments_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_fetchUsersDocuments_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_fetchDocumentUsers_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityToken.read(iprot);
          this->__isset.securityToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->documentUri);
          this->__isset.documentUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->startDateTime.read(iprot);
          this->__isset.startDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stopDateTime.read(iprot);
          this->__isset.stopDateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numToFetch);
          this->__isset.numToFetch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->continuationPoint.read(iprot);
          this->__isset.continuationPoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_fetchDocumentUsers_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_fetchDocumentUsers_args");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->securityToken.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUri", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->documentUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startDateTime", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->startDateTime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopDateTime", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->stopDateTime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numToFetch", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->numToFetch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationPoint", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->continuationPoint.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_fetchDocumentUsers_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_fetchDocumentUsers_pargs");

  xfer += oprot->writeFieldBegin("securityToken", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->securityToken)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("documentUri", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->documentUri)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startDateTime", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += (*(this->startDateTime)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopDateTime", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->stopDateTime)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numToFetch", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((*(this->numToFetch)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationPoint", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += (*(this->continuationPoint)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_fetchDocumentUsers_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_fetchDocumentUsers_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("ProvenanceService_fetchDocumentUsers_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

uint32_t ProvenanceService_fetchDocumentUsers_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->security.read(iprot);
          this->__isset.security = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvenanceService_fetchDocumentUsers_presult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProvenanceService_fetchDocumentUsers_presult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
  xfer += (*(this->success)).write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.security) {
    xfer += oprot->writeFieldBegin("security", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->security.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

int64_t ProvenanceServiceClient::addAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds, const int32_t maximumExecutionPeriod)
{
  send_addAgeOffRule(securityToken, name, retentionDurationSeconds, maximumExecutionPeriod);
  return recv_addAgeOffRule();
}

void ProvenanceServiceClient::send_addAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds, const int32_t maximumExecutionPeriod)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("addAgeOffRule", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_addAgeOffRule_pargs args;
  args.securityToken = &securityToken;
  args.name = &name;
  args.retentionDurationSeconds = &retentionDurationSeconds;
  args.maximumExecutionPeriod = &maximumExecutionPeriod;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int64_t ProvenanceServiceClient::recv_addAgeOffRule()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("addAgeOffRule") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int64_t _return;
  ProvenanceService_addAgeOffRule_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.nameExists) {
    throw result.nameExists;
  }
  if (result.__isset.illegalAgeOffDurationSeconds) {
    throw result.illegalAgeOffDurationSeconds;
  }
  if (result.__isset.illegalAgeOffName) {
    throw result.illegalAgeOffName;
  }
  if (result.__isset.illegalMaxPeriod) {
    throw result.illegalMaxPeriod;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "addAgeOffRule failed: unknown result");
}

void ProvenanceServiceClient::getAgeOffRuleById(AgeOffRule& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId)
{
  send_getAgeOffRuleById(securityToken, ruleId);
  recv_getAgeOffRuleById(_return);
}

void ProvenanceServiceClient::send_getAgeOffRuleById(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getAgeOffRuleById", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getAgeOffRuleById_pargs args;
  args.securityToken = &securityToken;
  args.ruleId = &ruleId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_getAgeOffRuleById(AgeOffRule& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getAgeOffRuleById") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_getAgeOffRuleById_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.ruleNotFound) {
    throw result.ruleNotFound;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAgeOffRuleById failed: unknown result");
}

void ProvenanceServiceClient::getAgeOffRule(AgeOffRule& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name)
{
  send_getAgeOffRule(securityToken, name);
  recv_getAgeOffRule(_return);
}

void ProvenanceServiceClient::send_getAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getAgeOffRule", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getAgeOffRule_pargs args;
  args.securityToken = &securityToken;
  args.name = &name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_getAgeOffRule(AgeOffRule& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getAgeOffRule") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_getAgeOffRule_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.ruleNotFound) {
    throw result.ruleNotFound;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAgeOffRule failed: unknown result");
}

void ProvenanceServiceClient::updateAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds)
{
  send_updateAgeOffRule(securityToken, name, retentionDurationSeconds);
  recv_updateAgeOffRule();
}

void ProvenanceServiceClient::send_updateAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("updateAgeOffRule", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_updateAgeOffRule_pargs args;
  args.securityToken = &securityToken;
  args.name = &name;
  args.retentionDurationSeconds = &retentionDurationSeconds;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_updateAgeOffRule()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("updateAgeOffRule") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_updateAgeOffRule_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.ruleNotFound) {
    throw result.ruleNotFound;
  }
  if (result.__isset.illegalAgeOffDurationSeconds) {
    throw result.illegalAgeOffDurationSeconds;
  }
  if (result.__isset.illegalAgeOffName) {
    throw result.illegalAgeOffName;
  }
  return;
}

void ProvenanceServiceClient::getAllAgeOffRules(std::vector<AgeOffRule> & _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int32_t limit, const int32_t page)
{
  send_getAllAgeOffRules(securityToken, limit, page);
  recv_getAllAgeOffRules(_return);
}

void ProvenanceServiceClient::send_getAllAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int32_t limit, const int32_t page)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getAllAgeOffRules", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getAllAgeOffRules_pargs args;
  args.securityToken = &securityToken;
  args.limit = &limit;
  args.page = &page;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_getAllAgeOffRules(std::vector<AgeOffRule> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getAllAgeOffRules") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_getAllAgeOffRules_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAllAgeOffRules failed: unknown result");
}

int32_t ProvenanceServiceClient::countAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& securityToken)
{
  send_countAgeOffRules(securityToken);
  return recv_countAgeOffRules();
}

void ProvenanceServiceClient::send_countAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& securityToken)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("countAgeOffRules", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_countAgeOffRules_pargs args;
  args.securityToken = &securityToken;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t ProvenanceServiceClient::recv_countAgeOffRules()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("countAgeOffRules") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  ProvenanceService_countAgeOffRules_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "countAgeOffRules failed: unknown result");
}

int64_t ProvenanceServiceClient::addDocument(const  ::ezbake::base::thrift::EzSecurityToken& token, const std::string& uri, const std::vector<InheritanceInfo> & parents, const std::vector<AgeOffMapping> & ageOffRules)
{
  send_addDocument(token, uri, parents, ageOffRules);
  return recv_addDocument();
}

void ProvenanceServiceClient::send_addDocument(const  ::ezbake::base::thrift::EzSecurityToken& token, const std::string& uri, const std::vector<InheritanceInfo> & parents, const std::vector<AgeOffMapping> & ageOffRules)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("addDocument", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_addDocument_pargs args;
  args.token = &token;
  args.uri = &uri;
  args.parents = &parents;
  args.ageOffRules = &ageOffRules;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int64_t ProvenanceServiceClient::recv_addDocument()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("addDocument") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int64_t _return;
  ProvenanceService_addDocument_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.documentExists) {
    throw result.documentExists;
  }
  if (result.__isset.ruleNotFound) {
    throw result.ruleNotFound;
  }
  if (result.__isset.parentNotFound) {
    throw result.parentNotFound;
  }
  if (result.__isset.circularInheritanceNotAllowed) {
    throw result.circularInheritanceNotAllowed;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "addDocument failed: unknown result");
}

void ProvenanceServiceClient::addDocuments(std::map<std::string, AddDocumentResult> & _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<AddDocumentEntry> & documents, const std::set<AgeOffMapping> & ageOffRules)
{
  send_addDocuments(securityToken, documents, ageOffRules);
  recv_addDocuments(_return);
}

void ProvenanceServiceClient::send_addDocuments(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<AddDocumentEntry> & documents, const std::set<AgeOffMapping> & ageOffRules)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("addDocuments", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_addDocuments_pargs args;
  args.securityToken = &securityToken;
  args.documents = &documents;
  args.ageOffRules = &ageOffRules;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_addDocuments(std::map<std::string, AddDocumentResult> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("addDocuments") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_addDocuments_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.ruleNotFound) {
    throw result.ruleNotFound;
  }
  if (result.__isset.exceedsMaxSize) {
    throw result.exceedsMaxSize;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "addDocuments failed: unknown result");
}

int32_t ProvenanceServiceClient::getAddDocumentsMaxSize(const  ::ezbake::base::thrift::EzSecurityToken& securityToken)
{
  send_getAddDocumentsMaxSize(securityToken);
  return recv_getAddDocumentsMaxSize();
}

void ProvenanceServiceClient::send_getAddDocumentsMaxSize(const  ::ezbake::base::thrift::EzSecurityToken& securityToken)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getAddDocumentsMaxSize", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getAddDocumentsMaxSize_pargs args;
  args.securityToken = &securityToken;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t ProvenanceServiceClient::recv_getAddDocumentsMaxSize()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getAddDocumentsMaxSize") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  ProvenanceService_getAddDocumentsMaxSize_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAddDocumentsMaxSize failed: unknown result");
}

void ProvenanceServiceClient::startAgeOffEvent(AgeOffInitiationResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId, const  ::ezbake::base::thrift::DateTime& effectiveTime)
{
  send_startAgeOffEvent(securityToken, ruleId, effectiveTime);
  recv_startAgeOffEvent(_return);
}

void ProvenanceServiceClient::send_startAgeOffEvent(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId, const  ::ezbake::base::thrift::DateTime& effectiveTime)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startAgeOffEvent", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_startAgeOffEvent_pargs args;
  args.securityToken = &securityToken;
  args.ruleId = &ruleId;
  args.effectiveTime = &effectiveTime;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_startAgeOffEvent(AgeOffInitiationResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("startAgeOffEvent") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_startAgeOffEvent_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.ruleNotFound) {
    throw result.ruleNotFound;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "startAgeOffEvent failed: unknown result");
}

void ProvenanceServiceClient::markDocumentAsAged(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & agedDocumentIds)
{
  send_markDocumentAsAged(securityToken, agedDocumentIds);
  recv_markDocumentAsAged();
}

void ProvenanceServiceClient::send_markDocumentAsAged(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & agedDocumentIds)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("markDocumentAsAged", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_markDocumentAsAged_pargs args;
  args.securityToken = &securityToken;
  args.agedDocumentIds = &agedDocumentIds;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_markDocumentAsAged()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("markDocumentAsAged") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_markDocumentAsAged_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.documentNotFound) {
    throw result.documentNotFound;
  }
  return;
}

void ProvenanceServiceClient::getDocumentInfo(DocumentInfo& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t id, const std::string& uri)
{
  send_getDocumentInfo(securityToken, id, uri);
  recv_getDocumentInfo(_return);
}

void ProvenanceServiceClient::send_getDocumentInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t id, const std::string& uri)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getDocumentInfo", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getDocumentInfo_pargs args;
  args.securityToken = &securityToken;
  args.id = &id;
  args.uri = &uri;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_getDocumentInfo(DocumentInfo& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getDocumentInfo") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_getDocumentInfo_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.docNotFound) {
    throw result.docNotFound;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getDocumentInfo failed: unknown result");
}

void ProvenanceServiceClient::getDocumentAncestors(DerivedResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris)
{
  send_getDocumentAncestors(securityToken, uris);
  recv_getDocumentAncestors(_return);
}

void ProvenanceServiceClient::send_getDocumentAncestors(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getDocumentAncestors", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getDocumentAncestors_pargs args;
  args.securityToken = &securityToken;
  args.uris = &uris;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_getDocumentAncestors(DerivedResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getDocumentAncestors") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_getDocumentAncestors_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getDocumentAncestors failed: unknown result");
}

void ProvenanceServiceClient::getDocumentDescendants(DerivedResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris)
{
  send_getDocumentDescendants(securityToken, uris);
  recv_getDocumentDescendants(_return);
}

void ProvenanceServiceClient::send_getDocumentDescendants(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getDocumentDescendants", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getDocumentDescendants_pargs args;
  args.securityToken = &securityToken;
  args.uris = &uris;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_getDocumentDescendants(DerivedResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getDocumentDescendants") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_getDocumentDescendants_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getDocumentDescendants failed: unknown result");
}

void ProvenanceServiceClient::markDocumentForPurge(PurgeInitiationResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris, const std::string& name, const std::string& description)
{
  send_markDocumentForPurge(securityToken, uris, name, description);
  recv_markDocumentForPurge(_return);
}

void ProvenanceServiceClient::send_markDocumentForPurge(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris, const std::string& name, const std::string& description)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("markDocumentForPurge", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_markDocumentForPurge_pargs args;
  args.securityToken = &securityToken;
  args.uris = &uris;
  args.name = &name;
  args.description = &description;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_markDocumentForPurge(PurgeInitiationResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("markDocumentForPurge") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_markDocumentForPurge_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "markDocumentForPurge failed: unknown result");
}

void ProvenanceServiceClient::getDocumentUriFromId(PositionsToUris& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<int64_t> & positionsList)
{
  send_getDocumentUriFromId(securityToken, positionsList);
  recv_getDocumentUriFromId(_return);
}

void ProvenanceServiceClient::send_getDocumentUriFromId(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<int64_t> & positionsList)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getDocumentUriFromId", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getDocumentUriFromId_pargs args;
  args.securityToken = &securityToken;
  args.positionsList = &positionsList;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_getDocumentUriFromId(PositionsToUris& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getDocumentUriFromId") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_getDocumentUriFromId_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getDocumentUriFromId failed: unknown result");
}

void ProvenanceServiceClient::getDocumentConvertedUrisFromIds(ConversionResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & ids)
{
  send_getDocumentConvertedUrisFromIds(securityToken, ids);
  recv_getDocumentConvertedUrisFromIds(_return);
}

void ProvenanceServiceClient::send_getDocumentConvertedUrisFromIds(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & ids)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getDocumentConvertedUrisFromIds", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getDocumentConvertedUrisFromIds_pargs args;
  args.securityToken = &securityToken;
  args.ids = &ids;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_getDocumentConvertedUrisFromIds(ConversionResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getDocumentConvertedUrisFromIds") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_getDocumentConvertedUrisFromIds_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getDocumentConvertedUrisFromIds failed: unknown result");
}

void ProvenanceServiceClient::getDocumentConvertedUrisFromUris(ConversionResult& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<std::string> & uris)
{
  send_getDocumentConvertedUrisFromUris(securityToken, uris);
  recv_getDocumentConvertedUrisFromUris(_return);
}

void ProvenanceServiceClient::send_getDocumentConvertedUrisFromUris(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<std::string> & uris)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getDocumentConvertedUrisFromUris", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getDocumentConvertedUrisFromUris_pargs args;
  args.securityToken = &securityToken;
  args.uris = &uris;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_getDocumentConvertedUrisFromUris(ConversionResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getDocumentConvertedUrisFromUris") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_getDocumentConvertedUrisFromUris_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getDocumentConvertedUrisFromUris failed: unknown result");
}

void ProvenanceServiceClient::getPurgeInfo(PurgeInfo& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId)
{
  send_getPurgeInfo(securityToken, purgeId);
  recv_getPurgeInfo(_return);
}

void ProvenanceServiceClient::send_getPurgeInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getPurgeInfo", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getPurgeInfo_pargs args;
  args.securityToken = &securityToken;
  args.purgeId = &purgeId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_getPurgeInfo(PurgeInfo& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getPurgeInfo") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_getPurgeInfo_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.purgeNotFound) {
    throw result.purgeNotFound;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPurgeInfo failed: unknown result");
}

void ProvenanceServiceClient::getAllPurgeIds(std::vector<int64_t> & _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken)
{
  send_getAllPurgeIds(securityToken);
  recv_getAllPurgeIds(_return);
}

void ProvenanceServiceClient::send_getAllPurgeIds(const  ::ezbake::base::thrift::EzSecurityToken& securityToken)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getAllPurgeIds", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getAllPurgeIds_pargs args;
  args.securityToken = &securityToken;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_getAllPurgeIds(std::vector<int64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getAllPurgeIds") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_getAllPurgeIds_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAllPurgeIds failed: unknown result");
}

void ProvenanceServiceClient::updatePurge(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId, const std::set<int64_t> & completelyPurged, const std::string& note, const bool resolved)
{
  send_updatePurge(securityToken, purgeId, completelyPurged, note, resolved);
  recv_updatePurge();
}

void ProvenanceServiceClient::send_updatePurge(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId, const std::set<int64_t> & completelyPurged, const std::string& note, const bool resolved)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("updatePurge", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_updatePurge_pargs args;
  args.securityToken = &securityToken;
  args.purgeId = &purgeId;
  args.completelyPurged = &completelyPurged;
  args.note = &note;
  args.resolved = &resolved;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_updatePurge()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("updatePurge") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_updatePurge_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.purgeNotFound) {
    throw result.purgeNotFound;
  }
  if (result.__isset.documentNotInPurge) {
    throw result.documentNotInPurge;
  }
  return;
}

void ProvenanceServiceClient::removeDocumentAgeOffRuleInheritance(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t parentId, const std::string& parentUri)
{
  send_removeDocumentAgeOffRuleInheritance(securityToken, documentId, documentUri, parentId, parentUri);
  recv_removeDocumentAgeOffRuleInheritance();
}

void ProvenanceServiceClient::send_removeDocumentAgeOffRuleInheritance(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t parentId, const std::string& parentUri)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("removeDocumentAgeOffRuleInheritance", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_removeDocumentAgeOffRuleInheritance_pargs args;
  args.securityToken = &securityToken;
  args.documentId = &documentId;
  args.documentUri = &documentUri;
  args.parentId = &parentId;
  args.parentUri = &parentUri;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_removeDocumentAgeOffRuleInheritance()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("removeDocumentAgeOffRuleInheritance") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_removeDocumentAgeOffRuleInheritance_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.documentNotFound) {
    throw result.documentNotFound;
  }
  if (result.__isset.alreadyAged) {
    throw result.alreadyAged;
  }
  return;
}

void ProvenanceServiceClient::removeDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t ageOffRuleId)
{
  send_removeDocumentExplicitAgeOffRule(securityToken, documentId, documentUri, ageOffRuleId);
  recv_removeDocumentExplicitAgeOffRule();
}

void ProvenanceServiceClient::send_removeDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t ageOffRuleId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("removeDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_removeDocumentExplicitAgeOffRule_pargs args;
  args.securityToken = &securityToken;
  args.documentId = &documentId;
  args.documentUri = &documentUri;
  args.ageOffRuleId = &ageOffRuleId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_removeDocumentExplicitAgeOffRule()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("removeDocumentExplicitAgeOffRule") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_removeDocumentExplicitAgeOffRule_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.documentNotFound) {
    throw result.documentNotFound;
  }
  if (result.__isset.ruleNotFound) {
    throw result.ruleNotFound;
  }
  if (result.__isset.alreadyAged) {
    throw result.alreadyAged;
  }
  return;
}

void ProvenanceServiceClient::addDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const AgeOffMapping& ageOffMapping)
{
  send_addDocumentExplicitAgeOffRule(securityToken, documentId, documentUri, ageOffMapping);
  recv_addDocumentExplicitAgeOffRule();
}

void ProvenanceServiceClient::send_addDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const AgeOffMapping& ageOffMapping)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("addDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_addDocumentExplicitAgeOffRule_pargs args;
  args.securityToken = &securityToken;
  args.documentId = &documentId;
  args.documentUri = &documentUri;
  args.ageOffMapping = &ageOffMapping;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_addDocumentExplicitAgeOffRule()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("addDocumentExplicitAgeOffRule") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_addDocumentExplicitAgeOffRule_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.documentNotFound) {
    throw result.documentNotFound;
  }
  if (result.__isset.ruleNotFound) {
    throw result.ruleNotFound;
  }
  if (result.__isset.alreadyAged) {
    throw result.alreadyAged;
  }
  if (result.__isset.edgeExists) {
    throw result.edgeExists;
  }
  return;
}

void ProvenanceServiceClient::addDocumentInheritanceInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const InheritanceInfo& inheritanceInfo)
{
  send_addDocumentInheritanceInfo(securityToken, documentId, documentUri, inheritanceInfo);
  recv_addDocumentInheritanceInfo();
}

void ProvenanceServiceClient::send_addDocumentInheritanceInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const InheritanceInfo& inheritanceInfo)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("addDocumentInheritanceInfo", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_addDocumentInheritanceInfo_pargs args;
  args.securityToken = &securityToken;
  args.documentId = &documentId;
  args.documentUri = &documentUri;
  args.inheritanceInfo = &inheritanceInfo;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_addDocumentInheritanceInfo()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("addDocumentInheritanceInfo") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_addDocumentInheritanceInfo_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.security) {
    throw result.security;
  }
  if (result.__isset.documentNotFound) {
    throw result.documentNotFound;
  }
  if (result.__isset.circularInheritance) {
    throw result.circularInheritance;
  }
  if (result.__isset.alreadyAged) {
    throw result.alreadyAged;
  }
  if (result.__isset.inheritanceExists) {
    throw result.inheritanceExists;
  }
  return;
}

void ProvenanceServiceClient::recordObjectAccess(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const ObjectAccessType::type accessType)
{
  send_recordObjectAccess(securityToken, documentUri, accessType);
  recv_recordObjectAccess();
}

void ProvenanceServiceClient::send_recordObjectAccess(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const ObjectAccessType::type accessType)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recordObjectAccess", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_recordObjectAccess_pargs args;
  args.securityToken = &securityToken;
  args.documentUri = &documentUri;
  args.accessType = &accessType;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_recordObjectAccess()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recordObjectAccess") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_recordObjectAccess_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.security) {
    throw result.security;
  }
  return;
}

void ProvenanceServiceClient::fetchUsersDocuments(ResultsAndContinuation& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& userPrincipal, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint)
{
  send_fetchUsersDocuments(securityToken, userPrincipal, startDateTime, stopDateTime, numToFetch, continuationPoint);
  recv_fetchUsersDocuments(_return);
}

void ProvenanceServiceClient::send_fetchUsersDocuments(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& userPrincipal, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("fetchUsersDocuments", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_fetchUsersDocuments_pargs args;
  args.securityToken = &securityToken;
  args.userPrincipal = &userPrincipal;
  args.startDateTime = &startDateTime;
  args.stopDateTime = &stopDateTime;
  args.numToFetch = &numToFetch;
  args.continuationPoint = &continuationPoint;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_fetchUsersDocuments(ResultsAndContinuation& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("fetchUsersDocuments") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_fetchUsersDocuments_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "fetchUsersDocuments failed: unknown result");
}

void ProvenanceServiceClient::fetchDocumentUsers(ResultsAndContinuation& _return, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint)
{
  send_fetchDocumentUsers(securityToken, documentUri, startDateTime, stopDateTime, numToFetch, continuationPoint);
  recv_fetchDocumentUsers(_return);
}

void ProvenanceServiceClient::send_fetchDocumentUsers(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("fetchDocumentUsers", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_fetchDocumentUsers_pargs args;
  args.securityToken = &securityToken;
  args.documentUri = &documentUri;
  args.startDateTime = &startDateTime;
  args.stopDateTime = &stopDateTime;
  args.numToFetch = &numToFetch;
  args.continuationPoint = &continuationPoint;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceClient::recv_fetchDocumentUsers(ResultsAndContinuation& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("fetchDocumentUsers") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  ProvenanceService_fetchDocumentUsers_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.security) {
    throw result.security;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "fetchDocumentUsers failed: unknown result");
}

bool ProvenanceServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    return  ::ezbake::base::thrift::EzBakeBaseServiceProcessor::dispatchCall(iprot, oprot, fname, seqid, callContext);
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void ProvenanceServiceProcessor::process_addAgeOffRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addAgeOffRule", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addAgeOffRule");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.addAgeOffRule");
  }

  ProvenanceService_addAgeOffRule_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.addAgeOffRule", bytes);
  }

  ProvenanceService_addAgeOffRule_result result;
  try {
    result.success = iface_->addAgeOffRule(args.securityToken, args.name, args.retentionDurationSeconds, args.maximumExecutionPeriod);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceAgeOffRuleNameExistsException &nameExists) {
    result.nameExists = nameExists;
    result.__isset.nameExists = true;
  } catch (ProvenanceIllegalAgeOffDurationSecondsException &illegalAgeOffDurationSeconds) {
    result.illegalAgeOffDurationSeconds = illegalAgeOffDurationSeconds;
    result.__isset.illegalAgeOffDurationSeconds = true;
  } catch (ProvenanceIllegalAgeOffRuleNameException &illegalAgeOffName) {
    result.illegalAgeOffName = illegalAgeOffName;
    result.__isset.illegalAgeOffName = true;
  } catch (ProvenanceIllegalMaximumExecutionPeriodException &illegalMaxPeriod) {
    result.illegalMaxPeriod = illegalMaxPeriod;
    result.__isset.illegalMaxPeriod = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addAgeOffRule");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("addAgeOffRule", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addAgeOffRule");
  }

  oprot->writeMessageBegin("addAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addAgeOffRule", bytes);
  }
}

void ProvenanceServiceProcessor::process_getAgeOffRuleById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAgeOffRuleById", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAgeOffRuleById");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.getAgeOffRuleById");
  }

  ProvenanceService_getAgeOffRuleById_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.getAgeOffRuleById", bytes);
  }

  ProvenanceService_getAgeOffRuleById_result result;
  try {
    iface_->getAgeOffRuleById(result.success, args.securityToken, args.ruleId);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAgeOffRuleById");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getAgeOffRuleById", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAgeOffRuleById");
  }

  oprot->writeMessageBegin("getAgeOffRuleById", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAgeOffRuleById", bytes);
  }
}

void ProvenanceServiceProcessor::process_getAgeOffRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAgeOffRule", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAgeOffRule");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.getAgeOffRule");
  }

  ProvenanceService_getAgeOffRule_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.getAgeOffRule", bytes);
  }

  ProvenanceService_getAgeOffRule_result result;
  try {
    iface_->getAgeOffRule(result.success, args.securityToken, args.name);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAgeOffRule");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getAgeOffRule", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAgeOffRule");
  }

  oprot->writeMessageBegin("getAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAgeOffRule", bytes);
  }
}

void ProvenanceServiceProcessor::process_updateAgeOffRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.updateAgeOffRule", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.updateAgeOffRule");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.updateAgeOffRule");
  }

  ProvenanceService_updateAgeOffRule_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.updateAgeOffRule", bytes);
  }

  ProvenanceService_updateAgeOffRule_result result;
  try {
    iface_->updateAgeOffRule(args.securityToken, args.name, args.retentionDurationSeconds);
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  } catch (ProvenanceIllegalAgeOffDurationSecondsException &illegalAgeOffDurationSeconds) {
    result.illegalAgeOffDurationSeconds = illegalAgeOffDurationSeconds;
    result.__isset.illegalAgeOffDurationSeconds = true;
  } catch (ProvenanceIllegalAgeOffRuleNameException &illegalAgeOffName) {
    result.illegalAgeOffName = illegalAgeOffName;
    result.__isset.illegalAgeOffName = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.updateAgeOffRule");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("updateAgeOffRule", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.updateAgeOffRule");
  }

  oprot->writeMessageBegin("updateAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.updateAgeOffRule", bytes);
  }
}

void ProvenanceServiceProcessor::process_getAllAgeOffRules(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAllAgeOffRules", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAllAgeOffRules");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.getAllAgeOffRules");
  }

  ProvenanceService_getAllAgeOffRules_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.getAllAgeOffRules", bytes);
  }

  ProvenanceService_getAllAgeOffRules_result result;
  try {
    iface_->getAllAgeOffRules(result.success, args.securityToken, args.limit, args.page);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAllAgeOffRules");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getAllAgeOffRules", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAllAgeOffRules");
  }

  oprot->writeMessageBegin("getAllAgeOffRules", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAllAgeOffRules", bytes);
  }
}

void ProvenanceServiceProcessor::process_countAgeOffRules(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.countAgeOffRules", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.countAgeOffRules");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.countAgeOffRules");
  }

  ProvenanceService_countAgeOffRules_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.countAgeOffRules", bytes);
  }

  ProvenanceService_countAgeOffRules_result result;
  try {
    result.success = iface_->countAgeOffRules(args.securityToken);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.countAgeOffRules");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("countAgeOffRules", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.countAgeOffRules");
  }

  oprot->writeMessageBegin("countAgeOffRules", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.countAgeOffRules", bytes);
  }
}

void ProvenanceServiceProcessor::process_addDocument(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocument", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocument");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.addDocument");
  }

  ProvenanceService_addDocument_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.addDocument", bytes);
  }

  ProvenanceService_addDocument_result result;
  try {
    result.success = iface_->addDocument(args.token, args.uri, args.parents, args.ageOffRules);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceDocumentExistsException &documentExists) {
    result.documentExists = documentExists;
    result.__isset.documentExists = true;
  } catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  } catch (ProvenanceParentDocumentNotFoundException &parentNotFound) {
    result.parentNotFound = parentNotFound;
    result.__isset.parentNotFound = true;
  } catch (ProvenanceCircularInheritanceNotAllowedException &circularInheritanceNotAllowed) {
    result.circularInheritanceNotAllowed = circularInheritanceNotAllowed;
    result.__isset.circularInheritanceNotAllowed = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addDocument");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("addDocument", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addDocument");
  }

  oprot->writeMessageBegin("addDocument", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addDocument", bytes);
  }
}

void ProvenanceServiceProcessor::process_addDocuments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocuments", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocuments");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.addDocuments");
  }

  ProvenanceService_addDocuments_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.addDocuments", bytes);
  }

  ProvenanceService_addDocuments_result result;
  try {
    iface_->addDocuments(result.success, args.securityToken, args.documents, args.ageOffRules);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  } catch (ProvenanceExceedsMaxBatchSizeException &exceedsMaxSize) {
    result.exceedsMaxSize = exceedsMaxSize;
    result.__isset.exceedsMaxSize = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addDocuments");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("addDocuments", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addDocuments");
  }

  oprot->writeMessageBegin("addDocuments", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addDocuments", bytes);
  }
}

void ProvenanceServiceProcessor::process_getAddDocumentsMaxSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAddDocumentsMaxSize", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAddDocumentsMaxSize");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.getAddDocumentsMaxSize");
  }

  ProvenanceService_getAddDocumentsMaxSize_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.getAddDocumentsMaxSize", bytes);
  }

  ProvenanceService_getAddDocumentsMaxSize_result result;
  try {
    result.success = iface_->getAddDocumentsMaxSize(args.securityToken);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAddDocumentsMaxSize");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getAddDocumentsMaxSize", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAddDocumentsMaxSize");
  }

  oprot->writeMessageBegin("getAddDocumentsMaxSize", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAddDocumentsMaxSize", bytes);
  }
}

void ProvenanceServiceProcessor::process_startAgeOffEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.startAgeOffEvent", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.startAgeOffEvent");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.startAgeOffEvent");
  }

  ProvenanceService_startAgeOffEvent_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.startAgeOffEvent", bytes);
  }

  ProvenanceService_startAgeOffEvent_result result;
  try {
    iface_->startAgeOffEvent(result.success, args.securityToken, args.ruleId, args.effectiveTime);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.startAgeOffEvent");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("startAgeOffEvent", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.startAgeOffEvent");
  }

  oprot->writeMessageBegin("startAgeOffEvent", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.startAgeOffEvent", bytes);
  }
}

void ProvenanceServiceProcessor::process_markDocumentAsAged(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.markDocumentAsAged", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.markDocumentAsAged");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.markDocumentAsAged");
  }

  ProvenanceService_markDocumentAsAged_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.markDocumentAsAged", bytes);
  }

  ProvenanceService_markDocumentAsAged_result result;
  try {
    iface_->markDocumentAsAged(args.securityToken, args.agedDocumentIds);
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceDocumentNotFoundException &documentNotFound) {
    result.documentNotFound = documentNotFound;
    result.__isset.documentNotFound = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.markDocumentAsAged");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("markDocumentAsAged", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.markDocumentAsAged");
  }

  oprot->writeMessageBegin("markDocumentAsAged", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.markDocumentAsAged", bytes);
  }
}

void ProvenanceServiceProcessor::process_getDocumentInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentInfo", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentInfo");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.getDocumentInfo");
  }

  ProvenanceService_getDocumentInfo_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.getDocumentInfo", bytes);
  }

  ProvenanceService_getDocumentInfo_result result;
  try {
    iface_->getDocumentInfo(result.success, args.securityToken, args.id, args.uri);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceDocumentNotFoundException &docNotFound) {
    result.docNotFound = docNotFound;
    result.__isset.docNotFound = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentInfo");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDocumentInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentInfo");
  }

  oprot->writeMessageBegin("getDocumentInfo", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentInfo", bytes);
  }
}

void ProvenanceServiceProcessor::process_getDocumentAncestors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentAncestors", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentAncestors");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.getDocumentAncestors");
  }

  ProvenanceService_getDocumentAncestors_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.getDocumentAncestors", bytes);
  }

  ProvenanceService_getDocumentAncestors_result result;
  try {
    iface_->getDocumentAncestors(result.success, args.securityToken, args.uris);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentAncestors");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDocumentAncestors", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentAncestors");
  }

  oprot->writeMessageBegin("getDocumentAncestors", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentAncestors", bytes);
  }
}

void ProvenanceServiceProcessor::process_getDocumentDescendants(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentDescendants", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentDescendants");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.getDocumentDescendants");
  }

  ProvenanceService_getDocumentDescendants_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.getDocumentDescendants", bytes);
  }

  ProvenanceService_getDocumentDescendants_result result;
  try {
    iface_->getDocumentDescendants(result.success, args.securityToken, args.uris);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentDescendants");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDocumentDescendants", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentDescendants");
  }

  oprot->writeMessageBegin("getDocumentDescendants", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentDescendants", bytes);
  }
}

void ProvenanceServiceProcessor::process_markDocumentForPurge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.markDocumentForPurge", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.markDocumentForPurge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.markDocumentForPurge");
  }

  ProvenanceService_markDocumentForPurge_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.markDocumentForPurge", bytes);
  }

  ProvenanceService_markDocumentForPurge_result result;
  try {
    iface_->markDocumentForPurge(result.success, args.securityToken, args.uris, args.name, args.description);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.markDocumentForPurge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("markDocumentForPurge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.markDocumentForPurge");
  }

  oprot->writeMessageBegin("markDocumentForPurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.markDocumentForPurge", bytes);
  }
}

void ProvenanceServiceProcessor::process_getDocumentUriFromId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentUriFromId", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentUriFromId");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.getDocumentUriFromId");
  }

  ProvenanceService_getDocumentUriFromId_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.getDocumentUriFromId", bytes);
  }

  ProvenanceService_getDocumentUriFromId_result result;
  try {
    iface_->getDocumentUriFromId(result.success, args.securityToken, args.positionsList);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentUriFromId");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDocumentUriFromId", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentUriFromId");
  }

  oprot->writeMessageBegin("getDocumentUriFromId", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentUriFromId", bytes);
  }
}

void ProvenanceServiceProcessor::process_getDocumentConvertedUrisFromIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentConvertedUrisFromIds", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentConvertedUrisFromIds");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds");
  }

  ProvenanceService_getDocumentConvertedUrisFromIds_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds", bytes);
  }

  ProvenanceService_getDocumentConvertedUrisFromIds_result result;
  try {
    iface_->getDocumentConvertedUrisFromIds(result.success, args.securityToken, args.ids);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDocumentConvertedUrisFromIds", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds");
  }

  oprot->writeMessageBegin("getDocumentConvertedUrisFromIds", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds", bytes);
  }
}

void ProvenanceServiceProcessor::process_getDocumentConvertedUrisFromUris(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentConvertedUrisFromUris", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentConvertedUrisFromUris");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris");
  }

  ProvenanceService_getDocumentConvertedUrisFromUris_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris", bytes);
  }

  ProvenanceService_getDocumentConvertedUrisFromUris_result result;
  try {
    iface_->getDocumentConvertedUrisFromUris(result.success, args.securityToken, args.uris);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDocumentConvertedUrisFromUris", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris");
  }

  oprot->writeMessageBegin("getDocumentConvertedUrisFromUris", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris", bytes);
  }
}

void ProvenanceServiceProcessor::process_getPurgeInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getPurgeInfo", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getPurgeInfo");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.getPurgeInfo");
  }

  ProvenanceService_getPurgeInfo_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.getPurgeInfo", bytes);
  }

  ProvenanceService_getPurgeInfo_result result;
  try {
    iface_->getPurgeInfo(result.success, args.securityToken, args.purgeId);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenancePurgeIdNotFoundException &purgeNotFound) {
    result.purgeNotFound = purgeNotFound;
    result.__isset.purgeNotFound = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getPurgeInfo");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getPurgeInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getPurgeInfo");
  }

  oprot->writeMessageBegin("getPurgeInfo", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getPurgeInfo", bytes);
  }
}

void ProvenanceServiceProcessor::process_getAllPurgeIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAllPurgeIds", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAllPurgeIds");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.getAllPurgeIds");
  }

  ProvenanceService_getAllPurgeIds_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.getAllPurgeIds", bytes);
  }

  ProvenanceService_getAllPurgeIds_result result;
  try {
    iface_->getAllPurgeIds(result.success, args.securityToken);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAllPurgeIds");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getAllPurgeIds", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAllPurgeIds");
  }

  oprot->writeMessageBegin("getAllPurgeIds", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAllPurgeIds", bytes);
  }
}

void ProvenanceServiceProcessor::process_updatePurge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.updatePurge", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.updatePurge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.updatePurge");
  }

  ProvenanceService_updatePurge_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.updatePurge", bytes);
  }

  ProvenanceService_updatePurge_result result;
  try {
    iface_->updatePurge(args.securityToken, args.purgeId, args.completelyPurged, args.note, args.resolved);
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenancePurgeIdNotFoundException &purgeNotFound) {
    result.purgeNotFound = purgeNotFound;
    result.__isset.purgeNotFound = true;
  } catch (ProvenanceDocumentNotInPurgeException &documentNotInPurge) {
    result.documentNotInPurge = documentNotInPurge;
    result.__isset.documentNotInPurge = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.updatePurge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("updatePurge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.updatePurge");
  }

  oprot->writeMessageBegin("updatePurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.updatePurge", bytes);
  }
}

void ProvenanceServiceProcessor::process_removeDocumentAgeOffRuleInheritance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.removeDocumentAgeOffRuleInheritance", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance");
  }

  ProvenanceService_removeDocumentAgeOffRuleInheritance_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance", bytes);
  }

  ProvenanceService_removeDocumentAgeOffRuleInheritance_result result;
  try {
    iface_->removeDocumentAgeOffRuleInheritance(args.securityToken, args.documentId, args.documentUri, args.parentId, args.parentUri);
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceDocumentNotFoundException &documentNotFound) {
    result.documentNotFound = documentNotFound;
    result.__isset.documentNotFound = true;
  } catch (ProvenanceAlreadyAgedException &alreadyAged) {
    result.alreadyAged = alreadyAged;
    result.__isset.alreadyAged = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("removeDocumentAgeOffRuleInheritance", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance");
  }

  oprot->writeMessageBegin("removeDocumentAgeOffRuleInheritance", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance", bytes);
  }
}

void ProvenanceServiceProcessor::process_removeDocumentExplicitAgeOffRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.removeDocumentExplicitAgeOffRule", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule");
  }

  ProvenanceService_removeDocumentExplicitAgeOffRule_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule", bytes);
  }

  ProvenanceService_removeDocumentExplicitAgeOffRule_result result;
  try {
    iface_->removeDocumentExplicitAgeOffRule(args.securityToken, args.documentId, args.documentUri, args.ageOffRuleId);
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceDocumentNotFoundException &documentNotFound) {
    result.documentNotFound = documentNotFound;
    result.__isset.documentNotFound = true;
  } catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  } catch (ProvenanceAlreadyAgedException &alreadyAged) {
    result.alreadyAged = alreadyAged;
    result.__isset.alreadyAged = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("removeDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule");
  }

  oprot->writeMessageBegin("removeDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule", bytes);
  }
}

void ProvenanceServiceProcessor::process_addDocumentExplicitAgeOffRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocumentExplicitAgeOffRule", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocumentExplicitAgeOffRule");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule");
  }

  ProvenanceService_addDocumentExplicitAgeOffRule_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule", bytes);
  }

  ProvenanceService_addDocumentExplicitAgeOffRule_result result;
  try {
    iface_->addDocumentExplicitAgeOffRule(args.securityToken, args.documentId, args.documentUri, args.ageOffMapping);
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceDocumentNotFoundException &documentNotFound) {
    result.documentNotFound = documentNotFound;
    result.__isset.documentNotFound = true;
  } catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  } catch (ProvenanceAlreadyAgedException &alreadyAged) {
    result.alreadyAged = alreadyAged;
    result.__isset.alreadyAged = true;
  } catch (ProvenanceAgeOffExistsException &edgeExists) {
    result.edgeExists = edgeExists;
    result.__isset.edgeExists = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("addDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule");
  }

  oprot->writeMessageBegin("addDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule", bytes);
  }
}

void ProvenanceServiceProcessor::process_addDocumentInheritanceInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocumentInheritanceInfo", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocumentInheritanceInfo");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.addDocumentInheritanceInfo");
  }

  ProvenanceService_addDocumentInheritanceInfo_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.addDocumentInheritanceInfo", bytes);
  }

  ProvenanceService_addDocumentInheritanceInfo_result result;
  try {
    iface_->addDocumentInheritanceInfo(args.securityToken, args.documentId, args.documentUri, args.inheritanceInfo);
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (ProvenanceDocumentNotFoundException &documentNotFound) {
    result.documentNotFound = documentNotFound;
    result.__isset.documentNotFound = true;
  } catch (ProvenanceCircularInheritanceNotAllowedException &circularInheritance) {
    result.circularInheritance = circularInheritance;
    result.__isset.circularInheritance = true;
  } catch (ProvenanceAlreadyAgedException &alreadyAged) {
    result.alreadyAged = alreadyAged;
    result.__isset.alreadyAged = true;
  } catch (ProvenanceAgeOffInheritanceExistsException &inheritanceExists) {
    result.inheritanceExists = inheritanceExists;
    result.__isset.inheritanceExists = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addDocumentInheritanceInfo");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("addDocumentInheritanceInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addDocumentInheritanceInfo");
  }

  oprot->writeMessageBegin("addDocumentInheritanceInfo", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addDocumentInheritanceInfo", bytes);
  }
}

void ProvenanceServiceProcessor::process_recordObjectAccess(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.recordObjectAccess", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.recordObjectAccess");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.recordObjectAccess");
  }

  ProvenanceService_recordObjectAccess_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.recordObjectAccess", bytes);
  }

  ProvenanceService_recordObjectAccess_result result;
  try {
    iface_->recordObjectAccess(args.securityToken, args.documentUri, args.accessType);
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.recordObjectAccess");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recordObjectAccess", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.recordObjectAccess");
  }

  oprot->writeMessageBegin("recordObjectAccess", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.recordObjectAccess", bytes);
  }
}

void ProvenanceServiceProcessor::process_fetchUsersDocuments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.fetchUsersDocuments", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.fetchUsersDocuments");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.fetchUsersDocuments");
  }

  ProvenanceService_fetchUsersDocuments_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.fetchUsersDocuments", bytes);
  }

  ProvenanceService_fetchUsersDocuments_result result;
  try {
    iface_->fetchUsersDocuments(result.success, args.securityToken, args.userPrincipal, args.startDateTime, args.stopDateTime, args.numToFetch, args.continuationPoint);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.fetchUsersDocuments");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("fetchUsersDocuments", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.fetchUsersDocuments");
  }

  oprot->writeMessageBegin("fetchUsersDocuments", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.fetchUsersDocuments", bytes);
  }
}

void ProvenanceServiceProcessor::process_fetchDocumentUsers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.fetchDocumentUsers", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.fetchDocumentUsers");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "ProvenanceService.fetchDocumentUsers");
  }

  ProvenanceService_fetchDocumentUsers_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "ProvenanceService.fetchDocumentUsers", bytes);
  }

  ProvenanceService_fetchDocumentUsers_result result;
  try {
    iface_->fetchDocumentUsers(result.success, args.securityToken, args.documentUri, args.startDateTime, args.stopDateTime, args.numToFetch, args.continuationPoint);
    result.__isset.success = true;
  } catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.fetchDocumentUsers");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("fetchDocumentUsers", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.fetchDocumentUsers");
  }

  oprot->writeMessageBegin("fetchDocumentUsers", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.fetchDocumentUsers", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > ProvenanceServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< ProvenanceServiceIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< ProvenanceServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new ProvenanceServiceProcessor(handler));
  return processor;
}
void ProvenanceServiceCobClient::addAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds, const int32_t maximumExecutionPeriod)
{
  send_addAgeOffRule(securityToken, name, retentionDurationSeconds, maximumExecutionPeriod);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_addAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds, const int32_t maximumExecutionPeriod)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("addAgeOffRule", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_addAgeOffRule_pargs args;
  args.securityToken = &securityToken;
  args.name = &name;
  args.retentionDurationSeconds = &retentionDurationSeconds;
  args.maximumExecutionPeriod = &maximumExecutionPeriod;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int64_t ProvenanceServiceCobClient::recv_addAgeOffRule()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("addAgeOffRule") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    int64_t _return;
    ProvenanceService_addAgeOffRule_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      completed = true;
      completed__(true);
      return _return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.nameExists) {
      completed = true;
      completed__(true);
      throw result.nameExists;
    }
    if (result.__isset.illegalAgeOffDurationSeconds) {
      completed = true;
      completed__(true);
      throw result.illegalAgeOffDurationSeconds;
    }
    if (result.__isset.illegalAgeOffName) {
      completed = true;
      completed__(true);
      throw result.illegalAgeOffName;
    }
    if (result.__isset.illegalMaxPeriod) {
      completed = true;
      completed__(true);
      throw result.illegalMaxPeriod;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "addAgeOffRule failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::getAgeOffRuleById(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId)
{
  send_getAgeOffRuleById(securityToken, ruleId);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_getAgeOffRuleById(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getAgeOffRuleById", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getAgeOffRuleById_pargs args;
  args.securityToken = &securityToken;
  args.ruleId = &ruleId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_getAgeOffRuleById(AgeOffRule& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("getAgeOffRuleById") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_getAgeOffRuleById_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.ruleNotFound) {
      completed = true;
      completed__(true);
      throw result.ruleNotFound;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAgeOffRuleById failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::getAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name)
{
  send_getAgeOffRule(securityToken, name);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_getAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getAgeOffRule", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getAgeOffRule_pargs args;
  args.securityToken = &securityToken;
  args.name = &name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_getAgeOffRule(AgeOffRule& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("getAgeOffRule") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_getAgeOffRule_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.ruleNotFound) {
      completed = true;
      completed__(true);
      throw result.ruleNotFound;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAgeOffRule failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::updateAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds)
{
  send_updateAgeOffRule(securityToken, name, retentionDurationSeconds);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_updateAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& name, const int64_t retentionDurationSeconds)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("updateAgeOffRule", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_updateAgeOffRule_pargs args;
  args.securityToken = &securityToken;
  args.name = &name;
  args.retentionDurationSeconds = &retentionDurationSeconds;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_updateAgeOffRule()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("updateAgeOffRule") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_updateAgeOffRule_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.ruleNotFound) {
      completed = true;
      completed__(true);
      throw result.ruleNotFound;
    }
    if (result.__isset.illegalAgeOffDurationSeconds) {
      completed = true;
      completed__(true);
      throw result.illegalAgeOffDurationSeconds;
    }
    if (result.__isset.illegalAgeOffName) {
      completed = true;
      completed__(true);
      throw result.illegalAgeOffName;
    }
    completed = true;
    completed__(true);
    return;
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::getAllAgeOffRules(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int32_t limit, const int32_t page)
{
  send_getAllAgeOffRules(securityToken, limit, page);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_getAllAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int32_t limit, const int32_t page)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getAllAgeOffRules", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getAllAgeOffRules_pargs args;
  args.securityToken = &securityToken;
  args.limit = &limit;
  args.page = &page;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_getAllAgeOffRules(std::vector<AgeOffRule> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("getAllAgeOffRules") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_getAllAgeOffRules_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAllAgeOffRules failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::countAgeOffRules(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken)
{
  send_countAgeOffRules(securityToken);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_countAgeOffRules(const  ::ezbake::base::thrift::EzSecurityToken& securityToken)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("countAgeOffRules", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_countAgeOffRules_pargs args;
  args.securityToken = &securityToken;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t ProvenanceServiceCobClient::recv_countAgeOffRules()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("countAgeOffRules") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    int32_t _return;
    ProvenanceService_countAgeOffRules_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      completed = true;
      completed__(true);
      return _return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "countAgeOffRules failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::addDocument(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& token, const std::string& uri, const std::vector<InheritanceInfo> & parents, const std::vector<AgeOffMapping> & ageOffRules)
{
  send_addDocument(token, uri, parents, ageOffRules);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_addDocument(const  ::ezbake::base::thrift::EzSecurityToken& token, const std::string& uri, const std::vector<InheritanceInfo> & parents, const std::vector<AgeOffMapping> & ageOffRules)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("addDocument", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_addDocument_pargs args;
  args.token = &token;
  args.uri = &uri;
  args.parents = &parents;
  args.ageOffRules = &ageOffRules;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int64_t ProvenanceServiceCobClient::recv_addDocument()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("addDocument") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    int64_t _return;
    ProvenanceService_addDocument_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      completed = true;
      completed__(true);
      return _return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.documentExists) {
      completed = true;
      completed__(true);
      throw result.documentExists;
    }
    if (result.__isset.ruleNotFound) {
      completed = true;
      completed__(true);
      throw result.ruleNotFound;
    }
    if (result.__isset.parentNotFound) {
      completed = true;
      completed__(true);
      throw result.parentNotFound;
    }
    if (result.__isset.circularInheritanceNotAllowed) {
      completed = true;
      completed__(true);
      throw result.circularInheritanceNotAllowed;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "addDocument failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::addDocuments(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<AddDocumentEntry> & documents, const std::set<AgeOffMapping> & ageOffRules)
{
  send_addDocuments(securityToken, documents, ageOffRules);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_addDocuments(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<AddDocumentEntry> & documents, const std::set<AgeOffMapping> & ageOffRules)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("addDocuments", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_addDocuments_pargs args;
  args.securityToken = &securityToken;
  args.documents = &documents;
  args.ageOffRules = &ageOffRules;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_addDocuments(std::map<std::string, AddDocumentResult> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("addDocuments") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_addDocuments_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.ruleNotFound) {
      completed = true;
      completed__(true);
      throw result.ruleNotFound;
    }
    if (result.__isset.exceedsMaxSize) {
      completed = true;
      completed__(true);
      throw result.exceedsMaxSize;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "addDocuments failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::getAddDocumentsMaxSize(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken)
{
  send_getAddDocumentsMaxSize(securityToken);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_getAddDocumentsMaxSize(const  ::ezbake::base::thrift::EzSecurityToken& securityToken)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getAddDocumentsMaxSize", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getAddDocumentsMaxSize_pargs args;
  args.securityToken = &securityToken;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t ProvenanceServiceCobClient::recv_getAddDocumentsMaxSize()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("getAddDocumentsMaxSize") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    int32_t _return;
    ProvenanceService_getAddDocumentsMaxSize_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      completed = true;
      completed__(true);
      return _return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAddDocumentsMaxSize failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::startAgeOffEvent(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId, const  ::ezbake::base::thrift::DateTime& effectiveTime)
{
  send_startAgeOffEvent(securityToken, ruleId, effectiveTime);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_startAgeOffEvent(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t ruleId, const  ::ezbake::base::thrift::DateTime& effectiveTime)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("startAgeOffEvent", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_startAgeOffEvent_pargs args;
  args.securityToken = &securityToken;
  args.ruleId = &ruleId;
  args.effectiveTime = &effectiveTime;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_startAgeOffEvent(AgeOffInitiationResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("startAgeOffEvent") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_startAgeOffEvent_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.ruleNotFound) {
      completed = true;
      completed__(true);
      throw result.ruleNotFound;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "startAgeOffEvent failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::markDocumentAsAged(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & agedDocumentIds)
{
  send_markDocumentAsAged(securityToken, agedDocumentIds);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_markDocumentAsAged(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & agedDocumentIds)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("markDocumentAsAged", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_markDocumentAsAged_pargs args;
  args.securityToken = &securityToken;
  args.agedDocumentIds = &agedDocumentIds;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_markDocumentAsAged()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("markDocumentAsAged") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_markDocumentAsAged_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.documentNotFound) {
      completed = true;
      completed__(true);
      throw result.documentNotFound;
    }
    completed = true;
    completed__(true);
    return;
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::getDocumentInfo(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t id, const std::string& uri)
{
  send_getDocumentInfo(securityToken, id, uri);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_getDocumentInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t id, const std::string& uri)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getDocumentInfo", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getDocumentInfo_pargs args;
  args.securityToken = &securityToken;
  args.id = &id;
  args.uri = &uri;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_getDocumentInfo(DocumentInfo& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("getDocumentInfo") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_getDocumentInfo_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.docNotFound) {
      completed = true;
      completed__(true);
      throw result.docNotFound;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getDocumentInfo failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::getDocumentAncestors(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris)
{
  send_getDocumentAncestors(securityToken, uris);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_getDocumentAncestors(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getDocumentAncestors", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getDocumentAncestors_pargs args;
  args.securityToken = &securityToken;
  args.uris = &uris;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_getDocumentAncestors(DerivedResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("getDocumentAncestors") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_getDocumentAncestors_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getDocumentAncestors failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::getDocumentDescendants(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris)
{
  send_getDocumentDescendants(securityToken, uris);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_getDocumentDescendants(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getDocumentDescendants", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getDocumentDescendants_pargs args;
  args.securityToken = &securityToken;
  args.uris = &uris;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_getDocumentDescendants(DerivedResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("getDocumentDescendants") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_getDocumentDescendants_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getDocumentDescendants failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::markDocumentForPurge(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris, const std::string& name, const std::string& description)
{
  send_markDocumentForPurge(securityToken, uris, name, description);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_markDocumentForPurge(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<std::string> & uris, const std::string& name, const std::string& description)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("markDocumentForPurge", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_markDocumentForPurge_pargs args;
  args.securityToken = &securityToken;
  args.uris = &uris;
  args.name = &name;
  args.description = &description;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_markDocumentForPurge(PurgeInitiationResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("markDocumentForPurge") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_markDocumentForPurge_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "markDocumentForPurge failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::getDocumentUriFromId(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<int64_t> & positionsList)
{
  send_getDocumentUriFromId(securityToken, positionsList);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_getDocumentUriFromId(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::vector<int64_t> & positionsList)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getDocumentUriFromId", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getDocumentUriFromId_pargs args;
  args.securityToken = &securityToken;
  args.positionsList = &positionsList;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_getDocumentUriFromId(PositionsToUris& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("getDocumentUriFromId") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_getDocumentUriFromId_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getDocumentUriFromId failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::getDocumentConvertedUrisFromIds(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & ids)
{
  send_getDocumentConvertedUrisFromIds(securityToken, ids);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_getDocumentConvertedUrisFromIds(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<int64_t> & ids)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getDocumentConvertedUrisFromIds", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getDocumentConvertedUrisFromIds_pargs args;
  args.securityToken = &securityToken;
  args.ids = &ids;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_getDocumentConvertedUrisFromIds(ConversionResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("getDocumentConvertedUrisFromIds") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_getDocumentConvertedUrisFromIds_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getDocumentConvertedUrisFromIds failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::getDocumentConvertedUrisFromUris(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<std::string> & uris)
{
  send_getDocumentConvertedUrisFromUris(securityToken, uris);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_getDocumentConvertedUrisFromUris(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::set<std::string> & uris)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getDocumentConvertedUrisFromUris", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getDocumentConvertedUrisFromUris_pargs args;
  args.securityToken = &securityToken;
  args.uris = &uris;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_getDocumentConvertedUrisFromUris(ConversionResult& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("getDocumentConvertedUrisFromUris") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_getDocumentConvertedUrisFromUris_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getDocumentConvertedUrisFromUris failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::getPurgeInfo(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId)
{
  send_getPurgeInfo(securityToken, purgeId);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_getPurgeInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getPurgeInfo", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getPurgeInfo_pargs args;
  args.securityToken = &securityToken;
  args.purgeId = &purgeId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_getPurgeInfo(PurgeInfo& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("getPurgeInfo") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_getPurgeInfo_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.purgeNotFound) {
      completed = true;
      completed__(true);
      throw result.purgeNotFound;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPurgeInfo failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::getAllPurgeIds(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken)
{
  send_getAllPurgeIds(securityToken);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_getAllPurgeIds(const  ::ezbake::base::thrift::EzSecurityToken& securityToken)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getAllPurgeIds", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_getAllPurgeIds_pargs args;
  args.securityToken = &securityToken;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_getAllPurgeIds(std::vector<int64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("getAllPurgeIds") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_getAllPurgeIds_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAllPurgeIds failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::updatePurge(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId, const std::set<int64_t> & completelyPurged, const std::string& note, const bool resolved)
{
  send_updatePurge(securityToken, purgeId, completelyPurged, note, resolved);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_updatePurge(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t purgeId, const std::set<int64_t> & completelyPurged, const std::string& note, const bool resolved)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("updatePurge", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_updatePurge_pargs args;
  args.securityToken = &securityToken;
  args.purgeId = &purgeId;
  args.completelyPurged = &completelyPurged;
  args.note = &note;
  args.resolved = &resolved;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_updatePurge()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("updatePurge") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_updatePurge_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.purgeNotFound) {
      completed = true;
      completed__(true);
      throw result.purgeNotFound;
    }
    if (result.__isset.documentNotInPurge) {
      completed = true;
      completed__(true);
      throw result.documentNotInPurge;
    }
    completed = true;
    completed__(true);
    return;
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::removeDocumentAgeOffRuleInheritance(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t parentId, const std::string& parentUri)
{
  send_removeDocumentAgeOffRuleInheritance(securityToken, documentId, documentUri, parentId, parentUri);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_removeDocumentAgeOffRuleInheritance(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t parentId, const std::string& parentUri)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("removeDocumentAgeOffRuleInheritance", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_removeDocumentAgeOffRuleInheritance_pargs args;
  args.securityToken = &securityToken;
  args.documentId = &documentId;
  args.documentUri = &documentUri;
  args.parentId = &parentId;
  args.parentUri = &parentUri;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_removeDocumentAgeOffRuleInheritance()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("removeDocumentAgeOffRuleInheritance") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_removeDocumentAgeOffRuleInheritance_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.documentNotFound) {
      completed = true;
      completed__(true);
      throw result.documentNotFound;
    }
    if (result.__isset.alreadyAged) {
      completed = true;
      completed__(true);
      throw result.alreadyAged;
    }
    completed = true;
    completed__(true);
    return;
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::removeDocumentExplicitAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t ageOffRuleId)
{
  send_removeDocumentExplicitAgeOffRule(securityToken, documentId, documentUri, ageOffRuleId);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_removeDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const int64_t ageOffRuleId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("removeDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_removeDocumentExplicitAgeOffRule_pargs args;
  args.securityToken = &securityToken;
  args.documentId = &documentId;
  args.documentUri = &documentUri;
  args.ageOffRuleId = &ageOffRuleId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_removeDocumentExplicitAgeOffRule()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("removeDocumentExplicitAgeOffRule") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_removeDocumentExplicitAgeOffRule_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.documentNotFound) {
      completed = true;
      completed__(true);
      throw result.documentNotFound;
    }
    if (result.__isset.ruleNotFound) {
      completed = true;
      completed__(true);
      throw result.ruleNotFound;
    }
    if (result.__isset.alreadyAged) {
      completed = true;
      completed__(true);
      throw result.alreadyAged;
    }
    completed = true;
    completed__(true);
    return;
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::addDocumentExplicitAgeOffRule(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const AgeOffMapping& ageOffMapping)
{
  send_addDocumentExplicitAgeOffRule(securityToken, documentId, documentUri, ageOffMapping);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_addDocumentExplicitAgeOffRule(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const AgeOffMapping& ageOffMapping)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("addDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_addDocumentExplicitAgeOffRule_pargs args;
  args.securityToken = &securityToken;
  args.documentId = &documentId;
  args.documentUri = &documentUri;
  args.ageOffMapping = &ageOffMapping;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_addDocumentExplicitAgeOffRule()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("addDocumentExplicitAgeOffRule") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_addDocumentExplicitAgeOffRule_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.documentNotFound) {
      completed = true;
      completed__(true);
      throw result.documentNotFound;
    }
    if (result.__isset.ruleNotFound) {
      completed = true;
      completed__(true);
      throw result.ruleNotFound;
    }
    if (result.__isset.alreadyAged) {
      completed = true;
      completed__(true);
      throw result.alreadyAged;
    }
    if (result.__isset.edgeExists) {
      completed = true;
      completed__(true);
      throw result.edgeExists;
    }
    completed = true;
    completed__(true);
    return;
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::addDocumentInheritanceInfo(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const InheritanceInfo& inheritanceInfo)
{
  send_addDocumentInheritanceInfo(securityToken, documentId, documentUri, inheritanceInfo);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_addDocumentInheritanceInfo(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const int64_t documentId, const std::string& documentUri, const InheritanceInfo& inheritanceInfo)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("addDocumentInheritanceInfo", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_addDocumentInheritanceInfo_pargs args;
  args.securityToken = &securityToken;
  args.documentId = &documentId;
  args.documentUri = &documentUri;
  args.inheritanceInfo = &inheritanceInfo;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_addDocumentInheritanceInfo()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("addDocumentInheritanceInfo") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_addDocumentInheritanceInfo_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    if (result.__isset.documentNotFound) {
      completed = true;
      completed__(true);
      throw result.documentNotFound;
    }
    if (result.__isset.circularInheritance) {
      completed = true;
      completed__(true);
      throw result.circularInheritance;
    }
    if (result.__isset.alreadyAged) {
      completed = true;
      completed__(true);
      throw result.alreadyAged;
    }
    if (result.__isset.inheritanceExists) {
      completed = true;
      completed__(true);
      throw result.inheritanceExists;
    }
    completed = true;
    completed__(true);
    return;
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::recordObjectAccess(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const ObjectAccessType::type accessType)
{
  send_recordObjectAccess(securityToken, documentUri, accessType);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_recordObjectAccess(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const ObjectAccessType::type accessType)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recordObjectAccess", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_recordObjectAccess_pargs args;
  args.securityToken = &securityToken;
  args.documentUri = &documentUri;
  args.accessType = &accessType;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_recordObjectAccess()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("recordObjectAccess") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_recordObjectAccess_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    return;
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::fetchUsersDocuments(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& userPrincipal, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint)
{
  send_fetchUsersDocuments(securityToken, userPrincipal, startDateTime, stopDateTime, numToFetch, continuationPoint);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_fetchUsersDocuments(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& userPrincipal, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("fetchUsersDocuments", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_fetchUsersDocuments_pargs args;
  args.securityToken = &securityToken;
  args.userPrincipal = &userPrincipal;
  args.startDateTime = &startDateTime;
  args.stopDateTime = &stopDateTime;
  args.numToFetch = &numToFetch;
  args.continuationPoint = &continuationPoint;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_fetchUsersDocuments(ResultsAndContinuation& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("fetchUsersDocuments") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_fetchUsersDocuments_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "fetchUsersDocuments failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceCobClient::fetchDocumentUsers(tcxx::function<void(ProvenanceServiceCobClient* client)> cob, const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint)
{
  send_fetchDocumentUsers(securityToken, documentUri, startDateTime, stopDateTime, numToFetch, continuationPoint);
  channel_->sendAndRecvMessage(tcxx::bind(cob, this), otrans_.get(), itrans_.get());
}

void ProvenanceServiceCobClient::send_fetchDocumentUsers(const  ::ezbake::base::thrift::EzSecurityToken& securityToken, const std::string& documentUri, const  ::ezbake::base::thrift::DateTime& startDateTime, const  ::ezbake::base::thrift::DateTime& stopDateTime, const int32_t numToFetch, const AccumuloContinuationPoint& continuationPoint)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("fetchDocumentUsers", ::apache::thrift::protocol::T_CALL, cseqid);

  ProvenanceService_fetchDocumentUsers_pargs args;
  args.securityToken = &securityToken;
  args.documentUri = &documentUri;
  args.startDateTime = &startDateTime;
  args.stopDateTime = &stopDateTime;
  args.numToFetch = &numToFetch;
  args.continuationPoint = &continuationPoint;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void ProvenanceServiceCobClient::recv_fetchDocumentUsers(ResultsAndContinuation& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;
  bool completed = false;

  try {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
      ::apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(true);
      throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    if (fname.compare("fetchDocumentUsers") != 0) {
      iprot_->skip(::apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      completed = true;
      completed__(false);
    }
    ProvenanceService_fetchDocumentUsers_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
      // _return pointer has now been filled
      completed = true;
      completed__(true);
      return;
    }
    if (result.__isset.security) {
      completed = true;
      completed__(true);
      throw result.security;
    }
    completed = true;
    completed__(true);
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "fetchDocumentUsers failed: unknown result");
  } catch (...) {
    if (!completed) {
      completed__(false);
    }
    throw;
  }
}

void ProvenanceServiceAsyncProcessor::dispatchCall(tcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    return  ::ezbake::base::thrift::EzBakeBaseServiceAsyncProcessor::dispatchCall(cob, iprot, oprot, fname, seqid);
  }
  (this->*(pfn->second))(cob, seqid, iprot, oprot);
  return;
}

void ProvenanceServiceAsyncProcessor::process_addAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_addAgeOffRule_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addAgeOffRule");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.addAgeOffRule");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.addAgeOffRule", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addAgeOffRule");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int64_t& _return) =
    &ProvenanceServiceAsyncProcessor::return_addAgeOffRule;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_addAgeOffRule;
  iface_->addAgeOffRule(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.name,
      args.retentionDurationSeconds,
      args.maximumExecutionPeriod);
}

void ProvenanceServiceAsyncProcessor::return_addAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int64_t& _return)
{
  ProvenanceService_addAgeOffRule_presult result;
  result.success = const_cast<int64_t*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addAgeOffRule");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addAgeOffRule");
  }

  oprot->writeMessageBegin("addAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addAgeOffRule", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_addAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addAgeOffRule");

  ProvenanceService_addAgeOffRule_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceAgeOffRuleNameExistsException &nameExists) {
    result.nameExists = nameExists;
    result.__isset.nameExists = true;
  }
  catch (ProvenanceIllegalAgeOffDurationSecondsException &illegalAgeOffDurationSeconds) {
    result.illegalAgeOffDurationSeconds = illegalAgeOffDurationSeconds;
    result.__isset.illegalAgeOffDurationSeconds = true;
  }
  catch (ProvenanceIllegalAgeOffRuleNameException &illegalAgeOffName) {
    result.illegalAgeOffName = illegalAgeOffName;
    result.__isset.illegalAgeOffName = true;
  }
  catch (ProvenanceIllegalMaximumExecutionPeriodException &illegalMaxPeriod) {
    result.illegalMaxPeriod = illegalMaxPeriod;
    result.__isset.illegalMaxPeriod = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addAgeOffRule");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("addAgeOffRule", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addAgeOffRule");
  }

  oprot->writeMessageBegin("addAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addAgeOffRule", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_getAgeOffRuleById(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_getAgeOffRuleById_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAgeOffRuleById", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAgeOffRuleById");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.getAgeOffRuleById");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.getAgeOffRuleById", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAgeOffRuleById");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const AgeOffRule& _return) =
    &ProvenanceServiceAsyncProcessor::return_getAgeOffRuleById;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_getAgeOffRuleById;
  iface_->getAgeOffRuleById(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.ruleId);
}

void ProvenanceServiceAsyncProcessor::return_getAgeOffRuleById(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const AgeOffRule& _return)
{
  ProvenanceService_getAgeOffRuleById_presult result;
  result.success = const_cast<AgeOffRule*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAgeOffRuleById", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAgeOffRuleById");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAgeOffRuleById");
  }

  oprot->writeMessageBegin("getAgeOffRuleById", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAgeOffRuleById", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_getAgeOffRuleById(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAgeOffRuleById", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAgeOffRuleById");

  ProvenanceService_getAgeOffRuleById_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAgeOffRuleById");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getAgeOffRuleById", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAgeOffRuleById");
  }

  oprot->writeMessageBegin("getAgeOffRuleById", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAgeOffRuleById", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_getAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_getAgeOffRule_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAgeOffRule");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.getAgeOffRule");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.getAgeOffRule", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAgeOffRule");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const AgeOffRule& _return) =
    &ProvenanceServiceAsyncProcessor::return_getAgeOffRule;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_getAgeOffRule;
  iface_->getAgeOffRule(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.name);
}

void ProvenanceServiceAsyncProcessor::return_getAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const AgeOffRule& _return)
{
  ProvenanceService_getAgeOffRule_presult result;
  result.success = const_cast<AgeOffRule*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAgeOffRule");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAgeOffRule");
  }

  oprot->writeMessageBegin("getAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAgeOffRule", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_getAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAgeOffRule");

  ProvenanceService_getAgeOffRule_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAgeOffRule");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getAgeOffRule", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAgeOffRule");
  }

  oprot->writeMessageBegin("getAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAgeOffRule", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_updateAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_updateAgeOffRule_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.updateAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.updateAgeOffRule");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.updateAgeOffRule");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.updateAgeOffRule", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.updateAgeOffRule");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx) =
    &ProvenanceServiceAsyncProcessor::return_updateAgeOffRule;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_updateAgeOffRule;
  iface_->updateAgeOffRule(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.name,
      args.retentionDurationSeconds);
}

void ProvenanceServiceAsyncProcessor::return_updateAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx)
{
  ProvenanceService_updateAgeOffRule_presult result;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.updateAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.updateAgeOffRule");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.updateAgeOffRule");
  }

  oprot->writeMessageBegin("updateAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.updateAgeOffRule", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_updateAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.updateAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.updateAgeOffRule");

  ProvenanceService_updateAgeOffRule_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  }
  catch (ProvenanceIllegalAgeOffDurationSecondsException &illegalAgeOffDurationSeconds) {
    result.illegalAgeOffDurationSeconds = illegalAgeOffDurationSeconds;
    result.__isset.illegalAgeOffDurationSeconds = true;
  }
  catch (ProvenanceIllegalAgeOffRuleNameException &illegalAgeOffName) {
    result.illegalAgeOffName = illegalAgeOffName;
    result.__isset.illegalAgeOffName = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.updateAgeOffRule");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("updateAgeOffRule", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.updateAgeOffRule");
  }

  oprot->writeMessageBegin("updateAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.updateAgeOffRule", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_getAllAgeOffRules(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_getAllAgeOffRules_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAllAgeOffRules", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAllAgeOffRules");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.getAllAgeOffRules");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.getAllAgeOffRules", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAllAgeOffRules");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<AgeOffRule> & _return) =
    &ProvenanceServiceAsyncProcessor::return_getAllAgeOffRules;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_getAllAgeOffRules;
  iface_->getAllAgeOffRules(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.limit,
      args.page);
}

void ProvenanceServiceAsyncProcessor::return_getAllAgeOffRules(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<AgeOffRule> & _return)
{
  ProvenanceService_getAllAgeOffRules_presult result;
  result.success = const_cast<std::vector<AgeOffRule> *>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAllAgeOffRules", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAllAgeOffRules");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAllAgeOffRules");
  }

  oprot->writeMessageBegin("getAllAgeOffRules", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAllAgeOffRules", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_getAllAgeOffRules(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAllAgeOffRules", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAllAgeOffRules");

  ProvenanceService_getAllAgeOffRules_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAllAgeOffRules");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getAllAgeOffRules", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAllAgeOffRules");
  }

  oprot->writeMessageBegin("getAllAgeOffRules", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAllAgeOffRules", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_countAgeOffRules(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_countAgeOffRules_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.countAgeOffRules", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.countAgeOffRules");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.countAgeOffRules");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.countAgeOffRules", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.countAgeOffRules");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return) =
    &ProvenanceServiceAsyncProcessor::return_countAgeOffRules;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_countAgeOffRules;
  iface_->countAgeOffRules(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken);
}

void ProvenanceServiceAsyncProcessor::return_countAgeOffRules(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return)
{
  ProvenanceService_countAgeOffRules_presult result;
  result.success = const_cast<int32_t*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.countAgeOffRules", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.countAgeOffRules");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.countAgeOffRules");
  }

  oprot->writeMessageBegin("countAgeOffRules", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.countAgeOffRules", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_countAgeOffRules(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.countAgeOffRules", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.countAgeOffRules");

  ProvenanceService_countAgeOffRules_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.countAgeOffRules");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("countAgeOffRules", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.countAgeOffRules");
  }

  oprot->writeMessageBegin("countAgeOffRules", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.countAgeOffRules", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_addDocument(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_addDocument_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocument", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocument");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.addDocument");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.addDocument", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addDocument");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int64_t& _return) =
    &ProvenanceServiceAsyncProcessor::return_addDocument;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_addDocument;
  iface_->addDocument(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.token,
      args.uri,
      args.parents,
      args.ageOffRules);
}

void ProvenanceServiceAsyncProcessor::return_addDocument(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int64_t& _return)
{
  ProvenanceService_addDocument_presult result;
  result.success = const_cast<int64_t*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocument", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocument");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addDocument");
  }

  oprot->writeMessageBegin("addDocument", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addDocument", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_addDocument(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocument", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocument");

  ProvenanceService_addDocument_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceDocumentExistsException &documentExists) {
    result.documentExists = documentExists;
    result.__isset.documentExists = true;
  }
  catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  }
  catch (ProvenanceParentDocumentNotFoundException &parentNotFound) {
    result.parentNotFound = parentNotFound;
    result.__isset.parentNotFound = true;
  }
  catch (ProvenanceCircularInheritanceNotAllowedException &circularInheritanceNotAllowed) {
    result.circularInheritanceNotAllowed = circularInheritanceNotAllowed;
    result.__isset.circularInheritanceNotAllowed = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addDocument");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("addDocument", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addDocument");
  }

  oprot->writeMessageBegin("addDocument", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addDocument", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_addDocuments(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_addDocuments_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocuments", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocuments");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.addDocuments");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.addDocuments", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addDocuments");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::map<std::string, AddDocumentResult> & _return) =
    &ProvenanceServiceAsyncProcessor::return_addDocuments;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_addDocuments;
  iface_->addDocuments(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.documents,
      args.ageOffRules);
}

void ProvenanceServiceAsyncProcessor::return_addDocuments(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::map<std::string, AddDocumentResult> & _return)
{
  ProvenanceService_addDocuments_presult result;
  result.success = const_cast<std::map<std::string, AddDocumentResult> *>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocuments", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocuments");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addDocuments");
  }

  oprot->writeMessageBegin("addDocuments", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addDocuments", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_addDocuments(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocuments", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocuments");

  ProvenanceService_addDocuments_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  }
  catch (ProvenanceExceedsMaxBatchSizeException &exceedsMaxSize) {
    result.exceedsMaxSize = exceedsMaxSize;
    result.__isset.exceedsMaxSize = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addDocuments");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("addDocuments", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addDocuments");
  }

  oprot->writeMessageBegin("addDocuments", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addDocuments", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_getAddDocumentsMaxSize(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_getAddDocumentsMaxSize_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAddDocumentsMaxSize", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAddDocumentsMaxSize");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.getAddDocumentsMaxSize");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.getAddDocumentsMaxSize", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAddDocumentsMaxSize");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return) =
    &ProvenanceServiceAsyncProcessor::return_getAddDocumentsMaxSize;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_getAddDocumentsMaxSize;
  iface_->getAddDocumentsMaxSize(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken);
}

void ProvenanceServiceAsyncProcessor::return_getAddDocumentsMaxSize(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const int32_t& _return)
{
  ProvenanceService_getAddDocumentsMaxSize_presult result;
  result.success = const_cast<int32_t*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAddDocumentsMaxSize", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAddDocumentsMaxSize");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAddDocumentsMaxSize");
  }

  oprot->writeMessageBegin("getAddDocumentsMaxSize", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAddDocumentsMaxSize", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_getAddDocumentsMaxSize(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAddDocumentsMaxSize", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAddDocumentsMaxSize");

  ProvenanceService_getAddDocumentsMaxSize_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAddDocumentsMaxSize");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getAddDocumentsMaxSize", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAddDocumentsMaxSize");
  }

  oprot->writeMessageBegin("getAddDocumentsMaxSize", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAddDocumentsMaxSize", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_startAgeOffEvent(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_startAgeOffEvent_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.startAgeOffEvent", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.startAgeOffEvent");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.startAgeOffEvent");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.startAgeOffEvent", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.startAgeOffEvent");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const AgeOffInitiationResult& _return) =
    &ProvenanceServiceAsyncProcessor::return_startAgeOffEvent;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_startAgeOffEvent;
  iface_->startAgeOffEvent(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.ruleId,
      args.effectiveTime);
}

void ProvenanceServiceAsyncProcessor::return_startAgeOffEvent(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const AgeOffInitiationResult& _return)
{
  ProvenanceService_startAgeOffEvent_presult result;
  result.success = const_cast<AgeOffInitiationResult*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.startAgeOffEvent", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.startAgeOffEvent");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.startAgeOffEvent");
  }

  oprot->writeMessageBegin("startAgeOffEvent", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.startAgeOffEvent", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_startAgeOffEvent(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.startAgeOffEvent", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.startAgeOffEvent");

  ProvenanceService_startAgeOffEvent_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.startAgeOffEvent");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("startAgeOffEvent", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.startAgeOffEvent");
  }

  oprot->writeMessageBegin("startAgeOffEvent", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.startAgeOffEvent", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_markDocumentAsAged(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_markDocumentAsAged_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.markDocumentAsAged", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.markDocumentAsAged");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.markDocumentAsAged");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.markDocumentAsAged", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.markDocumentAsAged");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx) =
    &ProvenanceServiceAsyncProcessor::return_markDocumentAsAged;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_markDocumentAsAged;
  iface_->markDocumentAsAged(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.agedDocumentIds);
}

void ProvenanceServiceAsyncProcessor::return_markDocumentAsAged(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx)
{
  ProvenanceService_markDocumentAsAged_presult result;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.markDocumentAsAged", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.markDocumentAsAged");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.markDocumentAsAged");
  }

  oprot->writeMessageBegin("markDocumentAsAged", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.markDocumentAsAged", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_markDocumentAsAged(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.markDocumentAsAged", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.markDocumentAsAged");

  ProvenanceService_markDocumentAsAged_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceDocumentNotFoundException &documentNotFound) {
    result.documentNotFound = documentNotFound;
    result.__isset.documentNotFound = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.markDocumentAsAged");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("markDocumentAsAged", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.markDocumentAsAged");
  }

  oprot->writeMessageBegin("markDocumentAsAged", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.markDocumentAsAged", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_getDocumentInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_getDocumentInfo_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentInfo", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentInfo");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.getDocumentInfo");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.getDocumentInfo", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentInfo");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const DocumentInfo& _return) =
    &ProvenanceServiceAsyncProcessor::return_getDocumentInfo;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_getDocumentInfo;
  iface_->getDocumentInfo(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.id,
      args.uri);
}

void ProvenanceServiceAsyncProcessor::return_getDocumentInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const DocumentInfo& _return)
{
  ProvenanceService_getDocumentInfo_presult result;
  result.success = const_cast<DocumentInfo*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentInfo", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentInfo");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentInfo");
  }

  oprot->writeMessageBegin("getDocumentInfo", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentInfo", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_getDocumentInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentInfo", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentInfo");

  ProvenanceService_getDocumentInfo_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceDocumentNotFoundException &docNotFound) {
    result.docNotFound = docNotFound;
    result.__isset.docNotFound = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentInfo");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDocumentInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentInfo");
  }

  oprot->writeMessageBegin("getDocumentInfo", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentInfo", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_getDocumentAncestors(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_getDocumentAncestors_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentAncestors", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentAncestors");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.getDocumentAncestors");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.getDocumentAncestors", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentAncestors");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const DerivedResult& _return) =
    &ProvenanceServiceAsyncProcessor::return_getDocumentAncestors;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_getDocumentAncestors;
  iface_->getDocumentAncestors(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.uris);
}

void ProvenanceServiceAsyncProcessor::return_getDocumentAncestors(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const DerivedResult& _return)
{
  ProvenanceService_getDocumentAncestors_presult result;
  result.success = const_cast<DerivedResult*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentAncestors", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentAncestors");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentAncestors");
  }

  oprot->writeMessageBegin("getDocumentAncestors", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentAncestors", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_getDocumentAncestors(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentAncestors", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentAncestors");

  ProvenanceService_getDocumentAncestors_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentAncestors");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDocumentAncestors", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentAncestors");
  }

  oprot->writeMessageBegin("getDocumentAncestors", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentAncestors", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_getDocumentDescendants(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_getDocumentDescendants_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentDescendants", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentDescendants");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.getDocumentDescendants");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.getDocumentDescendants", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentDescendants");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const DerivedResult& _return) =
    &ProvenanceServiceAsyncProcessor::return_getDocumentDescendants;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_getDocumentDescendants;
  iface_->getDocumentDescendants(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.uris);
}

void ProvenanceServiceAsyncProcessor::return_getDocumentDescendants(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const DerivedResult& _return)
{
  ProvenanceService_getDocumentDescendants_presult result;
  result.success = const_cast<DerivedResult*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentDescendants", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentDescendants");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentDescendants");
  }

  oprot->writeMessageBegin("getDocumentDescendants", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentDescendants", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_getDocumentDescendants(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentDescendants", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentDescendants");

  ProvenanceService_getDocumentDescendants_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentDescendants");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDocumentDescendants", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentDescendants");
  }

  oprot->writeMessageBegin("getDocumentDescendants", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentDescendants", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_markDocumentForPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_markDocumentForPurge_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.markDocumentForPurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.markDocumentForPurge");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.markDocumentForPurge");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.markDocumentForPurge", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.markDocumentForPurge");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeInitiationResult& _return) =
    &ProvenanceServiceAsyncProcessor::return_markDocumentForPurge;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_markDocumentForPurge;
  iface_->markDocumentForPurge(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.uris,
      args.name,
      args.description);
}

void ProvenanceServiceAsyncProcessor::return_markDocumentForPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeInitiationResult& _return)
{
  ProvenanceService_markDocumentForPurge_presult result;
  result.success = const_cast<PurgeInitiationResult*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.markDocumentForPurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.markDocumentForPurge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.markDocumentForPurge");
  }

  oprot->writeMessageBegin("markDocumentForPurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.markDocumentForPurge", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_markDocumentForPurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.markDocumentForPurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.markDocumentForPurge");

  ProvenanceService_markDocumentForPurge_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.markDocumentForPurge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("markDocumentForPurge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.markDocumentForPurge");
  }

  oprot->writeMessageBegin("markDocumentForPurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.markDocumentForPurge", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_getDocumentUriFromId(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_getDocumentUriFromId_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentUriFromId", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentUriFromId");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.getDocumentUriFromId");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.getDocumentUriFromId", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentUriFromId");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PositionsToUris& _return) =
    &ProvenanceServiceAsyncProcessor::return_getDocumentUriFromId;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_getDocumentUriFromId;
  iface_->getDocumentUriFromId(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.positionsList);
}

void ProvenanceServiceAsyncProcessor::return_getDocumentUriFromId(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PositionsToUris& _return)
{
  ProvenanceService_getDocumentUriFromId_presult result;
  result.success = const_cast<PositionsToUris*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentUriFromId", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentUriFromId");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentUriFromId");
  }

  oprot->writeMessageBegin("getDocumentUriFromId", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentUriFromId", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_getDocumentUriFromId(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentUriFromId", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentUriFromId");

  ProvenanceService_getDocumentUriFromId_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentUriFromId");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDocumentUriFromId", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentUriFromId");
  }

  oprot->writeMessageBegin("getDocumentUriFromId", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentUriFromId", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_getDocumentConvertedUrisFromIds(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_getDocumentConvertedUrisFromIds_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentConvertedUrisFromIds", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentConvertedUrisFromIds");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ConversionResult& _return) =
    &ProvenanceServiceAsyncProcessor::return_getDocumentConvertedUrisFromIds;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_getDocumentConvertedUrisFromIds;
  iface_->getDocumentConvertedUrisFromIds(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.ids);
}

void ProvenanceServiceAsyncProcessor::return_getDocumentConvertedUrisFromIds(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ConversionResult& _return)
{
  ProvenanceService_getDocumentConvertedUrisFromIds_presult result;
  result.success = const_cast<ConversionResult*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentConvertedUrisFromIds", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentConvertedUrisFromIds");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds");
  }

  oprot->writeMessageBegin("getDocumentConvertedUrisFromIds", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_getDocumentConvertedUrisFromIds(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentConvertedUrisFromIds", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentConvertedUrisFromIds");

  ProvenanceService_getDocumentConvertedUrisFromIds_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDocumentConvertedUrisFromIds", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds");
  }

  oprot->writeMessageBegin("getDocumentConvertedUrisFromIds", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentConvertedUrisFromIds", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_getDocumentConvertedUrisFromUris(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_getDocumentConvertedUrisFromUris_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentConvertedUrisFromUris", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentConvertedUrisFromUris");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ConversionResult& _return) =
    &ProvenanceServiceAsyncProcessor::return_getDocumentConvertedUrisFromUris;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_getDocumentConvertedUrisFromUris;
  iface_->getDocumentConvertedUrisFromUris(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.uris);
}

void ProvenanceServiceAsyncProcessor::return_getDocumentConvertedUrisFromUris(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ConversionResult& _return)
{
  ProvenanceService_getDocumentConvertedUrisFromUris_presult result;
  result.success = const_cast<ConversionResult*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentConvertedUrisFromUris", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentConvertedUrisFromUris");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris");
  }

  oprot->writeMessageBegin("getDocumentConvertedUrisFromUris", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_getDocumentConvertedUrisFromUris(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getDocumentConvertedUrisFromUris", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getDocumentConvertedUrisFromUris");

  ProvenanceService_getDocumentConvertedUrisFromUris_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDocumentConvertedUrisFromUris", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris");
  }

  oprot->writeMessageBegin("getDocumentConvertedUrisFromUris", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getDocumentConvertedUrisFromUris", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_getPurgeInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_getPurgeInfo_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getPurgeInfo", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getPurgeInfo");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.getPurgeInfo");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.getPurgeInfo", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getPurgeInfo");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeInfo& _return) =
    &ProvenanceServiceAsyncProcessor::return_getPurgeInfo;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_getPurgeInfo;
  iface_->getPurgeInfo(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.purgeId);
}

void ProvenanceServiceAsyncProcessor::return_getPurgeInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const PurgeInfo& _return)
{
  ProvenanceService_getPurgeInfo_presult result;
  result.success = const_cast<PurgeInfo*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getPurgeInfo", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getPurgeInfo");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getPurgeInfo");
  }

  oprot->writeMessageBegin("getPurgeInfo", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getPurgeInfo", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_getPurgeInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getPurgeInfo", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getPurgeInfo");

  ProvenanceService_getPurgeInfo_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenancePurgeIdNotFoundException &purgeNotFound) {
    result.purgeNotFound = purgeNotFound;
    result.__isset.purgeNotFound = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getPurgeInfo");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getPurgeInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getPurgeInfo");
  }

  oprot->writeMessageBegin("getPurgeInfo", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getPurgeInfo", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_getAllPurgeIds(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_getAllPurgeIds_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAllPurgeIds", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAllPurgeIds");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.getAllPurgeIds");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.getAllPurgeIds", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAllPurgeIds");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<int64_t> & _return) =
    &ProvenanceServiceAsyncProcessor::return_getAllPurgeIds;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_getAllPurgeIds;
  iface_->getAllPurgeIds(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken);
}

void ProvenanceServiceAsyncProcessor::return_getAllPurgeIds(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const std::vector<int64_t> & _return)
{
  ProvenanceService_getAllPurgeIds_presult result;
  result.success = const_cast<std::vector<int64_t> *>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAllPurgeIds", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAllPurgeIds");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAllPurgeIds");
  }

  oprot->writeMessageBegin("getAllPurgeIds", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAllPurgeIds", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_getAllPurgeIds(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.getAllPurgeIds", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.getAllPurgeIds");

  ProvenanceService_getAllPurgeIds_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.getAllPurgeIds");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getAllPurgeIds", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.getAllPurgeIds");
  }

  oprot->writeMessageBegin("getAllPurgeIds", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.getAllPurgeIds", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_updatePurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_updatePurge_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.updatePurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.updatePurge");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.updatePurge");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.updatePurge", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.updatePurge");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx) =
    &ProvenanceServiceAsyncProcessor::return_updatePurge;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_updatePurge;
  iface_->updatePurge(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.purgeId,
      args.completelyPurged,
      args.note,
      args.resolved);
}

void ProvenanceServiceAsyncProcessor::return_updatePurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx)
{
  ProvenanceService_updatePurge_presult result;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.updatePurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.updatePurge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.updatePurge");
  }

  oprot->writeMessageBegin("updatePurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.updatePurge", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_updatePurge(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.updatePurge", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.updatePurge");

  ProvenanceService_updatePurge_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenancePurgeIdNotFoundException &purgeNotFound) {
    result.purgeNotFound = purgeNotFound;
    result.__isset.purgeNotFound = true;
  }
  catch (ProvenanceDocumentNotInPurgeException &documentNotInPurge) {
    result.documentNotInPurge = documentNotInPurge;
    result.__isset.documentNotInPurge = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.updatePurge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("updatePurge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.updatePurge");
  }

  oprot->writeMessageBegin("updatePurge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.updatePurge", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_removeDocumentAgeOffRuleInheritance(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_removeDocumentAgeOffRuleInheritance_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.removeDocumentAgeOffRuleInheritance", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx) =
    &ProvenanceServiceAsyncProcessor::return_removeDocumentAgeOffRuleInheritance;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_removeDocumentAgeOffRuleInheritance;
  iface_->removeDocumentAgeOffRuleInheritance(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.documentId,
      args.documentUri,
      args.parentId,
      args.parentUri);
}

void ProvenanceServiceAsyncProcessor::return_removeDocumentAgeOffRuleInheritance(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx)
{
  ProvenanceService_removeDocumentAgeOffRuleInheritance_presult result;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.removeDocumentAgeOffRuleInheritance", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance");
  }

  oprot->writeMessageBegin("removeDocumentAgeOffRuleInheritance", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_removeDocumentAgeOffRuleInheritance(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.removeDocumentAgeOffRuleInheritance", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance");

  ProvenanceService_removeDocumentAgeOffRuleInheritance_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceDocumentNotFoundException &documentNotFound) {
    result.documentNotFound = documentNotFound;
    result.__isset.documentNotFound = true;
  }
  catch (ProvenanceAlreadyAgedException &alreadyAged) {
    result.alreadyAged = alreadyAged;
    result.__isset.alreadyAged = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("removeDocumentAgeOffRuleInheritance", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance");
  }

  oprot->writeMessageBegin("removeDocumentAgeOffRuleInheritance", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.removeDocumentAgeOffRuleInheritance", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_removeDocumentExplicitAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_removeDocumentExplicitAgeOffRule_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.removeDocumentExplicitAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx) =
    &ProvenanceServiceAsyncProcessor::return_removeDocumentExplicitAgeOffRule;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_removeDocumentExplicitAgeOffRule;
  iface_->removeDocumentExplicitAgeOffRule(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.documentId,
      args.documentUri,
      args.ageOffRuleId);
}

void ProvenanceServiceAsyncProcessor::return_removeDocumentExplicitAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx)
{
  ProvenanceService_removeDocumentExplicitAgeOffRule_presult result;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.removeDocumentExplicitAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule");
  }

  oprot->writeMessageBegin("removeDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_removeDocumentExplicitAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.removeDocumentExplicitAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule");

  ProvenanceService_removeDocumentExplicitAgeOffRule_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceDocumentNotFoundException &documentNotFound) {
    result.documentNotFound = documentNotFound;
    result.__isset.documentNotFound = true;
  }
  catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  }
  catch (ProvenanceAlreadyAgedException &alreadyAged) {
    result.alreadyAged = alreadyAged;
    result.__isset.alreadyAged = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("removeDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule");
  }

  oprot->writeMessageBegin("removeDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.removeDocumentExplicitAgeOffRule", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_addDocumentExplicitAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_addDocumentExplicitAgeOffRule_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocumentExplicitAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocumentExplicitAgeOffRule");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx) =
    &ProvenanceServiceAsyncProcessor::return_addDocumentExplicitAgeOffRule;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_addDocumentExplicitAgeOffRule;
  iface_->addDocumentExplicitAgeOffRule(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.documentId,
      args.documentUri,
      args.ageOffMapping);
}

void ProvenanceServiceAsyncProcessor::return_addDocumentExplicitAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx)
{
  ProvenanceService_addDocumentExplicitAgeOffRule_presult result;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocumentExplicitAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocumentExplicitAgeOffRule");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule");
  }

  oprot->writeMessageBegin("addDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_addDocumentExplicitAgeOffRule(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocumentExplicitAgeOffRule", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocumentExplicitAgeOffRule");

  ProvenanceService_addDocumentExplicitAgeOffRule_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceDocumentNotFoundException &documentNotFound) {
    result.documentNotFound = documentNotFound;
    result.__isset.documentNotFound = true;
  }
  catch (ProvenanceAgeOffRuleNotFoundException &ruleNotFound) {
    result.ruleNotFound = ruleNotFound;
    result.__isset.ruleNotFound = true;
  }
  catch (ProvenanceAlreadyAgedException &alreadyAged) {
    result.alreadyAged = alreadyAged;
    result.__isset.alreadyAged = true;
  }
  catch (ProvenanceAgeOffExistsException &edgeExists) {
    result.edgeExists = edgeExists;
    result.__isset.edgeExists = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("addDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule");
  }

  oprot->writeMessageBegin("addDocumentExplicitAgeOffRule", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addDocumentExplicitAgeOffRule", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_addDocumentInheritanceInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_addDocumentInheritanceInfo_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocumentInheritanceInfo", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocumentInheritanceInfo");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.addDocumentInheritanceInfo");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.addDocumentInheritanceInfo", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addDocumentInheritanceInfo");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx) =
    &ProvenanceServiceAsyncProcessor::return_addDocumentInheritanceInfo;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_addDocumentInheritanceInfo;
  iface_->addDocumentInheritanceInfo(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.documentId,
      args.documentUri,
      args.inheritanceInfo);
}

void ProvenanceServiceAsyncProcessor::return_addDocumentInheritanceInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx)
{
  ProvenanceService_addDocumentInheritanceInfo_presult result;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocumentInheritanceInfo", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocumentInheritanceInfo");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addDocumentInheritanceInfo");
  }

  oprot->writeMessageBegin("addDocumentInheritanceInfo", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addDocumentInheritanceInfo", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_addDocumentInheritanceInfo(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.addDocumentInheritanceInfo", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.addDocumentInheritanceInfo");

  ProvenanceService_addDocumentInheritanceInfo_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
  catch (ProvenanceDocumentNotFoundException &documentNotFound) {
    result.documentNotFound = documentNotFound;
    result.__isset.documentNotFound = true;
  }
  catch (ProvenanceCircularInheritanceNotAllowedException &circularInheritance) {
    result.circularInheritance = circularInheritance;
    result.__isset.circularInheritance = true;
  }
  catch (ProvenanceAlreadyAgedException &alreadyAged) {
    result.alreadyAged = alreadyAged;
    result.__isset.alreadyAged = true;
  }
  catch (ProvenanceAgeOffInheritanceExistsException &inheritanceExists) {
    result.inheritanceExists = inheritanceExists;
    result.__isset.inheritanceExists = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.addDocumentInheritanceInfo");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("addDocumentInheritanceInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.addDocumentInheritanceInfo");
  }

  oprot->writeMessageBegin("addDocumentInheritanceInfo", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.addDocumentInheritanceInfo", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_recordObjectAccess(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_recordObjectAccess_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.recordObjectAccess", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.recordObjectAccess");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.recordObjectAccess");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.recordObjectAccess", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.recordObjectAccess");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx) =
    &ProvenanceServiceAsyncProcessor::return_recordObjectAccess;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_recordObjectAccess;
  iface_->recordObjectAccess(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.documentUri,
      args.accessType);
}

void ProvenanceServiceAsyncProcessor::return_recordObjectAccess(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx)
{
  ProvenanceService_recordObjectAccess_presult result;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.recordObjectAccess", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.recordObjectAccess");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.recordObjectAccess");
  }

  oprot->writeMessageBegin("recordObjectAccess", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.recordObjectAccess", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_recordObjectAccess(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.recordObjectAccess", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.recordObjectAccess");

  ProvenanceService_recordObjectAccess_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.recordObjectAccess");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recordObjectAccess", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.recordObjectAccess");
  }

  oprot->writeMessageBegin("recordObjectAccess", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.recordObjectAccess", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_fetchUsersDocuments(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_fetchUsersDocuments_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.fetchUsersDocuments", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.fetchUsersDocuments");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.fetchUsersDocuments");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.fetchUsersDocuments", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.fetchUsersDocuments");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResultsAndContinuation& _return) =
    &ProvenanceServiceAsyncProcessor::return_fetchUsersDocuments;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_fetchUsersDocuments;
  iface_->fetchUsersDocuments(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.userPrincipal,
      args.startDateTime,
      args.stopDateTime,
      args.numToFetch,
      args.continuationPoint);
}

void ProvenanceServiceAsyncProcessor::return_fetchUsersDocuments(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResultsAndContinuation& _return)
{
  ProvenanceService_fetchUsersDocuments_presult result;
  result.success = const_cast<ResultsAndContinuation*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.fetchUsersDocuments", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.fetchUsersDocuments");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.fetchUsersDocuments");
  }

  oprot->writeMessageBegin("fetchUsersDocuments", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.fetchUsersDocuments", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_fetchUsersDocuments(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.fetchUsersDocuments", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.fetchUsersDocuments");

  ProvenanceService_fetchUsersDocuments_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.fetchUsersDocuments");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("fetchUsersDocuments", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.fetchUsersDocuments");
  }

  oprot->writeMessageBegin("fetchUsersDocuments", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.fetchUsersDocuments", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::process_fetchDocumentUsers(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)
{
  ProvenanceService_fetchDocumentUsers_args args;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.fetchDocumentUsers", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.fetchDocumentUsers");

  try {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->preRead(ctx, "ProvenanceService.fetchDocumentUsers");
    }
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->postRead(ctx, "ProvenanceService.fetchDocumentUsers", bytes);
    }
  }
  catch (const std::exception& exn) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.fetchDocumentUsers");
    }
    return cob(false);
  }
  freer.unregister();
  void (ProvenanceServiceAsyncProcessor::*return_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResultsAndContinuation& _return) =
    &ProvenanceServiceAsyncProcessor::return_fetchDocumentUsers;
  void (ProvenanceServiceAsyncProcessor::*throw_fn)(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw) =
    &ProvenanceServiceAsyncProcessor::throw_fetchDocumentUsers;
  iface_->fetchDocumentUsers(
      tcxx::bind(return_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      tcxx::bind(throw_fn, this, cob, seqid, oprot, ctx, tcxx::placeholders::_1),
      args.securityToken,
      args.documentUri,
      args.startDateTime,
      args.stopDateTime,
      args.numToFetch,
      args.continuationPoint);
}

void ProvenanceServiceAsyncProcessor::return_fetchDocumentUsers(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResultsAndContinuation& _return)
{
  ProvenanceService_fetchDocumentUsers_presult result;
  result.success = const_cast<ResultsAndContinuation*>(&_return);
  result.__isset.success = true;

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.fetchDocumentUsers", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.fetchDocumentUsers");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.fetchDocumentUsers");
  }

  oprot->writeMessageBegin("fetchDocumentUsers", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.fetchDocumentUsers", bytes);
  }
  return cob(true);
}

void ProvenanceServiceAsyncProcessor::throw_fetchDocumentUsers(tcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw)
{

  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("ProvenanceService.fetchDocumentUsers", NULL);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ProvenanceService.fetchDocumentUsers");

  ProvenanceService_fetchDocumentUsers_result result;

  try {
    _throw->throw_it();
    return cob(false);
  }  catch ( ::ezbake::base::thrift::EzSecurityTokenException &security) {
    result.security = security;
    result.__isset.security = true;
  }
 catch (std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "ProvenanceService.fetchDocumentUsers");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("fetchDocumentUsers", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "ProvenanceService.fetchDocumentUsers");
  }

  oprot->writeMessageBegin("fetchDocumentUsers", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "ProvenanceService.fetchDocumentUsers", bytes);
  }
  return cob(true);
}

::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > ProvenanceServiceAsyncProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< ProvenanceServiceCobSvIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< ProvenanceServiceCobSvIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > processor(new ProvenanceServiceAsyncProcessor(handler));
  return processor;
}


