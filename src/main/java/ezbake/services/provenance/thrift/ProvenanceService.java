/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.provenance.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProvenanceService {

  public interface Iface extends ezbake.base.thrift.EzBakeBaseService.Iface {

    public long addAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name, long retentionDurationSeconds, int maximumExecutionPeriod) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNameExistsException, ProvenanceIllegalAgeOffDurationSecondsException, ProvenanceIllegalAgeOffRuleNameException, ProvenanceIllegalMaximumExecutionPeriodException, org.apache.thrift.TException;

    public AgeOffRule getAgeOffRuleById(ezbake.base.thrift.EzSecurityToken securityToken, long ruleId) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, org.apache.thrift.TException;

    public AgeOffRule getAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, org.apache.thrift.TException;

    public void updateAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name, long retentionDurationSeconds) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, ProvenanceIllegalAgeOffDurationSecondsException, ProvenanceIllegalAgeOffRuleNameException, org.apache.thrift.TException;

    public List<AgeOffRule> getAllAgeOffRules(ezbake.base.thrift.EzSecurityToken securityToken, int limit, int page) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public int countAgeOffRules(ezbake.base.thrift.EzSecurityToken securityToken) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public long addDocument(ezbake.base.thrift.EzSecurityToken token, String uri, List<InheritanceInfo> parents, List<AgeOffMapping> ageOffRules) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentExistsException, ProvenanceAgeOffRuleNotFoundException, ProvenanceParentDocumentNotFoundException, ProvenanceCircularInheritanceNotAllowedException, org.apache.thrift.TException;

    public Map<String,AddDocumentResult> addDocuments(ezbake.base.thrift.EzSecurityToken securityToken, Set<AddDocumentEntry> documents, Set<AgeOffMapping> ageOffRules) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, ProvenanceExceedsMaxBatchSizeException, org.apache.thrift.TException;

    public int getAddDocumentsMaxSize(ezbake.base.thrift.EzSecurityToken securityToken) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public AgeOffInitiationResult startAgeOffEvent(ezbake.base.thrift.EzSecurityToken securityToken, long ruleId, ezbake.base.thrift.DateTime effectiveTime) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, org.apache.thrift.TException;

    public void markDocumentAsAged(ezbake.base.thrift.EzSecurityToken securityToken, Set<Long> agedDocumentIds) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, org.apache.thrift.TException;

    public DocumentInfo getDocumentInfo(ezbake.base.thrift.EzSecurityToken securityToken, long id, String uri) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, org.apache.thrift.TException;

    public DerivedResult getDocumentAncestors(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public DerivedResult getDocumentDescendants(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public PurgeInitiationResult markDocumentForPurge(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris, String name, String description) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public PositionsToUris getDocumentUriFromId(ezbake.base.thrift.EzSecurityToken securityToken, List<Long> positionsList) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public ConversionResult getDocumentConvertedUrisFromIds(ezbake.base.thrift.EzSecurityToken securityToken, Set<Long> ids) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public ConversionResult getDocumentConvertedUrisFromUris(ezbake.base.thrift.EzSecurityToken securityToken, Set<String> uris) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public PurgeInfo getPurgeInfo(ezbake.base.thrift.EzSecurityToken securityToken, long purgeId) throws ezbake.base.thrift.EzSecurityTokenException, ProvenancePurgeIdNotFoundException, org.apache.thrift.TException;

    public List<Long> getAllPurgeIds(ezbake.base.thrift.EzSecurityToken securityToken) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public void updatePurge(ezbake.base.thrift.EzSecurityToken securityToken, long purgeId, Set<Long> completelyPurged, String note, boolean resolved) throws ezbake.base.thrift.EzSecurityTokenException, ProvenancePurgeIdNotFoundException, ProvenanceDocumentNotInPurgeException, org.apache.thrift.TException;

    public void removeDocumentAgeOffRuleInheritance(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, long parentId, String parentUri) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceAlreadyAgedException, org.apache.thrift.TException;

    public void removeDocumentExplicitAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, long ageOffRuleId) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceAgeOffRuleNotFoundException, ProvenanceAlreadyAgedException, org.apache.thrift.TException;

    public void addDocumentExplicitAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, AgeOffMapping ageOffMapping) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceAgeOffRuleNotFoundException, ProvenanceAlreadyAgedException, ProvenanceAgeOffExistsException, org.apache.thrift.TException;

    public void addDocumentInheritanceInfo(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, InheritanceInfo inheritanceInfo) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceCircularInheritanceNotAllowedException, ProvenanceAlreadyAgedException, ProvenanceAgeOffInheritanceExistsException, org.apache.thrift.TException;

    public void recordObjectAccess(ezbake.base.thrift.EzSecurityToken securityToken, String documentUri, ObjectAccessType accessType) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public ResultsAndContinuation fetchUsersDocuments(ezbake.base.thrift.EzSecurityToken securityToken, String userPrincipal, ezbake.base.thrift.DateTime startDateTime, ezbake.base.thrift.DateTime stopDateTime, int numToFetch, AccumuloContinuationPoint continuationPoint) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

    public ResultsAndContinuation fetchDocumentUsers(ezbake.base.thrift.EzSecurityToken securityToken, String documentUri, ezbake.base.thrift.DateTime startDateTime, ezbake.base.thrift.DateTime stopDateTime, int numToFetch, AccumuloContinuationPoint continuationPoint) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ezbake.base.thrift.EzBakeBaseService .AsyncIface {

    public void addAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name, long retentionDurationSeconds, int maximumExecutionPeriod, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAgeOffRuleById(ezbake.base.thrift.EzSecurityToken securityToken, long ruleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name, long retentionDurationSeconds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllAgeOffRules(ezbake.base.thrift.EzSecurityToken securityToken, int limit, int page, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countAgeOffRules(ezbake.base.thrift.EzSecurityToken securityToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addDocument(ezbake.base.thrift.EzSecurityToken token, String uri, List<InheritanceInfo> parents, List<AgeOffMapping> ageOffRules, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addDocuments(ezbake.base.thrift.EzSecurityToken securityToken, Set<AddDocumentEntry> documents, Set<AgeOffMapping> ageOffRules, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAddDocumentsMaxSize(ezbake.base.thrift.EzSecurityToken securityToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void startAgeOffEvent(ezbake.base.thrift.EzSecurityToken securityToken, long ruleId, ezbake.base.thrift.DateTime effectiveTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void markDocumentAsAged(ezbake.base.thrift.EzSecurityToken securityToken, Set<Long> agedDocumentIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDocumentInfo(ezbake.base.thrift.EzSecurityToken securityToken, long id, String uri, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDocumentAncestors(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDocumentDescendants(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void markDocumentForPurge(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris, String name, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDocumentUriFromId(ezbake.base.thrift.EzSecurityToken securityToken, List<Long> positionsList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDocumentConvertedUrisFromIds(ezbake.base.thrift.EzSecurityToken securityToken, Set<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDocumentConvertedUrisFromUris(ezbake.base.thrift.EzSecurityToken securityToken, Set<String> uris, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPurgeInfo(ezbake.base.thrift.EzSecurityToken securityToken, long purgeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllPurgeIds(ezbake.base.thrift.EzSecurityToken securityToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updatePurge(ezbake.base.thrift.EzSecurityToken securityToken, long purgeId, Set<Long> completelyPurged, String note, boolean resolved, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeDocumentAgeOffRuleInheritance(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, long parentId, String parentUri, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeDocumentExplicitAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, long ageOffRuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addDocumentExplicitAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, AgeOffMapping ageOffMapping, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addDocumentInheritanceInfo(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, InheritanceInfo inheritanceInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void recordObjectAccess(ezbake.base.thrift.EzSecurityToken securityToken, String documentUri, ObjectAccessType accessType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void fetchUsersDocuments(ezbake.base.thrift.EzSecurityToken securityToken, String userPrincipal, ezbake.base.thrift.DateTime startDateTime, ezbake.base.thrift.DateTime stopDateTime, int numToFetch, AccumuloContinuationPoint continuationPoint, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void fetchDocumentUsers(ezbake.base.thrift.EzSecurityToken securityToken, String documentUri, ezbake.base.thrift.DateTime startDateTime, ezbake.base.thrift.DateTime stopDateTime, int numToFetch, AccumuloContinuationPoint continuationPoint, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ezbake.base.thrift.EzBakeBaseService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long addAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name, long retentionDurationSeconds, int maximumExecutionPeriod) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNameExistsException, ProvenanceIllegalAgeOffDurationSecondsException, ProvenanceIllegalAgeOffRuleNameException, ProvenanceIllegalMaximumExecutionPeriodException, org.apache.thrift.TException
    {
      send_addAgeOffRule(securityToken, name, retentionDurationSeconds, maximumExecutionPeriod);
      return recv_addAgeOffRule();
    }

    public void send_addAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name, long retentionDurationSeconds, int maximumExecutionPeriod) throws org.apache.thrift.TException
    {
      addAgeOffRule_args args = new addAgeOffRule_args();
      args.setSecurityToken(securityToken);
      args.setName(name);
      args.setRetentionDurationSeconds(retentionDurationSeconds);
      args.setMaximumExecutionPeriod(maximumExecutionPeriod);
      sendBase("addAgeOffRule", args);
    }

    public long recv_addAgeOffRule() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNameExistsException, ProvenanceIllegalAgeOffDurationSecondsException, ProvenanceIllegalAgeOffRuleNameException, ProvenanceIllegalMaximumExecutionPeriodException, org.apache.thrift.TException
    {
      addAgeOffRule_result result = new addAgeOffRule_result();
      receiveBase(result, "addAgeOffRule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.nameExists != null) {
        throw result.nameExists;
      }
      if (result.illegalAgeOffDurationSeconds != null) {
        throw result.illegalAgeOffDurationSeconds;
      }
      if (result.illegalAgeOffName != null) {
        throw result.illegalAgeOffName;
      }
      if (result.illegalMaxPeriod != null) {
        throw result.illegalMaxPeriod;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addAgeOffRule failed: unknown result");
    }

    public AgeOffRule getAgeOffRuleById(ezbake.base.thrift.EzSecurityToken securityToken, long ruleId) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, org.apache.thrift.TException
    {
      send_getAgeOffRuleById(securityToken, ruleId);
      return recv_getAgeOffRuleById();
    }

    public void send_getAgeOffRuleById(ezbake.base.thrift.EzSecurityToken securityToken, long ruleId) throws org.apache.thrift.TException
    {
      getAgeOffRuleById_args args = new getAgeOffRuleById_args();
      args.setSecurityToken(securityToken);
      args.setRuleId(ruleId);
      sendBase("getAgeOffRuleById", args);
    }

    public AgeOffRule recv_getAgeOffRuleById() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, org.apache.thrift.TException
    {
      getAgeOffRuleById_result result = new getAgeOffRuleById_result();
      receiveBase(result, "getAgeOffRuleById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.ruleNotFound != null) {
        throw result.ruleNotFound;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAgeOffRuleById failed: unknown result");
    }

    public AgeOffRule getAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, org.apache.thrift.TException
    {
      send_getAgeOffRule(securityToken, name);
      return recv_getAgeOffRule();
    }

    public void send_getAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name) throws org.apache.thrift.TException
    {
      getAgeOffRule_args args = new getAgeOffRule_args();
      args.setSecurityToken(securityToken);
      args.setName(name);
      sendBase("getAgeOffRule", args);
    }

    public AgeOffRule recv_getAgeOffRule() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, org.apache.thrift.TException
    {
      getAgeOffRule_result result = new getAgeOffRule_result();
      receiveBase(result, "getAgeOffRule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.ruleNotFound != null) {
        throw result.ruleNotFound;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAgeOffRule failed: unknown result");
    }

    public void updateAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name, long retentionDurationSeconds) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, ProvenanceIllegalAgeOffDurationSecondsException, ProvenanceIllegalAgeOffRuleNameException, org.apache.thrift.TException
    {
      send_updateAgeOffRule(securityToken, name, retentionDurationSeconds);
      recv_updateAgeOffRule();
    }

    public void send_updateAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name, long retentionDurationSeconds) throws org.apache.thrift.TException
    {
      updateAgeOffRule_args args = new updateAgeOffRule_args();
      args.setSecurityToken(securityToken);
      args.setName(name);
      args.setRetentionDurationSeconds(retentionDurationSeconds);
      sendBase("updateAgeOffRule", args);
    }

    public void recv_updateAgeOffRule() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, ProvenanceIllegalAgeOffDurationSecondsException, ProvenanceIllegalAgeOffRuleNameException, org.apache.thrift.TException
    {
      updateAgeOffRule_result result = new updateAgeOffRule_result();
      receiveBase(result, "updateAgeOffRule");
      if (result.security != null) {
        throw result.security;
      }
      if (result.ruleNotFound != null) {
        throw result.ruleNotFound;
      }
      if (result.illegalAgeOffDurationSeconds != null) {
        throw result.illegalAgeOffDurationSeconds;
      }
      if (result.illegalAgeOffName != null) {
        throw result.illegalAgeOffName;
      }
      return;
    }

    public List<AgeOffRule> getAllAgeOffRules(ezbake.base.thrift.EzSecurityToken securityToken, int limit, int page) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_getAllAgeOffRules(securityToken, limit, page);
      return recv_getAllAgeOffRules();
    }

    public void send_getAllAgeOffRules(ezbake.base.thrift.EzSecurityToken securityToken, int limit, int page) throws org.apache.thrift.TException
    {
      getAllAgeOffRules_args args = new getAllAgeOffRules_args();
      args.setSecurityToken(securityToken);
      args.setLimit(limit);
      args.setPage(page);
      sendBase("getAllAgeOffRules", args);
    }

    public List<AgeOffRule> recv_getAllAgeOffRules() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      getAllAgeOffRules_result result = new getAllAgeOffRules_result();
      receiveBase(result, "getAllAgeOffRules");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllAgeOffRules failed: unknown result");
    }

    public int countAgeOffRules(ezbake.base.thrift.EzSecurityToken securityToken) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_countAgeOffRules(securityToken);
      return recv_countAgeOffRules();
    }

    public void send_countAgeOffRules(ezbake.base.thrift.EzSecurityToken securityToken) throws org.apache.thrift.TException
    {
      countAgeOffRules_args args = new countAgeOffRules_args();
      args.setSecurityToken(securityToken);
      sendBase("countAgeOffRules", args);
    }

    public int recv_countAgeOffRules() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      countAgeOffRules_result result = new countAgeOffRules_result();
      receiveBase(result, "countAgeOffRules");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countAgeOffRules failed: unknown result");
    }

    public long addDocument(ezbake.base.thrift.EzSecurityToken token, String uri, List<InheritanceInfo> parents, List<AgeOffMapping> ageOffRules) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentExistsException, ProvenanceAgeOffRuleNotFoundException, ProvenanceParentDocumentNotFoundException, ProvenanceCircularInheritanceNotAllowedException, org.apache.thrift.TException
    {
      send_addDocument(token, uri, parents, ageOffRules);
      return recv_addDocument();
    }

    public void send_addDocument(ezbake.base.thrift.EzSecurityToken token, String uri, List<InheritanceInfo> parents, List<AgeOffMapping> ageOffRules) throws org.apache.thrift.TException
    {
      addDocument_args args = new addDocument_args();
      args.setToken(token);
      args.setUri(uri);
      args.setParents(parents);
      args.setAgeOffRules(ageOffRules);
      sendBase("addDocument", args);
    }

    public long recv_addDocument() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentExistsException, ProvenanceAgeOffRuleNotFoundException, ProvenanceParentDocumentNotFoundException, ProvenanceCircularInheritanceNotAllowedException, org.apache.thrift.TException
    {
      addDocument_result result = new addDocument_result();
      receiveBase(result, "addDocument");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.documentExists != null) {
        throw result.documentExists;
      }
      if (result.ruleNotFound != null) {
        throw result.ruleNotFound;
      }
      if (result.parentNotFound != null) {
        throw result.parentNotFound;
      }
      if (result.circularInheritanceNotAllowed != null) {
        throw result.circularInheritanceNotAllowed;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addDocument failed: unknown result");
    }

    public Map<String,AddDocumentResult> addDocuments(ezbake.base.thrift.EzSecurityToken securityToken, Set<AddDocumentEntry> documents, Set<AgeOffMapping> ageOffRules) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, ProvenanceExceedsMaxBatchSizeException, org.apache.thrift.TException
    {
      send_addDocuments(securityToken, documents, ageOffRules);
      return recv_addDocuments();
    }

    public void send_addDocuments(ezbake.base.thrift.EzSecurityToken securityToken, Set<AddDocumentEntry> documents, Set<AgeOffMapping> ageOffRules) throws org.apache.thrift.TException
    {
      addDocuments_args args = new addDocuments_args();
      args.setSecurityToken(securityToken);
      args.setDocuments(documents);
      args.setAgeOffRules(ageOffRules);
      sendBase("addDocuments", args);
    }

    public Map<String,AddDocumentResult> recv_addDocuments() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, ProvenanceExceedsMaxBatchSizeException, org.apache.thrift.TException
    {
      addDocuments_result result = new addDocuments_result();
      receiveBase(result, "addDocuments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.ruleNotFound != null) {
        throw result.ruleNotFound;
      }
      if (result.exceedsMaxSize != null) {
        throw result.exceedsMaxSize;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addDocuments failed: unknown result");
    }

    public int getAddDocumentsMaxSize(ezbake.base.thrift.EzSecurityToken securityToken) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_getAddDocumentsMaxSize(securityToken);
      return recv_getAddDocumentsMaxSize();
    }

    public void send_getAddDocumentsMaxSize(ezbake.base.thrift.EzSecurityToken securityToken) throws org.apache.thrift.TException
    {
      getAddDocumentsMaxSize_args args = new getAddDocumentsMaxSize_args();
      args.setSecurityToken(securityToken);
      sendBase("getAddDocumentsMaxSize", args);
    }

    public int recv_getAddDocumentsMaxSize() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      getAddDocumentsMaxSize_result result = new getAddDocumentsMaxSize_result();
      receiveBase(result, "getAddDocumentsMaxSize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAddDocumentsMaxSize failed: unknown result");
    }

    public AgeOffInitiationResult startAgeOffEvent(ezbake.base.thrift.EzSecurityToken securityToken, long ruleId, ezbake.base.thrift.DateTime effectiveTime) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, org.apache.thrift.TException
    {
      send_startAgeOffEvent(securityToken, ruleId, effectiveTime);
      return recv_startAgeOffEvent();
    }

    public void send_startAgeOffEvent(ezbake.base.thrift.EzSecurityToken securityToken, long ruleId, ezbake.base.thrift.DateTime effectiveTime) throws org.apache.thrift.TException
    {
      startAgeOffEvent_args args = new startAgeOffEvent_args();
      args.setSecurityToken(securityToken);
      args.setRuleId(ruleId);
      args.setEffectiveTime(effectiveTime);
      sendBase("startAgeOffEvent", args);
    }

    public AgeOffInitiationResult recv_startAgeOffEvent() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, org.apache.thrift.TException
    {
      startAgeOffEvent_result result = new startAgeOffEvent_result();
      receiveBase(result, "startAgeOffEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.ruleNotFound != null) {
        throw result.ruleNotFound;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startAgeOffEvent failed: unknown result");
    }

    public void markDocumentAsAged(ezbake.base.thrift.EzSecurityToken securityToken, Set<Long> agedDocumentIds) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, org.apache.thrift.TException
    {
      send_markDocumentAsAged(securityToken, agedDocumentIds);
      recv_markDocumentAsAged();
    }

    public void send_markDocumentAsAged(ezbake.base.thrift.EzSecurityToken securityToken, Set<Long> agedDocumentIds) throws org.apache.thrift.TException
    {
      markDocumentAsAged_args args = new markDocumentAsAged_args();
      args.setSecurityToken(securityToken);
      args.setAgedDocumentIds(agedDocumentIds);
      sendBase("markDocumentAsAged", args);
    }

    public void recv_markDocumentAsAged() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, org.apache.thrift.TException
    {
      markDocumentAsAged_result result = new markDocumentAsAged_result();
      receiveBase(result, "markDocumentAsAged");
      if (result.security != null) {
        throw result.security;
      }
      if (result.documentNotFound != null) {
        throw result.documentNotFound;
      }
      return;
    }

    public DocumentInfo getDocumentInfo(ezbake.base.thrift.EzSecurityToken securityToken, long id, String uri) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, org.apache.thrift.TException
    {
      send_getDocumentInfo(securityToken, id, uri);
      return recv_getDocumentInfo();
    }

    public void send_getDocumentInfo(ezbake.base.thrift.EzSecurityToken securityToken, long id, String uri) throws org.apache.thrift.TException
    {
      getDocumentInfo_args args = new getDocumentInfo_args();
      args.setSecurityToken(securityToken);
      args.setId(id);
      args.setUri(uri);
      sendBase("getDocumentInfo", args);
    }

    public DocumentInfo recv_getDocumentInfo() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, org.apache.thrift.TException
    {
      getDocumentInfo_result result = new getDocumentInfo_result();
      receiveBase(result, "getDocumentInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.docNotFound != null) {
        throw result.docNotFound;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDocumentInfo failed: unknown result");
    }

    public DerivedResult getDocumentAncestors(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_getDocumentAncestors(securityToken, uris);
      return recv_getDocumentAncestors();
    }

    public void send_getDocumentAncestors(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris) throws org.apache.thrift.TException
    {
      getDocumentAncestors_args args = new getDocumentAncestors_args();
      args.setSecurityToken(securityToken);
      args.setUris(uris);
      sendBase("getDocumentAncestors", args);
    }

    public DerivedResult recv_getDocumentAncestors() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      getDocumentAncestors_result result = new getDocumentAncestors_result();
      receiveBase(result, "getDocumentAncestors");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDocumentAncestors failed: unknown result");
    }

    public DerivedResult getDocumentDescendants(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_getDocumentDescendants(securityToken, uris);
      return recv_getDocumentDescendants();
    }

    public void send_getDocumentDescendants(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris) throws org.apache.thrift.TException
    {
      getDocumentDescendants_args args = new getDocumentDescendants_args();
      args.setSecurityToken(securityToken);
      args.setUris(uris);
      sendBase("getDocumentDescendants", args);
    }

    public DerivedResult recv_getDocumentDescendants() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      getDocumentDescendants_result result = new getDocumentDescendants_result();
      receiveBase(result, "getDocumentDescendants");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDocumentDescendants failed: unknown result");
    }

    public PurgeInitiationResult markDocumentForPurge(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris, String name, String description) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_markDocumentForPurge(securityToken, uris, name, description);
      return recv_markDocumentForPurge();
    }

    public void send_markDocumentForPurge(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris, String name, String description) throws org.apache.thrift.TException
    {
      markDocumentForPurge_args args = new markDocumentForPurge_args();
      args.setSecurityToken(securityToken);
      args.setUris(uris);
      args.setName(name);
      args.setDescription(description);
      sendBase("markDocumentForPurge", args);
    }

    public PurgeInitiationResult recv_markDocumentForPurge() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      markDocumentForPurge_result result = new markDocumentForPurge_result();
      receiveBase(result, "markDocumentForPurge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "markDocumentForPurge failed: unknown result");
    }

    public PositionsToUris getDocumentUriFromId(ezbake.base.thrift.EzSecurityToken securityToken, List<Long> positionsList) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_getDocumentUriFromId(securityToken, positionsList);
      return recv_getDocumentUriFromId();
    }

    public void send_getDocumentUriFromId(ezbake.base.thrift.EzSecurityToken securityToken, List<Long> positionsList) throws org.apache.thrift.TException
    {
      getDocumentUriFromId_args args = new getDocumentUriFromId_args();
      args.setSecurityToken(securityToken);
      args.setPositionsList(positionsList);
      sendBase("getDocumentUriFromId", args);
    }

    public PositionsToUris recv_getDocumentUriFromId() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      getDocumentUriFromId_result result = new getDocumentUriFromId_result();
      receiveBase(result, "getDocumentUriFromId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDocumentUriFromId failed: unknown result");
    }

    public ConversionResult getDocumentConvertedUrisFromIds(ezbake.base.thrift.EzSecurityToken securityToken, Set<Long> ids) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_getDocumentConvertedUrisFromIds(securityToken, ids);
      return recv_getDocumentConvertedUrisFromIds();
    }

    public void send_getDocumentConvertedUrisFromIds(ezbake.base.thrift.EzSecurityToken securityToken, Set<Long> ids) throws org.apache.thrift.TException
    {
      getDocumentConvertedUrisFromIds_args args = new getDocumentConvertedUrisFromIds_args();
      args.setSecurityToken(securityToken);
      args.setIds(ids);
      sendBase("getDocumentConvertedUrisFromIds", args);
    }

    public ConversionResult recv_getDocumentConvertedUrisFromIds() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      getDocumentConvertedUrisFromIds_result result = new getDocumentConvertedUrisFromIds_result();
      receiveBase(result, "getDocumentConvertedUrisFromIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDocumentConvertedUrisFromIds failed: unknown result");
    }

    public ConversionResult getDocumentConvertedUrisFromUris(ezbake.base.thrift.EzSecurityToken securityToken, Set<String> uris) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_getDocumentConvertedUrisFromUris(securityToken, uris);
      return recv_getDocumentConvertedUrisFromUris();
    }

    public void send_getDocumentConvertedUrisFromUris(ezbake.base.thrift.EzSecurityToken securityToken, Set<String> uris) throws org.apache.thrift.TException
    {
      getDocumentConvertedUrisFromUris_args args = new getDocumentConvertedUrisFromUris_args();
      args.setSecurityToken(securityToken);
      args.setUris(uris);
      sendBase("getDocumentConvertedUrisFromUris", args);
    }

    public ConversionResult recv_getDocumentConvertedUrisFromUris() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      getDocumentConvertedUrisFromUris_result result = new getDocumentConvertedUrisFromUris_result();
      receiveBase(result, "getDocumentConvertedUrisFromUris");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDocumentConvertedUrisFromUris failed: unknown result");
    }

    public PurgeInfo getPurgeInfo(ezbake.base.thrift.EzSecurityToken securityToken, long purgeId) throws ezbake.base.thrift.EzSecurityTokenException, ProvenancePurgeIdNotFoundException, org.apache.thrift.TException
    {
      send_getPurgeInfo(securityToken, purgeId);
      return recv_getPurgeInfo();
    }

    public void send_getPurgeInfo(ezbake.base.thrift.EzSecurityToken securityToken, long purgeId) throws org.apache.thrift.TException
    {
      getPurgeInfo_args args = new getPurgeInfo_args();
      args.setSecurityToken(securityToken);
      args.setPurgeId(purgeId);
      sendBase("getPurgeInfo", args);
    }

    public PurgeInfo recv_getPurgeInfo() throws ezbake.base.thrift.EzSecurityTokenException, ProvenancePurgeIdNotFoundException, org.apache.thrift.TException
    {
      getPurgeInfo_result result = new getPurgeInfo_result();
      receiveBase(result, "getPurgeInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.purgeNotFound != null) {
        throw result.purgeNotFound;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPurgeInfo failed: unknown result");
    }

    public List<Long> getAllPurgeIds(ezbake.base.thrift.EzSecurityToken securityToken) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_getAllPurgeIds(securityToken);
      return recv_getAllPurgeIds();
    }

    public void send_getAllPurgeIds(ezbake.base.thrift.EzSecurityToken securityToken) throws org.apache.thrift.TException
    {
      getAllPurgeIds_args args = new getAllPurgeIds_args();
      args.setSecurityToken(securityToken);
      sendBase("getAllPurgeIds", args);
    }

    public List<Long> recv_getAllPurgeIds() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      getAllPurgeIds_result result = new getAllPurgeIds_result();
      receiveBase(result, "getAllPurgeIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllPurgeIds failed: unknown result");
    }

    public void updatePurge(ezbake.base.thrift.EzSecurityToken securityToken, long purgeId, Set<Long> completelyPurged, String note, boolean resolved) throws ezbake.base.thrift.EzSecurityTokenException, ProvenancePurgeIdNotFoundException, ProvenanceDocumentNotInPurgeException, org.apache.thrift.TException
    {
      send_updatePurge(securityToken, purgeId, completelyPurged, note, resolved);
      recv_updatePurge();
    }

    public void send_updatePurge(ezbake.base.thrift.EzSecurityToken securityToken, long purgeId, Set<Long> completelyPurged, String note, boolean resolved) throws org.apache.thrift.TException
    {
      updatePurge_args args = new updatePurge_args();
      args.setSecurityToken(securityToken);
      args.setPurgeId(purgeId);
      args.setCompletelyPurged(completelyPurged);
      args.setNote(note);
      args.setResolved(resolved);
      sendBase("updatePurge", args);
    }

    public void recv_updatePurge() throws ezbake.base.thrift.EzSecurityTokenException, ProvenancePurgeIdNotFoundException, ProvenanceDocumentNotInPurgeException, org.apache.thrift.TException
    {
      updatePurge_result result = new updatePurge_result();
      receiveBase(result, "updatePurge");
      if (result.security != null) {
        throw result.security;
      }
      if (result.purgeNotFound != null) {
        throw result.purgeNotFound;
      }
      if (result.documentNotInPurge != null) {
        throw result.documentNotInPurge;
      }
      return;
    }

    public void removeDocumentAgeOffRuleInheritance(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, long parentId, String parentUri) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceAlreadyAgedException, org.apache.thrift.TException
    {
      send_removeDocumentAgeOffRuleInheritance(securityToken, documentId, documentUri, parentId, parentUri);
      recv_removeDocumentAgeOffRuleInheritance();
    }

    public void send_removeDocumentAgeOffRuleInheritance(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, long parentId, String parentUri) throws org.apache.thrift.TException
    {
      removeDocumentAgeOffRuleInheritance_args args = new removeDocumentAgeOffRuleInheritance_args();
      args.setSecurityToken(securityToken);
      args.setDocumentId(documentId);
      args.setDocumentUri(documentUri);
      args.setParentId(parentId);
      args.setParentUri(parentUri);
      sendBase("removeDocumentAgeOffRuleInheritance", args);
    }

    public void recv_removeDocumentAgeOffRuleInheritance() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceAlreadyAgedException, org.apache.thrift.TException
    {
      removeDocumentAgeOffRuleInheritance_result result = new removeDocumentAgeOffRuleInheritance_result();
      receiveBase(result, "removeDocumentAgeOffRuleInheritance");
      if (result.security != null) {
        throw result.security;
      }
      if (result.documentNotFound != null) {
        throw result.documentNotFound;
      }
      if (result.alreadyAged != null) {
        throw result.alreadyAged;
      }
      return;
    }

    public void removeDocumentExplicitAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, long ageOffRuleId) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceAgeOffRuleNotFoundException, ProvenanceAlreadyAgedException, org.apache.thrift.TException
    {
      send_removeDocumentExplicitAgeOffRule(securityToken, documentId, documentUri, ageOffRuleId);
      recv_removeDocumentExplicitAgeOffRule();
    }

    public void send_removeDocumentExplicitAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, long ageOffRuleId) throws org.apache.thrift.TException
    {
      removeDocumentExplicitAgeOffRule_args args = new removeDocumentExplicitAgeOffRule_args();
      args.setSecurityToken(securityToken);
      args.setDocumentId(documentId);
      args.setDocumentUri(documentUri);
      args.setAgeOffRuleId(ageOffRuleId);
      sendBase("removeDocumentExplicitAgeOffRule", args);
    }

    public void recv_removeDocumentExplicitAgeOffRule() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceAgeOffRuleNotFoundException, ProvenanceAlreadyAgedException, org.apache.thrift.TException
    {
      removeDocumentExplicitAgeOffRule_result result = new removeDocumentExplicitAgeOffRule_result();
      receiveBase(result, "removeDocumentExplicitAgeOffRule");
      if (result.security != null) {
        throw result.security;
      }
      if (result.documentNotFound != null) {
        throw result.documentNotFound;
      }
      if (result.ruleNotFound != null) {
        throw result.ruleNotFound;
      }
      if (result.alreadyAged != null) {
        throw result.alreadyAged;
      }
      return;
    }

    public void addDocumentExplicitAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, AgeOffMapping ageOffMapping) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceAgeOffRuleNotFoundException, ProvenanceAlreadyAgedException, ProvenanceAgeOffExistsException, org.apache.thrift.TException
    {
      send_addDocumentExplicitAgeOffRule(securityToken, documentId, documentUri, ageOffMapping);
      recv_addDocumentExplicitAgeOffRule();
    }

    public void send_addDocumentExplicitAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, AgeOffMapping ageOffMapping) throws org.apache.thrift.TException
    {
      addDocumentExplicitAgeOffRule_args args = new addDocumentExplicitAgeOffRule_args();
      args.setSecurityToken(securityToken);
      args.setDocumentId(documentId);
      args.setDocumentUri(documentUri);
      args.setAgeOffMapping(ageOffMapping);
      sendBase("addDocumentExplicitAgeOffRule", args);
    }

    public void recv_addDocumentExplicitAgeOffRule() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceAgeOffRuleNotFoundException, ProvenanceAlreadyAgedException, ProvenanceAgeOffExistsException, org.apache.thrift.TException
    {
      addDocumentExplicitAgeOffRule_result result = new addDocumentExplicitAgeOffRule_result();
      receiveBase(result, "addDocumentExplicitAgeOffRule");
      if (result.security != null) {
        throw result.security;
      }
      if (result.documentNotFound != null) {
        throw result.documentNotFound;
      }
      if (result.ruleNotFound != null) {
        throw result.ruleNotFound;
      }
      if (result.alreadyAged != null) {
        throw result.alreadyAged;
      }
      if (result.edgeExists != null) {
        throw result.edgeExists;
      }
      return;
    }

    public void addDocumentInheritanceInfo(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, InheritanceInfo inheritanceInfo) throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceCircularInheritanceNotAllowedException, ProvenanceAlreadyAgedException, ProvenanceAgeOffInheritanceExistsException, org.apache.thrift.TException
    {
      send_addDocumentInheritanceInfo(securityToken, documentId, documentUri, inheritanceInfo);
      recv_addDocumentInheritanceInfo();
    }

    public void send_addDocumentInheritanceInfo(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, InheritanceInfo inheritanceInfo) throws org.apache.thrift.TException
    {
      addDocumentInheritanceInfo_args args = new addDocumentInheritanceInfo_args();
      args.setSecurityToken(securityToken);
      args.setDocumentId(documentId);
      args.setDocumentUri(documentUri);
      args.setInheritanceInfo(inheritanceInfo);
      sendBase("addDocumentInheritanceInfo", args);
    }

    public void recv_addDocumentInheritanceInfo() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceCircularInheritanceNotAllowedException, ProvenanceAlreadyAgedException, ProvenanceAgeOffInheritanceExistsException, org.apache.thrift.TException
    {
      addDocumentInheritanceInfo_result result = new addDocumentInheritanceInfo_result();
      receiveBase(result, "addDocumentInheritanceInfo");
      if (result.security != null) {
        throw result.security;
      }
      if (result.documentNotFound != null) {
        throw result.documentNotFound;
      }
      if (result.circularInheritance != null) {
        throw result.circularInheritance;
      }
      if (result.alreadyAged != null) {
        throw result.alreadyAged;
      }
      if (result.inheritanceExists != null) {
        throw result.inheritanceExists;
      }
      return;
    }

    public void recordObjectAccess(ezbake.base.thrift.EzSecurityToken securityToken, String documentUri, ObjectAccessType accessType) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_recordObjectAccess(securityToken, documentUri, accessType);
      recv_recordObjectAccess();
    }

    public void send_recordObjectAccess(ezbake.base.thrift.EzSecurityToken securityToken, String documentUri, ObjectAccessType accessType) throws org.apache.thrift.TException
    {
      recordObjectAccess_args args = new recordObjectAccess_args();
      args.setSecurityToken(securityToken);
      args.setDocumentUri(documentUri);
      args.setAccessType(accessType);
      sendBase("recordObjectAccess", args);
    }

    public void recv_recordObjectAccess() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      recordObjectAccess_result result = new recordObjectAccess_result();
      receiveBase(result, "recordObjectAccess");
      if (result.security != null) {
        throw result.security;
      }
      return;
    }

    public ResultsAndContinuation fetchUsersDocuments(ezbake.base.thrift.EzSecurityToken securityToken, String userPrincipal, ezbake.base.thrift.DateTime startDateTime, ezbake.base.thrift.DateTime stopDateTime, int numToFetch, AccumuloContinuationPoint continuationPoint) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_fetchUsersDocuments(securityToken, userPrincipal, startDateTime, stopDateTime, numToFetch, continuationPoint);
      return recv_fetchUsersDocuments();
    }

    public void send_fetchUsersDocuments(ezbake.base.thrift.EzSecurityToken securityToken, String userPrincipal, ezbake.base.thrift.DateTime startDateTime, ezbake.base.thrift.DateTime stopDateTime, int numToFetch, AccumuloContinuationPoint continuationPoint) throws org.apache.thrift.TException
    {
      fetchUsersDocuments_args args = new fetchUsersDocuments_args();
      args.setSecurityToken(securityToken);
      args.setUserPrincipal(userPrincipal);
      args.setStartDateTime(startDateTime);
      args.setStopDateTime(stopDateTime);
      args.setNumToFetch(numToFetch);
      args.setContinuationPoint(continuationPoint);
      sendBase("fetchUsersDocuments", args);
    }

    public ResultsAndContinuation recv_fetchUsersDocuments() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      fetchUsersDocuments_result result = new fetchUsersDocuments_result();
      receiveBase(result, "fetchUsersDocuments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchUsersDocuments failed: unknown result");
    }

    public ResultsAndContinuation fetchDocumentUsers(ezbake.base.thrift.EzSecurityToken securityToken, String documentUri, ezbake.base.thrift.DateTime startDateTime, ezbake.base.thrift.DateTime stopDateTime, int numToFetch, AccumuloContinuationPoint continuationPoint) throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      send_fetchDocumentUsers(securityToken, documentUri, startDateTime, stopDateTime, numToFetch, continuationPoint);
      return recv_fetchDocumentUsers();
    }

    public void send_fetchDocumentUsers(ezbake.base.thrift.EzSecurityToken securityToken, String documentUri, ezbake.base.thrift.DateTime startDateTime, ezbake.base.thrift.DateTime stopDateTime, int numToFetch, AccumuloContinuationPoint continuationPoint) throws org.apache.thrift.TException
    {
      fetchDocumentUsers_args args = new fetchDocumentUsers_args();
      args.setSecurityToken(securityToken);
      args.setDocumentUri(documentUri);
      args.setStartDateTime(startDateTime);
      args.setStopDateTime(stopDateTime);
      args.setNumToFetch(numToFetch);
      args.setContinuationPoint(continuationPoint);
      sendBase("fetchDocumentUsers", args);
    }

    public ResultsAndContinuation recv_fetchDocumentUsers() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException
    {
      fetchDocumentUsers_result result = new fetchDocumentUsers_result();
      receiveBase(result, "fetchDocumentUsers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchDocumentUsers failed: unknown result");
    }

  }
  public static class AsyncClient extends ezbake.base.thrift.EzBakeBaseService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name, long retentionDurationSeconds, int maximumExecutionPeriod, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAgeOffRule_call method_call = new addAgeOffRule_call(securityToken, name, retentionDurationSeconds, maximumExecutionPeriod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAgeOffRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private String name;
      private long retentionDurationSeconds;
      private int maximumExecutionPeriod;
      public addAgeOffRule_call(ezbake.base.thrift.EzSecurityToken securityToken, String name, long retentionDurationSeconds, int maximumExecutionPeriod, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.name = name;
        this.retentionDurationSeconds = retentionDurationSeconds;
        this.maximumExecutionPeriod = maximumExecutionPeriod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAgeOffRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAgeOffRule_args args = new addAgeOffRule_args();
        args.setSecurityToken(securityToken);
        args.setName(name);
        args.setRetentionDurationSeconds(retentionDurationSeconds);
        args.setMaximumExecutionPeriod(maximumExecutionPeriod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNameExistsException, ProvenanceIllegalAgeOffDurationSecondsException, ProvenanceIllegalAgeOffRuleNameException, ProvenanceIllegalMaximumExecutionPeriodException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addAgeOffRule();
      }
    }

    public void getAgeOffRuleById(ezbake.base.thrift.EzSecurityToken securityToken, long ruleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAgeOffRuleById_call method_call = new getAgeOffRuleById_call(securityToken, ruleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAgeOffRuleById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private long ruleId;
      public getAgeOffRuleById_call(ezbake.base.thrift.EzSecurityToken securityToken, long ruleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.ruleId = ruleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAgeOffRuleById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAgeOffRuleById_args args = new getAgeOffRuleById_args();
        args.setSecurityToken(securityToken);
        args.setRuleId(ruleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AgeOffRule getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAgeOffRuleById();
      }
    }

    public void getAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAgeOffRule_call method_call = new getAgeOffRule_call(securityToken, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAgeOffRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private String name;
      public getAgeOffRule_call(ezbake.base.thrift.EzSecurityToken securityToken, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAgeOffRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAgeOffRule_args args = new getAgeOffRule_args();
        args.setSecurityToken(securityToken);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AgeOffRule getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAgeOffRule();
      }
    }

    public void updateAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, String name, long retentionDurationSeconds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAgeOffRule_call method_call = new updateAgeOffRule_call(securityToken, name, retentionDurationSeconds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAgeOffRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private String name;
      private long retentionDurationSeconds;
      public updateAgeOffRule_call(ezbake.base.thrift.EzSecurityToken securityToken, String name, long retentionDurationSeconds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.name = name;
        this.retentionDurationSeconds = retentionDurationSeconds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAgeOffRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAgeOffRule_args args = new updateAgeOffRule_args();
        args.setSecurityToken(securityToken);
        args.setName(name);
        args.setRetentionDurationSeconds(retentionDurationSeconds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, ProvenanceIllegalAgeOffDurationSecondsException, ProvenanceIllegalAgeOffRuleNameException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateAgeOffRule();
      }
    }

    public void getAllAgeOffRules(ezbake.base.thrift.EzSecurityToken securityToken, int limit, int page, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllAgeOffRules_call method_call = new getAllAgeOffRules_call(securityToken, limit, page, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllAgeOffRules_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private int limit;
      private int page;
      public getAllAgeOffRules_call(ezbake.base.thrift.EzSecurityToken securityToken, int limit, int page, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.limit = limit;
        this.page = page;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllAgeOffRules", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllAgeOffRules_args args = new getAllAgeOffRules_args();
        args.setSecurityToken(securityToken);
        args.setLimit(limit);
        args.setPage(page);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AgeOffRule> getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllAgeOffRules();
      }
    }

    public void countAgeOffRules(ezbake.base.thrift.EzSecurityToken securityToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countAgeOffRules_call method_call = new countAgeOffRules_call(securityToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countAgeOffRules_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      public countAgeOffRules_call(ezbake.base.thrift.EzSecurityToken securityToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countAgeOffRules", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countAgeOffRules_args args = new countAgeOffRules_args();
        args.setSecurityToken(securityToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countAgeOffRules();
      }
    }

    public void addDocument(ezbake.base.thrift.EzSecurityToken token, String uri, List<InheritanceInfo> parents, List<AgeOffMapping> ageOffRules, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addDocument_call method_call = new addDocument_call(token, uri, parents, ageOffRules, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addDocument_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private String uri;
      private List<InheritanceInfo> parents;
      private List<AgeOffMapping> ageOffRules;
      public addDocument_call(ezbake.base.thrift.EzSecurityToken token, String uri, List<InheritanceInfo> parents, List<AgeOffMapping> ageOffRules, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.uri = uri;
        this.parents = parents;
        this.ageOffRules = ageOffRules;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addDocument", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addDocument_args args = new addDocument_args();
        args.setToken(token);
        args.setUri(uri);
        args.setParents(parents);
        args.setAgeOffRules(ageOffRules);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentExistsException, ProvenanceAgeOffRuleNotFoundException, ProvenanceParentDocumentNotFoundException, ProvenanceCircularInheritanceNotAllowedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addDocument();
      }
    }

    public void addDocuments(ezbake.base.thrift.EzSecurityToken securityToken, Set<AddDocumentEntry> documents, Set<AgeOffMapping> ageOffRules, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addDocuments_call method_call = new addDocuments_call(securityToken, documents, ageOffRules, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addDocuments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private Set<AddDocumentEntry> documents;
      private Set<AgeOffMapping> ageOffRules;
      public addDocuments_call(ezbake.base.thrift.EzSecurityToken securityToken, Set<AddDocumentEntry> documents, Set<AgeOffMapping> ageOffRules, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.documents = documents;
        this.ageOffRules = ageOffRules;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addDocuments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addDocuments_args args = new addDocuments_args();
        args.setSecurityToken(securityToken);
        args.setDocuments(documents);
        args.setAgeOffRules(ageOffRules);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,AddDocumentResult> getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, ProvenanceExceedsMaxBatchSizeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addDocuments();
      }
    }

    public void getAddDocumentsMaxSize(ezbake.base.thrift.EzSecurityToken securityToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAddDocumentsMaxSize_call method_call = new getAddDocumentsMaxSize_call(securityToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAddDocumentsMaxSize_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      public getAddDocumentsMaxSize_call(ezbake.base.thrift.EzSecurityToken securityToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAddDocumentsMaxSize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAddDocumentsMaxSize_args args = new getAddDocumentsMaxSize_args();
        args.setSecurityToken(securityToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAddDocumentsMaxSize();
      }
    }

    public void startAgeOffEvent(ezbake.base.thrift.EzSecurityToken securityToken, long ruleId, ezbake.base.thrift.DateTime effectiveTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startAgeOffEvent_call method_call = new startAgeOffEvent_call(securityToken, ruleId, effectiveTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startAgeOffEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private long ruleId;
      private ezbake.base.thrift.DateTime effectiveTime;
      public startAgeOffEvent_call(ezbake.base.thrift.EzSecurityToken securityToken, long ruleId, ezbake.base.thrift.DateTime effectiveTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.ruleId = ruleId;
        this.effectiveTime = effectiveTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startAgeOffEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startAgeOffEvent_args args = new startAgeOffEvent_args();
        args.setSecurityToken(securityToken);
        args.setRuleId(ruleId);
        args.setEffectiveTime(effectiveTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AgeOffInitiationResult getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceAgeOffRuleNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startAgeOffEvent();
      }
    }

    public void markDocumentAsAged(ezbake.base.thrift.EzSecurityToken securityToken, Set<Long> agedDocumentIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markDocumentAsAged_call method_call = new markDocumentAsAged_call(securityToken, agedDocumentIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class markDocumentAsAged_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private Set<Long> agedDocumentIds;
      public markDocumentAsAged_call(ezbake.base.thrift.EzSecurityToken securityToken, Set<Long> agedDocumentIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.agedDocumentIds = agedDocumentIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markDocumentAsAged", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markDocumentAsAged_args args = new markDocumentAsAged_args();
        args.setSecurityToken(securityToken);
        args.setAgedDocumentIds(agedDocumentIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_markDocumentAsAged();
      }
    }

    public void getDocumentInfo(ezbake.base.thrift.EzSecurityToken securityToken, long id, String uri, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDocumentInfo_call method_call = new getDocumentInfo_call(securityToken, id, uri, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDocumentInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private long id;
      private String uri;
      public getDocumentInfo_call(ezbake.base.thrift.EzSecurityToken securityToken, long id, String uri, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.id = id;
        this.uri = uri;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDocumentInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDocumentInfo_args args = new getDocumentInfo_args();
        args.setSecurityToken(securityToken);
        args.setId(id);
        args.setUri(uri);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DocumentInfo getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDocumentInfo();
      }
    }

    public void getDocumentAncestors(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDocumentAncestors_call method_call = new getDocumentAncestors_call(securityToken, uris, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDocumentAncestors_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private List<String> uris;
      public getDocumentAncestors_call(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.uris = uris;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDocumentAncestors", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDocumentAncestors_args args = new getDocumentAncestors_args();
        args.setSecurityToken(securityToken);
        args.setUris(uris);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DerivedResult getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDocumentAncestors();
      }
    }

    public void getDocumentDescendants(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDocumentDescendants_call method_call = new getDocumentDescendants_call(securityToken, uris, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDocumentDescendants_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private List<String> uris;
      public getDocumentDescendants_call(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.uris = uris;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDocumentDescendants", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDocumentDescendants_args args = new getDocumentDescendants_args();
        args.setSecurityToken(securityToken);
        args.setUris(uris);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DerivedResult getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDocumentDescendants();
      }
    }

    public void markDocumentForPurge(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris, String name, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markDocumentForPurge_call method_call = new markDocumentForPurge_call(securityToken, uris, name, description, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class markDocumentForPurge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private List<String> uris;
      private String name;
      private String description;
      public markDocumentForPurge_call(ezbake.base.thrift.EzSecurityToken securityToken, List<String> uris, String name, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.uris = uris;
        this.name = name;
        this.description = description;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markDocumentForPurge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markDocumentForPurge_args args = new markDocumentForPurge_args();
        args.setSecurityToken(securityToken);
        args.setUris(uris);
        args.setName(name);
        args.setDescription(description);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PurgeInitiationResult getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_markDocumentForPurge();
      }
    }

    public void getDocumentUriFromId(ezbake.base.thrift.EzSecurityToken securityToken, List<Long> positionsList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDocumentUriFromId_call method_call = new getDocumentUriFromId_call(securityToken, positionsList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDocumentUriFromId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private List<Long> positionsList;
      public getDocumentUriFromId_call(ezbake.base.thrift.EzSecurityToken securityToken, List<Long> positionsList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.positionsList = positionsList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDocumentUriFromId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDocumentUriFromId_args args = new getDocumentUriFromId_args();
        args.setSecurityToken(securityToken);
        args.setPositionsList(positionsList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PositionsToUris getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDocumentUriFromId();
      }
    }

    public void getDocumentConvertedUrisFromIds(ezbake.base.thrift.EzSecurityToken securityToken, Set<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDocumentConvertedUrisFromIds_call method_call = new getDocumentConvertedUrisFromIds_call(securityToken, ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDocumentConvertedUrisFromIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private Set<Long> ids;
      public getDocumentConvertedUrisFromIds_call(ezbake.base.thrift.EzSecurityToken securityToken, Set<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDocumentConvertedUrisFromIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDocumentConvertedUrisFromIds_args args = new getDocumentConvertedUrisFromIds_args();
        args.setSecurityToken(securityToken);
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ConversionResult getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDocumentConvertedUrisFromIds();
      }
    }

    public void getDocumentConvertedUrisFromUris(ezbake.base.thrift.EzSecurityToken securityToken, Set<String> uris, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDocumentConvertedUrisFromUris_call method_call = new getDocumentConvertedUrisFromUris_call(securityToken, uris, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDocumentConvertedUrisFromUris_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private Set<String> uris;
      public getDocumentConvertedUrisFromUris_call(ezbake.base.thrift.EzSecurityToken securityToken, Set<String> uris, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.uris = uris;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDocumentConvertedUrisFromUris", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDocumentConvertedUrisFromUris_args args = new getDocumentConvertedUrisFromUris_args();
        args.setSecurityToken(securityToken);
        args.setUris(uris);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ConversionResult getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDocumentConvertedUrisFromUris();
      }
    }

    public void getPurgeInfo(ezbake.base.thrift.EzSecurityToken securityToken, long purgeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPurgeInfo_call method_call = new getPurgeInfo_call(securityToken, purgeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPurgeInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private long purgeId;
      public getPurgeInfo_call(ezbake.base.thrift.EzSecurityToken securityToken, long purgeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.purgeId = purgeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPurgeInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPurgeInfo_args args = new getPurgeInfo_args();
        args.setSecurityToken(securityToken);
        args.setPurgeId(purgeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PurgeInfo getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenancePurgeIdNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPurgeInfo();
      }
    }

    public void getAllPurgeIds(ezbake.base.thrift.EzSecurityToken securityToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllPurgeIds_call method_call = new getAllPurgeIds_call(securityToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllPurgeIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      public getAllPurgeIds_call(ezbake.base.thrift.EzSecurityToken securityToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllPurgeIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllPurgeIds_args args = new getAllPurgeIds_args();
        args.setSecurityToken(securityToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllPurgeIds();
      }
    }

    public void updatePurge(ezbake.base.thrift.EzSecurityToken securityToken, long purgeId, Set<Long> completelyPurged, String note, boolean resolved, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePurge_call method_call = new updatePurge_call(securityToken, purgeId, completelyPurged, note, resolved, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePurge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private long purgeId;
      private Set<Long> completelyPurged;
      private String note;
      private boolean resolved;
      public updatePurge_call(ezbake.base.thrift.EzSecurityToken securityToken, long purgeId, Set<Long> completelyPurged, String note, boolean resolved, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.purgeId = purgeId;
        this.completelyPurged = completelyPurged;
        this.note = note;
        this.resolved = resolved;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePurge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePurge_args args = new updatePurge_args();
        args.setSecurityToken(securityToken);
        args.setPurgeId(purgeId);
        args.setCompletelyPurged(completelyPurged);
        args.setNote(note);
        args.setResolved(resolved);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenancePurgeIdNotFoundException, ProvenanceDocumentNotInPurgeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updatePurge();
      }
    }

    public void removeDocumentAgeOffRuleInheritance(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, long parentId, String parentUri, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeDocumentAgeOffRuleInheritance_call method_call = new removeDocumentAgeOffRuleInheritance_call(securityToken, documentId, documentUri, parentId, parentUri, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeDocumentAgeOffRuleInheritance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private long documentId;
      private String documentUri;
      private long parentId;
      private String parentUri;
      public removeDocumentAgeOffRuleInheritance_call(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, long parentId, String parentUri, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.documentId = documentId;
        this.documentUri = documentUri;
        this.parentId = parentId;
        this.parentUri = parentUri;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeDocumentAgeOffRuleInheritance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeDocumentAgeOffRuleInheritance_args args = new removeDocumentAgeOffRuleInheritance_args();
        args.setSecurityToken(securityToken);
        args.setDocumentId(documentId);
        args.setDocumentUri(documentUri);
        args.setParentId(parentId);
        args.setParentUri(parentUri);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceAlreadyAgedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeDocumentAgeOffRuleInheritance();
      }
    }

    public void removeDocumentExplicitAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, long ageOffRuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeDocumentExplicitAgeOffRule_call method_call = new removeDocumentExplicitAgeOffRule_call(securityToken, documentId, documentUri, ageOffRuleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeDocumentExplicitAgeOffRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private long documentId;
      private String documentUri;
      private long ageOffRuleId;
      public removeDocumentExplicitAgeOffRule_call(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, long ageOffRuleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.documentId = documentId;
        this.documentUri = documentUri;
        this.ageOffRuleId = ageOffRuleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeDocumentExplicitAgeOffRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeDocumentExplicitAgeOffRule_args args = new removeDocumentExplicitAgeOffRule_args();
        args.setSecurityToken(securityToken);
        args.setDocumentId(documentId);
        args.setDocumentUri(documentUri);
        args.setAgeOffRuleId(ageOffRuleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceAgeOffRuleNotFoundException, ProvenanceAlreadyAgedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeDocumentExplicitAgeOffRule();
      }
    }

    public void addDocumentExplicitAgeOffRule(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, AgeOffMapping ageOffMapping, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addDocumentExplicitAgeOffRule_call method_call = new addDocumentExplicitAgeOffRule_call(securityToken, documentId, documentUri, ageOffMapping, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addDocumentExplicitAgeOffRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private long documentId;
      private String documentUri;
      private AgeOffMapping ageOffMapping;
      public addDocumentExplicitAgeOffRule_call(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, AgeOffMapping ageOffMapping, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.documentId = documentId;
        this.documentUri = documentUri;
        this.ageOffMapping = ageOffMapping;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addDocumentExplicitAgeOffRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addDocumentExplicitAgeOffRule_args args = new addDocumentExplicitAgeOffRule_args();
        args.setSecurityToken(securityToken);
        args.setDocumentId(documentId);
        args.setDocumentUri(documentUri);
        args.setAgeOffMapping(ageOffMapping);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceAgeOffRuleNotFoundException, ProvenanceAlreadyAgedException, ProvenanceAgeOffExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addDocumentExplicitAgeOffRule();
      }
    }

    public void addDocumentInheritanceInfo(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, InheritanceInfo inheritanceInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addDocumentInheritanceInfo_call method_call = new addDocumentInheritanceInfo_call(securityToken, documentId, documentUri, inheritanceInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addDocumentInheritanceInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private long documentId;
      private String documentUri;
      private InheritanceInfo inheritanceInfo;
      public addDocumentInheritanceInfo_call(ezbake.base.thrift.EzSecurityToken securityToken, long documentId, String documentUri, InheritanceInfo inheritanceInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.documentId = documentId;
        this.documentUri = documentUri;
        this.inheritanceInfo = inheritanceInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addDocumentInheritanceInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addDocumentInheritanceInfo_args args = new addDocumentInheritanceInfo_args();
        args.setSecurityToken(securityToken);
        args.setDocumentId(documentId);
        args.setDocumentUri(documentUri);
        args.setInheritanceInfo(inheritanceInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ezbake.base.thrift.EzSecurityTokenException, ProvenanceDocumentNotFoundException, ProvenanceCircularInheritanceNotAllowedException, ProvenanceAlreadyAgedException, ProvenanceAgeOffInheritanceExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addDocumentInheritanceInfo();
      }
    }

    public void recordObjectAccess(ezbake.base.thrift.EzSecurityToken securityToken, String documentUri, ObjectAccessType accessType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recordObjectAccess_call method_call = new recordObjectAccess_call(securityToken, documentUri, accessType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recordObjectAccess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private String documentUri;
      private ObjectAccessType accessType;
      public recordObjectAccess_call(ezbake.base.thrift.EzSecurityToken securityToken, String documentUri, ObjectAccessType accessType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.documentUri = documentUri;
        this.accessType = accessType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recordObjectAccess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recordObjectAccess_args args = new recordObjectAccess_args();
        args.setSecurityToken(securityToken);
        args.setDocumentUri(documentUri);
        args.setAccessType(accessType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_recordObjectAccess();
      }
    }

    public void fetchUsersDocuments(ezbake.base.thrift.EzSecurityToken securityToken, String userPrincipal, ezbake.base.thrift.DateTime startDateTime, ezbake.base.thrift.DateTime stopDateTime, int numToFetch, AccumuloContinuationPoint continuationPoint, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchUsersDocuments_call method_call = new fetchUsersDocuments_call(securityToken, userPrincipal, startDateTime, stopDateTime, numToFetch, continuationPoint, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchUsersDocuments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private String userPrincipal;
      private ezbake.base.thrift.DateTime startDateTime;
      private ezbake.base.thrift.DateTime stopDateTime;
      private int numToFetch;
      private AccumuloContinuationPoint continuationPoint;
      public fetchUsersDocuments_call(ezbake.base.thrift.EzSecurityToken securityToken, String userPrincipal, ezbake.base.thrift.DateTime startDateTime, ezbake.base.thrift.DateTime stopDateTime, int numToFetch, AccumuloContinuationPoint continuationPoint, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.userPrincipal = userPrincipal;
        this.startDateTime = startDateTime;
        this.stopDateTime = stopDateTime;
        this.numToFetch = numToFetch;
        this.continuationPoint = continuationPoint;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchUsersDocuments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchUsersDocuments_args args = new fetchUsersDocuments_args();
        args.setSecurityToken(securityToken);
        args.setUserPrincipal(userPrincipal);
        args.setStartDateTime(startDateTime);
        args.setStopDateTime(stopDateTime);
        args.setNumToFetch(numToFetch);
        args.setContinuationPoint(continuationPoint);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultsAndContinuation getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchUsersDocuments();
      }
    }

    public void fetchDocumentUsers(ezbake.base.thrift.EzSecurityToken securityToken, String documentUri, ezbake.base.thrift.DateTime startDateTime, ezbake.base.thrift.DateTime stopDateTime, int numToFetch, AccumuloContinuationPoint continuationPoint, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchDocumentUsers_call method_call = new fetchDocumentUsers_call(securityToken, documentUri, startDateTime, stopDateTime, numToFetch, continuationPoint, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchDocumentUsers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken securityToken;
      private String documentUri;
      private ezbake.base.thrift.DateTime startDateTime;
      private ezbake.base.thrift.DateTime stopDateTime;
      private int numToFetch;
      private AccumuloContinuationPoint continuationPoint;
      public fetchDocumentUsers_call(ezbake.base.thrift.EzSecurityToken securityToken, String documentUri, ezbake.base.thrift.DateTime startDateTime, ezbake.base.thrift.DateTime stopDateTime, int numToFetch, AccumuloContinuationPoint continuationPoint, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.securityToken = securityToken;
        this.documentUri = documentUri;
        this.startDateTime = startDateTime;
        this.stopDateTime = stopDateTime;
        this.numToFetch = numToFetch;
        this.continuationPoint = continuationPoint;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchDocumentUsers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchDocumentUsers_args args = new fetchDocumentUsers_args();
        args.setSecurityToken(securityToken);
        args.setDocumentUri(documentUri);
        args.setStartDateTime(startDateTime);
        args.setStopDateTime(stopDateTime);
        args.setNumToFetch(numToFetch);
        args.setContinuationPoint(continuationPoint);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultsAndContinuation getResult() throws ezbake.base.thrift.EzSecurityTokenException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchDocumentUsers();
      }
    }

  }

  public static class Processor<I extends Iface> extends ezbake.base.thrift.EzBakeBaseService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addAgeOffRule", new addAgeOffRule());
      processMap.put("getAgeOffRuleById", new getAgeOffRuleById());
      processMap.put("getAgeOffRule", new getAgeOffRule());
      processMap.put("updateAgeOffRule", new updateAgeOffRule());
      processMap.put("getAllAgeOffRules", new getAllAgeOffRules());
      processMap.put("countAgeOffRules", new countAgeOffRules());
      processMap.put("addDocument", new addDocument());
      processMap.put("addDocuments", new addDocuments());
      processMap.put("getAddDocumentsMaxSize", new getAddDocumentsMaxSize());
      processMap.put("startAgeOffEvent", new startAgeOffEvent());
      processMap.put("markDocumentAsAged", new markDocumentAsAged());
      processMap.put("getDocumentInfo", new getDocumentInfo());
      processMap.put("getDocumentAncestors", new getDocumentAncestors());
      processMap.put("getDocumentDescendants", new getDocumentDescendants());
      processMap.put("markDocumentForPurge", new markDocumentForPurge());
      processMap.put("getDocumentUriFromId", new getDocumentUriFromId());
      processMap.put("getDocumentConvertedUrisFromIds", new getDocumentConvertedUrisFromIds());
      processMap.put("getDocumentConvertedUrisFromUris", new getDocumentConvertedUrisFromUris());
      processMap.put("getPurgeInfo", new getPurgeInfo());
      processMap.put("getAllPurgeIds", new getAllPurgeIds());
      processMap.put("updatePurge", new updatePurge());
      processMap.put("removeDocumentAgeOffRuleInheritance", new removeDocumentAgeOffRuleInheritance());
      processMap.put("removeDocumentExplicitAgeOffRule", new removeDocumentExplicitAgeOffRule());
      processMap.put("addDocumentExplicitAgeOffRule", new addDocumentExplicitAgeOffRule());
      processMap.put("addDocumentInheritanceInfo", new addDocumentInheritanceInfo());
      processMap.put("recordObjectAccess", new recordObjectAccess());
      processMap.put("fetchUsersDocuments", new fetchUsersDocuments());
      processMap.put("fetchDocumentUsers", new fetchDocumentUsers());
      return processMap;
    }

    public static class addAgeOffRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAgeOffRule_args> {
      public addAgeOffRule() {
        super("addAgeOffRule");
      }

      public addAgeOffRule_args getEmptyArgsInstance() {
        return new addAgeOffRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addAgeOffRule_result getResult(I iface, addAgeOffRule_args args) throws org.apache.thrift.TException {
        addAgeOffRule_result result = new addAgeOffRule_result();
        try {
          result.success = iface.addAgeOffRule(args.securityToken, args.name, args.retentionDurationSeconds, args.maximumExecutionPeriod);
          result.setSuccessIsSet(true);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceAgeOffRuleNameExistsException nameExists) {
          result.nameExists = nameExists;
        } catch (ProvenanceIllegalAgeOffDurationSecondsException illegalAgeOffDurationSeconds) {
          result.illegalAgeOffDurationSeconds = illegalAgeOffDurationSeconds;
        } catch (ProvenanceIllegalAgeOffRuleNameException illegalAgeOffName) {
          result.illegalAgeOffName = illegalAgeOffName;
        } catch (ProvenanceIllegalMaximumExecutionPeriodException illegalMaxPeriod) {
          result.illegalMaxPeriod = illegalMaxPeriod;
        }
        return result;
      }
    }

    public static class getAgeOffRuleById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAgeOffRuleById_args> {
      public getAgeOffRuleById() {
        super("getAgeOffRuleById");
      }

      public getAgeOffRuleById_args getEmptyArgsInstance() {
        return new getAgeOffRuleById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAgeOffRuleById_result getResult(I iface, getAgeOffRuleById_args args) throws org.apache.thrift.TException {
        getAgeOffRuleById_result result = new getAgeOffRuleById_result();
        try {
          result.success = iface.getAgeOffRuleById(args.securityToken, args.ruleId);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
          result.ruleNotFound = ruleNotFound;
        }
        return result;
      }
    }

    public static class getAgeOffRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAgeOffRule_args> {
      public getAgeOffRule() {
        super("getAgeOffRule");
      }

      public getAgeOffRule_args getEmptyArgsInstance() {
        return new getAgeOffRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAgeOffRule_result getResult(I iface, getAgeOffRule_args args) throws org.apache.thrift.TException {
        getAgeOffRule_result result = new getAgeOffRule_result();
        try {
          result.success = iface.getAgeOffRule(args.securityToken, args.name);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
          result.ruleNotFound = ruleNotFound;
        }
        return result;
      }
    }

    public static class updateAgeOffRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAgeOffRule_args> {
      public updateAgeOffRule() {
        super("updateAgeOffRule");
      }

      public updateAgeOffRule_args getEmptyArgsInstance() {
        return new updateAgeOffRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAgeOffRule_result getResult(I iface, updateAgeOffRule_args args) throws org.apache.thrift.TException {
        updateAgeOffRule_result result = new updateAgeOffRule_result();
        try {
          iface.updateAgeOffRule(args.securityToken, args.name, args.retentionDurationSeconds);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
          result.ruleNotFound = ruleNotFound;
        } catch (ProvenanceIllegalAgeOffDurationSecondsException illegalAgeOffDurationSeconds) {
          result.illegalAgeOffDurationSeconds = illegalAgeOffDurationSeconds;
        } catch (ProvenanceIllegalAgeOffRuleNameException illegalAgeOffName) {
          result.illegalAgeOffName = illegalAgeOffName;
        }
        return result;
      }
    }

    public static class getAllAgeOffRules<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllAgeOffRules_args> {
      public getAllAgeOffRules() {
        super("getAllAgeOffRules");
      }

      public getAllAgeOffRules_args getEmptyArgsInstance() {
        return new getAllAgeOffRules_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllAgeOffRules_result getResult(I iface, getAllAgeOffRules_args args) throws org.apache.thrift.TException {
        getAllAgeOffRules_result result = new getAllAgeOffRules_result();
        try {
          result.success = iface.getAllAgeOffRules(args.securityToken, args.limit, args.page);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

    public static class countAgeOffRules<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countAgeOffRules_args> {
      public countAgeOffRules() {
        super("countAgeOffRules");
      }

      public countAgeOffRules_args getEmptyArgsInstance() {
        return new countAgeOffRules_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countAgeOffRules_result getResult(I iface, countAgeOffRules_args args) throws org.apache.thrift.TException {
        countAgeOffRules_result result = new countAgeOffRules_result();
        try {
          result.success = iface.countAgeOffRules(args.securityToken);
          result.setSuccessIsSet(true);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

    public static class addDocument<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addDocument_args> {
      public addDocument() {
        super("addDocument");
      }

      public addDocument_args getEmptyArgsInstance() {
        return new addDocument_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addDocument_result getResult(I iface, addDocument_args args) throws org.apache.thrift.TException {
        addDocument_result result = new addDocument_result();
        try {
          result.success = iface.addDocument(args.token, args.uri, args.parents, args.ageOffRules);
          result.setSuccessIsSet(true);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceDocumentExistsException documentExists) {
          result.documentExists = documentExists;
        } catch (ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
          result.ruleNotFound = ruleNotFound;
        } catch (ProvenanceParentDocumentNotFoundException parentNotFound) {
          result.parentNotFound = parentNotFound;
        } catch (ProvenanceCircularInheritanceNotAllowedException circularInheritanceNotAllowed) {
          result.circularInheritanceNotAllowed = circularInheritanceNotAllowed;
        }
        return result;
      }
    }

    public static class addDocuments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addDocuments_args> {
      public addDocuments() {
        super("addDocuments");
      }

      public addDocuments_args getEmptyArgsInstance() {
        return new addDocuments_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addDocuments_result getResult(I iface, addDocuments_args args) throws org.apache.thrift.TException {
        addDocuments_result result = new addDocuments_result();
        try {
          result.success = iface.addDocuments(args.securityToken, args.documents, args.ageOffRules);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
          result.ruleNotFound = ruleNotFound;
        } catch (ProvenanceExceedsMaxBatchSizeException exceedsMaxSize) {
          result.exceedsMaxSize = exceedsMaxSize;
        }
        return result;
      }
    }

    public static class getAddDocumentsMaxSize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAddDocumentsMaxSize_args> {
      public getAddDocumentsMaxSize() {
        super("getAddDocumentsMaxSize");
      }

      public getAddDocumentsMaxSize_args getEmptyArgsInstance() {
        return new getAddDocumentsMaxSize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAddDocumentsMaxSize_result getResult(I iface, getAddDocumentsMaxSize_args args) throws org.apache.thrift.TException {
        getAddDocumentsMaxSize_result result = new getAddDocumentsMaxSize_result();
        try {
          result.success = iface.getAddDocumentsMaxSize(args.securityToken);
          result.setSuccessIsSet(true);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

    public static class startAgeOffEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startAgeOffEvent_args> {
      public startAgeOffEvent() {
        super("startAgeOffEvent");
      }

      public startAgeOffEvent_args getEmptyArgsInstance() {
        return new startAgeOffEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startAgeOffEvent_result getResult(I iface, startAgeOffEvent_args args) throws org.apache.thrift.TException {
        startAgeOffEvent_result result = new startAgeOffEvent_result();
        try {
          result.success = iface.startAgeOffEvent(args.securityToken, args.ruleId, args.effectiveTime);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
          result.ruleNotFound = ruleNotFound;
        }
        return result;
      }
    }

    public static class markDocumentAsAged<I extends Iface> extends org.apache.thrift.ProcessFunction<I, markDocumentAsAged_args> {
      public markDocumentAsAged() {
        super("markDocumentAsAged");
      }

      public markDocumentAsAged_args getEmptyArgsInstance() {
        return new markDocumentAsAged_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public markDocumentAsAged_result getResult(I iface, markDocumentAsAged_args args) throws org.apache.thrift.TException {
        markDocumentAsAged_result result = new markDocumentAsAged_result();
        try {
          iface.markDocumentAsAged(args.securityToken, args.agedDocumentIds);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceDocumentNotFoundException documentNotFound) {
          result.documentNotFound = documentNotFound;
        }
        return result;
      }
    }

    public static class getDocumentInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDocumentInfo_args> {
      public getDocumentInfo() {
        super("getDocumentInfo");
      }

      public getDocumentInfo_args getEmptyArgsInstance() {
        return new getDocumentInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDocumentInfo_result getResult(I iface, getDocumentInfo_args args) throws org.apache.thrift.TException {
        getDocumentInfo_result result = new getDocumentInfo_result();
        try {
          result.success = iface.getDocumentInfo(args.securityToken, args.id, args.uri);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceDocumentNotFoundException docNotFound) {
          result.docNotFound = docNotFound;
        }
        return result;
      }
    }

    public static class getDocumentAncestors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDocumentAncestors_args> {
      public getDocumentAncestors() {
        super("getDocumentAncestors");
      }

      public getDocumentAncestors_args getEmptyArgsInstance() {
        return new getDocumentAncestors_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDocumentAncestors_result getResult(I iface, getDocumentAncestors_args args) throws org.apache.thrift.TException {
        getDocumentAncestors_result result = new getDocumentAncestors_result();
        try {
          result.success = iface.getDocumentAncestors(args.securityToken, args.uris);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

    public static class getDocumentDescendants<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDocumentDescendants_args> {
      public getDocumentDescendants() {
        super("getDocumentDescendants");
      }

      public getDocumentDescendants_args getEmptyArgsInstance() {
        return new getDocumentDescendants_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDocumentDescendants_result getResult(I iface, getDocumentDescendants_args args) throws org.apache.thrift.TException {
        getDocumentDescendants_result result = new getDocumentDescendants_result();
        try {
          result.success = iface.getDocumentDescendants(args.securityToken, args.uris);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

    public static class markDocumentForPurge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, markDocumentForPurge_args> {
      public markDocumentForPurge() {
        super("markDocumentForPurge");
      }

      public markDocumentForPurge_args getEmptyArgsInstance() {
        return new markDocumentForPurge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public markDocumentForPurge_result getResult(I iface, markDocumentForPurge_args args) throws org.apache.thrift.TException {
        markDocumentForPurge_result result = new markDocumentForPurge_result();
        try {
          result.success = iface.markDocumentForPurge(args.securityToken, args.uris, args.name, args.description);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

    public static class getDocumentUriFromId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDocumentUriFromId_args> {
      public getDocumentUriFromId() {
        super("getDocumentUriFromId");
      }

      public getDocumentUriFromId_args getEmptyArgsInstance() {
        return new getDocumentUriFromId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDocumentUriFromId_result getResult(I iface, getDocumentUriFromId_args args) throws org.apache.thrift.TException {
        getDocumentUriFromId_result result = new getDocumentUriFromId_result();
        try {
          result.success = iface.getDocumentUriFromId(args.securityToken, args.positionsList);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

    public static class getDocumentConvertedUrisFromIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDocumentConvertedUrisFromIds_args> {
      public getDocumentConvertedUrisFromIds() {
        super("getDocumentConvertedUrisFromIds");
      }

      public getDocumentConvertedUrisFromIds_args getEmptyArgsInstance() {
        return new getDocumentConvertedUrisFromIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDocumentConvertedUrisFromIds_result getResult(I iface, getDocumentConvertedUrisFromIds_args args) throws org.apache.thrift.TException {
        getDocumentConvertedUrisFromIds_result result = new getDocumentConvertedUrisFromIds_result();
        try {
          result.success = iface.getDocumentConvertedUrisFromIds(args.securityToken, args.ids);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

    public static class getDocumentConvertedUrisFromUris<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDocumentConvertedUrisFromUris_args> {
      public getDocumentConvertedUrisFromUris() {
        super("getDocumentConvertedUrisFromUris");
      }

      public getDocumentConvertedUrisFromUris_args getEmptyArgsInstance() {
        return new getDocumentConvertedUrisFromUris_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDocumentConvertedUrisFromUris_result getResult(I iface, getDocumentConvertedUrisFromUris_args args) throws org.apache.thrift.TException {
        getDocumentConvertedUrisFromUris_result result = new getDocumentConvertedUrisFromUris_result();
        try {
          result.success = iface.getDocumentConvertedUrisFromUris(args.securityToken, args.uris);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

    public static class getPurgeInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPurgeInfo_args> {
      public getPurgeInfo() {
        super("getPurgeInfo");
      }

      public getPurgeInfo_args getEmptyArgsInstance() {
        return new getPurgeInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPurgeInfo_result getResult(I iface, getPurgeInfo_args args) throws org.apache.thrift.TException {
        getPurgeInfo_result result = new getPurgeInfo_result();
        try {
          result.success = iface.getPurgeInfo(args.securityToken, args.purgeId);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenancePurgeIdNotFoundException purgeNotFound) {
          result.purgeNotFound = purgeNotFound;
        }
        return result;
      }
    }

    public static class getAllPurgeIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllPurgeIds_args> {
      public getAllPurgeIds() {
        super("getAllPurgeIds");
      }

      public getAllPurgeIds_args getEmptyArgsInstance() {
        return new getAllPurgeIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllPurgeIds_result getResult(I iface, getAllPurgeIds_args args) throws org.apache.thrift.TException {
        getAllPurgeIds_result result = new getAllPurgeIds_result();
        try {
          result.success = iface.getAllPurgeIds(args.securityToken);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

    public static class updatePurge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePurge_args> {
      public updatePurge() {
        super("updatePurge");
      }

      public updatePurge_args getEmptyArgsInstance() {
        return new updatePurge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePurge_result getResult(I iface, updatePurge_args args) throws org.apache.thrift.TException {
        updatePurge_result result = new updatePurge_result();
        try {
          iface.updatePurge(args.securityToken, args.purgeId, args.completelyPurged, args.note, args.resolved);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenancePurgeIdNotFoundException purgeNotFound) {
          result.purgeNotFound = purgeNotFound;
        } catch (ProvenanceDocumentNotInPurgeException documentNotInPurge) {
          result.documentNotInPurge = documentNotInPurge;
        }
        return result;
      }
    }

    public static class removeDocumentAgeOffRuleInheritance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeDocumentAgeOffRuleInheritance_args> {
      public removeDocumentAgeOffRuleInheritance() {
        super("removeDocumentAgeOffRuleInheritance");
      }

      public removeDocumentAgeOffRuleInheritance_args getEmptyArgsInstance() {
        return new removeDocumentAgeOffRuleInheritance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeDocumentAgeOffRuleInheritance_result getResult(I iface, removeDocumentAgeOffRuleInheritance_args args) throws org.apache.thrift.TException {
        removeDocumentAgeOffRuleInheritance_result result = new removeDocumentAgeOffRuleInheritance_result();
        try {
          iface.removeDocumentAgeOffRuleInheritance(args.securityToken, args.documentId, args.documentUri, args.parentId, args.parentUri);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceDocumentNotFoundException documentNotFound) {
          result.documentNotFound = documentNotFound;
        } catch (ProvenanceAlreadyAgedException alreadyAged) {
          result.alreadyAged = alreadyAged;
        }
        return result;
      }
    }

    public static class removeDocumentExplicitAgeOffRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeDocumentExplicitAgeOffRule_args> {
      public removeDocumentExplicitAgeOffRule() {
        super("removeDocumentExplicitAgeOffRule");
      }

      public removeDocumentExplicitAgeOffRule_args getEmptyArgsInstance() {
        return new removeDocumentExplicitAgeOffRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeDocumentExplicitAgeOffRule_result getResult(I iface, removeDocumentExplicitAgeOffRule_args args) throws org.apache.thrift.TException {
        removeDocumentExplicitAgeOffRule_result result = new removeDocumentExplicitAgeOffRule_result();
        try {
          iface.removeDocumentExplicitAgeOffRule(args.securityToken, args.documentId, args.documentUri, args.ageOffRuleId);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceDocumentNotFoundException documentNotFound) {
          result.documentNotFound = documentNotFound;
        } catch (ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
          result.ruleNotFound = ruleNotFound;
        } catch (ProvenanceAlreadyAgedException alreadyAged) {
          result.alreadyAged = alreadyAged;
        }
        return result;
      }
    }

    public static class addDocumentExplicitAgeOffRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addDocumentExplicitAgeOffRule_args> {
      public addDocumentExplicitAgeOffRule() {
        super("addDocumentExplicitAgeOffRule");
      }

      public addDocumentExplicitAgeOffRule_args getEmptyArgsInstance() {
        return new addDocumentExplicitAgeOffRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addDocumentExplicitAgeOffRule_result getResult(I iface, addDocumentExplicitAgeOffRule_args args) throws org.apache.thrift.TException {
        addDocumentExplicitAgeOffRule_result result = new addDocumentExplicitAgeOffRule_result();
        try {
          iface.addDocumentExplicitAgeOffRule(args.securityToken, args.documentId, args.documentUri, args.ageOffMapping);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceDocumentNotFoundException documentNotFound) {
          result.documentNotFound = documentNotFound;
        } catch (ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
          result.ruleNotFound = ruleNotFound;
        } catch (ProvenanceAlreadyAgedException alreadyAged) {
          result.alreadyAged = alreadyAged;
        } catch (ProvenanceAgeOffExistsException edgeExists) {
          result.edgeExists = edgeExists;
        }
        return result;
      }
    }

    public static class addDocumentInheritanceInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addDocumentInheritanceInfo_args> {
      public addDocumentInheritanceInfo() {
        super("addDocumentInheritanceInfo");
      }

      public addDocumentInheritanceInfo_args getEmptyArgsInstance() {
        return new addDocumentInheritanceInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addDocumentInheritanceInfo_result getResult(I iface, addDocumentInheritanceInfo_args args) throws org.apache.thrift.TException {
        addDocumentInheritanceInfo_result result = new addDocumentInheritanceInfo_result();
        try {
          iface.addDocumentInheritanceInfo(args.securityToken, args.documentId, args.documentUri, args.inheritanceInfo);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ProvenanceDocumentNotFoundException documentNotFound) {
          result.documentNotFound = documentNotFound;
        } catch (ProvenanceCircularInheritanceNotAllowedException circularInheritance) {
          result.circularInheritance = circularInheritance;
        } catch (ProvenanceAlreadyAgedException alreadyAged) {
          result.alreadyAged = alreadyAged;
        } catch (ProvenanceAgeOffInheritanceExistsException inheritanceExists) {
          result.inheritanceExists = inheritanceExists;
        }
        return result;
      }
    }

    public static class recordObjectAccess<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recordObjectAccess_args> {
      public recordObjectAccess() {
        super("recordObjectAccess");
      }

      public recordObjectAccess_args getEmptyArgsInstance() {
        return new recordObjectAccess_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public recordObjectAccess_result getResult(I iface, recordObjectAccess_args args) throws org.apache.thrift.TException {
        recordObjectAccess_result result = new recordObjectAccess_result();
        try {
          iface.recordObjectAccess(args.securityToken, args.documentUri, args.accessType);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

    public static class fetchUsersDocuments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchUsersDocuments_args> {
      public fetchUsersDocuments() {
        super("fetchUsersDocuments");
      }

      public fetchUsersDocuments_args getEmptyArgsInstance() {
        return new fetchUsersDocuments_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetchUsersDocuments_result getResult(I iface, fetchUsersDocuments_args args) throws org.apache.thrift.TException {
        fetchUsersDocuments_result result = new fetchUsersDocuments_result();
        try {
          result.success = iface.fetchUsersDocuments(args.securityToken, args.userPrincipal, args.startDateTime, args.stopDateTime, args.numToFetch, args.continuationPoint);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

    public static class fetchDocumentUsers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchDocumentUsers_args> {
      public fetchDocumentUsers() {
        super("fetchDocumentUsers");
      }

      public fetchDocumentUsers_args getEmptyArgsInstance() {
        return new fetchDocumentUsers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetchDocumentUsers_result getResult(I iface, fetchDocumentUsers_args args) throws org.apache.thrift.TException {
        fetchDocumentUsers_result result = new fetchDocumentUsers_result();
        try {
          result.success = iface.fetchDocumentUsers(args.securityToken, args.documentUri, args.startDateTime, args.stopDateTime, args.numToFetch, args.continuationPoint);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ezbake.base.thrift.EzBakeBaseService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addAgeOffRule", new addAgeOffRule());
      processMap.put("getAgeOffRuleById", new getAgeOffRuleById());
      processMap.put("getAgeOffRule", new getAgeOffRule());
      processMap.put("updateAgeOffRule", new updateAgeOffRule());
      processMap.put("getAllAgeOffRules", new getAllAgeOffRules());
      processMap.put("countAgeOffRules", new countAgeOffRules());
      processMap.put("addDocument", new addDocument());
      processMap.put("addDocuments", new addDocuments());
      processMap.put("getAddDocumentsMaxSize", new getAddDocumentsMaxSize());
      processMap.put("startAgeOffEvent", new startAgeOffEvent());
      processMap.put("markDocumentAsAged", new markDocumentAsAged());
      processMap.put("getDocumentInfo", new getDocumentInfo());
      processMap.put("getDocumentAncestors", new getDocumentAncestors());
      processMap.put("getDocumentDescendants", new getDocumentDescendants());
      processMap.put("markDocumentForPurge", new markDocumentForPurge());
      processMap.put("getDocumentUriFromId", new getDocumentUriFromId());
      processMap.put("getDocumentConvertedUrisFromIds", new getDocumentConvertedUrisFromIds());
      processMap.put("getDocumentConvertedUrisFromUris", new getDocumentConvertedUrisFromUris());
      processMap.put("getPurgeInfo", new getPurgeInfo());
      processMap.put("getAllPurgeIds", new getAllPurgeIds());
      processMap.put("updatePurge", new updatePurge());
      processMap.put("removeDocumentAgeOffRuleInheritance", new removeDocumentAgeOffRuleInheritance());
      processMap.put("removeDocumentExplicitAgeOffRule", new removeDocumentExplicitAgeOffRule());
      processMap.put("addDocumentExplicitAgeOffRule", new addDocumentExplicitAgeOffRule());
      processMap.put("addDocumentInheritanceInfo", new addDocumentInheritanceInfo());
      processMap.put("recordObjectAccess", new recordObjectAccess());
      processMap.put("fetchUsersDocuments", new fetchUsersDocuments());
      processMap.put("fetchDocumentUsers", new fetchDocumentUsers());
      return processMap;
    }

    public static class addAgeOffRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addAgeOffRule_args, Long> {
      public addAgeOffRule() {
        super("addAgeOffRule");
      }

      public addAgeOffRule_args getEmptyArgsInstance() {
        return new addAgeOffRule_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            addAgeOffRule_result result = new addAgeOffRule_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addAgeOffRule_result result = new addAgeOffRule_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAgeOffRuleNameExistsException) {
                        result.nameExists = (ProvenanceAgeOffRuleNameExistsException) e;
                        result.setNameExistsIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceIllegalAgeOffDurationSecondsException) {
                        result.illegalAgeOffDurationSeconds = (ProvenanceIllegalAgeOffDurationSecondsException) e;
                        result.setIllegalAgeOffDurationSecondsIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceIllegalAgeOffRuleNameException) {
                        result.illegalAgeOffName = (ProvenanceIllegalAgeOffRuleNameException) e;
                        result.setIllegalAgeOffNameIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceIllegalMaximumExecutionPeriodException) {
                        result.illegalMaxPeriod = (ProvenanceIllegalMaximumExecutionPeriodException) e;
                        result.setIllegalMaxPeriodIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addAgeOffRule_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.addAgeOffRule(args.securityToken, args.name, args.retentionDurationSeconds, args.maximumExecutionPeriod,resultHandler);
      }
    }

    public static class getAgeOffRuleById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAgeOffRuleById_args, AgeOffRule> {
      public getAgeOffRuleById() {
        super("getAgeOffRuleById");
      }

      public getAgeOffRuleById_args getEmptyArgsInstance() {
        return new getAgeOffRuleById_args();
      }

      public AsyncMethodCallback<AgeOffRule> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AgeOffRule>() { 
          public void onComplete(AgeOffRule o) {
            getAgeOffRuleById_result result = new getAgeOffRuleById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAgeOffRuleById_result result = new getAgeOffRuleById_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAgeOffRuleNotFoundException) {
                        result.ruleNotFound = (ProvenanceAgeOffRuleNotFoundException) e;
                        result.setRuleNotFoundIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAgeOffRuleById_args args, org.apache.thrift.async.AsyncMethodCallback<AgeOffRule> resultHandler) throws TException {
        iface.getAgeOffRuleById(args.securityToken, args.ruleId,resultHandler);
      }
    }

    public static class getAgeOffRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAgeOffRule_args, AgeOffRule> {
      public getAgeOffRule() {
        super("getAgeOffRule");
      }

      public getAgeOffRule_args getEmptyArgsInstance() {
        return new getAgeOffRule_args();
      }

      public AsyncMethodCallback<AgeOffRule> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AgeOffRule>() { 
          public void onComplete(AgeOffRule o) {
            getAgeOffRule_result result = new getAgeOffRule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAgeOffRule_result result = new getAgeOffRule_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAgeOffRuleNotFoundException) {
                        result.ruleNotFound = (ProvenanceAgeOffRuleNotFoundException) e;
                        result.setRuleNotFoundIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAgeOffRule_args args, org.apache.thrift.async.AsyncMethodCallback<AgeOffRule> resultHandler) throws TException {
        iface.getAgeOffRule(args.securityToken, args.name,resultHandler);
      }
    }

    public static class updateAgeOffRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAgeOffRule_args, Void> {
      public updateAgeOffRule() {
        super("updateAgeOffRule");
      }

      public updateAgeOffRule_args getEmptyArgsInstance() {
        return new updateAgeOffRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateAgeOffRule_result result = new updateAgeOffRule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateAgeOffRule_result result = new updateAgeOffRule_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAgeOffRuleNotFoundException) {
                        result.ruleNotFound = (ProvenanceAgeOffRuleNotFoundException) e;
                        result.setRuleNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceIllegalAgeOffDurationSecondsException) {
                        result.illegalAgeOffDurationSeconds = (ProvenanceIllegalAgeOffDurationSecondsException) e;
                        result.setIllegalAgeOffDurationSecondsIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceIllegalAgeOffRuleNameException) {
                        result.illegalAgeOffName = (ProvenanceIllegalAgeOffRuleNameException) e;
                        result.setIllegalAgeOffNameIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAgeOffRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateAgeOffRule(args.securityToken, args.name, args.retentionDurationSeconds,resultHandler);
      }
    }

    public static class getAllAgeOffRules<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllAgeOffRules_args, List<AgeOffRule>> {
      public getAllAgeOffRules() {
        super("getAllAgeOffRules");
      }

      public getAllAgeOffRules_args getEmptyArgsInstance() {
        return new getAllAgeOffRules_args();
      }

      public AsyncMethodCallback<List<AgeOffRule>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<AgeOffRule>>() { 
          public void onComplete(List<AgeOffRule> o) {
            getAllAgeOffRules_result result = new getAllAgeOffRules_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllAgeOffRules_result result = new getAllAgeOffRules_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllAgeOffRules_args args, org.apache.thrift.async.AsyncMethodCallback<List<AgeOffRule>> resultHandler) throws TException {
        iface.getAllAgeOffRules(args.securityToken, args.limit, args.page,resultHandler);
      }
    }

    public static class countAgeOffRules<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countAgeOffRules_args, Integer> {
      public countAgeOffRules() {
        super("countAgeOffRules");
      }

      public countAgeOffRules_args getEmptyArgsInstance() {
        return new countAgeOffRules_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countAgeOffRules_result result = new countAgeOffRules_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countAgeOffRules_result result = new countAgeOffRules_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countAgeOffRules_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countAgeOffRules(args.securityToken,resultHandler);
      }
    }

    public static class addDocument<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addDocument_args, Long> {
      public addDocument() {
        super("addDocument");
      }

      public addDocument_args getEmptyArgsInstance() {
        return new addDocument_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            addDocument_result result = new addDocument_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addDocument_result result = new addDocument_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceDocumentExistsException) {
                        result.documentExists = (ProvenanceDocumentExistsException) e;
                        result.setDocumentExistsIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAgeOffRuleNotFoundException) {
                        result.ruleNotFound = (ProvenanceAgeOffRuleNotFoundException) e;
                        result.setRuleNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceParentDocumentNotFoundException) {
                        result.parentNotFound = (ProvenanceParentDocumentNotFoundException) e;
                        result.setParentNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceCircularInheritanceNotAllowedException) {
                        result.circularInheritanceNotAllowed = (ProvenanceCircularInheritanceNotAllowedException) e;
                        result.setCircularInheritanceNotAllowedIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addDocument_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.addDocument(args.token, args.uri, args.parents, args.ageOffRules,resultHandler);
      }
    }

    public static class addDocuments<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addDocuments_args, Map<String,AddDocumentResult>> {
      public addDocuments() {
        super("addDocuments");
      }

      public addDocuments_args getEmptyArgsInstance() {
        return new addDocuments_args();
      }

      public AsyncMethodCallback<Map<String,AddDocumentResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,AddDocumentResult>>() { 
          public void onComplete(Map<String,AddDocumentResult> o) {
            addDocuments_result result = new addDocuments_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addDocuments_result result = new addDocuments_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAgeOffRuleNotFoundException) {
                        result.ruleNotFound = (ProvenanceAgeOffRuleNotFoundException) e;
                        result.setRuleNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceExceedsMaxBatchSizeException) {
                        result.exceedsMaxSize = (ProvenanceExceedsMaxBatchSizeException) e;
                        result.setExceedsMaxSizeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addDocuments_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,AddDocumentResult>> resultHandler) throws TException {
        iface.addDocuments(args.securityToken, args.documents, args.ageOffRules,resultHandler);
      }
    }

    public static class getAddDocumentsMaxSize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAddDocumentsMaxSize_args, Integer> {
      public getAddDocumentsMaxSize() {
        super("getAddDocumentsMaxSize");
      }

      public getAddDocumentsMaxSize_args getEmptyArgsInstance() {
        return new getAddDocumentsMaxSize_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getAddDocumentsMaxSize_result result = new getAddDocumentsMaxSize_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAddDocumentsMaxSize_result result = new getAddDocumentsMaxSize_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAddDocumentsMaxSize_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getAddDocumentsMaxSize(args.securityToken,resultHandler);
      }
    }

    public static class startAgeOffEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startAgeOffEvent_args, AgeOffInitiationResult> {
      public startAgeOffEvent() {
        super("startAgeOffEvent");
      }

      public startAgeOffEvent_args getEmptyArgsInstance() {
        return new startAgeOffEvent_args();
      }

      public AsyncMethodCallback<AgeOffInitiationResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AgeOffInitiationResult>() { 
          public void onComplete(AgeOffInitiationResult o) {
            startAgeOffEvent_result result = new startAgeOffEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            startAgeOffEvent_result result = new startAgeOffEvent_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAgeOffRuleNotFoundException) {
                        result.ruleNotFound = (ProvenanceAgeOffRuleNotFoundException) e;
                        result.setRuleNotFoundIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startAgeOffEvent_args args, org.apache.thrift.async.AsyncMethodCallback<AgeOffInitiationResult> resultHandler) throws TException {
        iface.startAgeOffEvent(args.securityToken, args.ruleId, args.effectiveTime,resultHandler);
      }
    }

    public static class markDocumentAsAged<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, markDocumentAsAged_args, Void> {
      public markDocumentAsAged() {
        super("markDocumentAsAged");
      }

      public markDocumentAsAged_args getEmptyArgsInstance() {
        return new markDocumentAsAged_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            markDocumentAsAged_result result = new markDocumentAsAged_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            markDocumentAsAged_result result = new markDocumentAsAged_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceDocumentNotFoundException) {
                        result.documentNotFound = (ProvenanceDocumentNotFoundException) e;
                        result.setDocumentNotFoundIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, markDocumentAsAged_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.markDocumentAsAged(args.securityToken, args.agedDocumentIds,resultHandler);
      }
    }

    public static class getDocumentInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDocumentInfo_args, DocumentInfo> {
      public getDocumentInfo() {
        super("getDocumentInfo");
      }

      public getDocumentInfo_args getEmptyArgsInstance() {
        return new getDocumentInfo_args();
      }

      public AsyncMethodCallback<DocumentInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DocumentInfo>() { 
          public void onComplete(DocumentInfo o) {
            getDocumentInfo_result result = new getDocumentInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDocumentInfo_result result = new getDocumentInfo_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceDocumentNotFoundException) {
                        result.docNotFound = (ProvenanceDocumentNotFoundException) e;
                        result.setDocNotFoundIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDocumentInfo_args args, org.apache.thrift.async.AsyncMethodCallback<DocumentInfo> resultHandler) throws TException {
        iface.getDocumentInfo(args.securityToken, args.id, args.uri,resultHandler);
      }
    }

    public static class getDocumentAncestors<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDocumentAncestors_args, DerivedResult> {
      public getDocumentAncestors() {
        super("getDocumentAncestors");
      }

      public getDocumentAncestors_args getEmptyArgsInstance() {
        return new getDocumentAncestors_args();
      }

      public AsyncMethodCallback<DerivedResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DerivedResult>() { 
          public void onComplete(DerivedResult o) {
            getDocumentAncestors_result result = new getDocumentAncestors_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDocumentAncestors_result result = new getDocumentAncestors_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDocumentAncestors_args args, org.apache.thrift.async.AsyncMethodCallback<DerivedResult> resultHandler) throws TException {
        iface.getDocumentAncestors(args.securityToken, args.uris,resultHandler);
      }
    }

    public static class getDocumentDescendants<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDocumentDescendants_args, DerivedResult> {
      public getDocumentDescendants() {
        super("getDocumentDescendants");
      }

      public getDocumentDescendants_args getEmptyArgsInstance() {
        return new getDocumentDescendants_args();
      }

      public AsyncMethodCallback<DerivedResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DerivedResult>() { 
          public void onComplete(DerivedResult o) {
            getDocumentDescendants_result result = new getDocumentDescendants_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDocumentDescendants_result result = new getDocumentDescendants_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDocumentDescendants_args args, org.apache.thrift.async.AsyncMethodCallback<DerivedResult> resultHandler) throws TException {
        iface.getDocumentDescendants(args.securityToken, args.uris,resultHandler);
      }
    }

    public static class markDocumentForPurge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, markDocumentForPurge_args, PurgeInitiationResult> {
      public markDocumentForPurge() {
        super("markDocumentForPurge");
      }

      public markDocumentForPurge_args getEmptyArgsInstance() {
        return new markDocumentForPurge_args();
      }

      public AsyncMethodCallback<PurgeInitiationResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PurgeInitiationResult>() { 
          public void onComplete(PurgeInitiationResult o) {
            markDocumentForPurge_result result = new markDocumentForPurge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            markDocumentForPurge_result result = new markDocumentForPurge_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, markDocumentForPurge_args args, org.apache.thrift.async.AsyncMethodCallback<PurgeInitiationResult> resultHandler) throws TException {
        iface.markDocumentForPurge(args.securityToken, args.uris, args.name, args.description,resultHandler);
      }
    }

    public static class getDocumentUriFromId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDocumentUriFromId_args, PositionsToUris> {
      public getDocumentUriFromId() {
        super("getDocumentUriFromId");
      }

      public getDocumentUriFromId_args getEmptyArgsInstance() {
        return new getDocumentUriFromId_args();
      }

      public AsyncMethodCallback<PositionsToUris> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PositionsToUris>() { 
          public void onComplete(PositionsToUris o) {
            getDocumentUriFromId_result result = new getDocumentUriFromId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDocumentUriFromId_result result = new getDocumentUriFromId_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDocumentUriFromId_args args, org.apache.thrift.async.AsyncMethodCallback<PositionsToUris> resultHandler) throws TException {
        iface.getDocumentUriFromId(args.securityToken, args.positionsList,resultHandler);
      }
    }

    public static class getDocumentConvertedUrisFromIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDocumentConvertedUrisFromIds_args, ConversionResult> {
      public getDocumentConvertedUrisFromIds() {
        super("getDocumentConvertedUrisFromIds");
      }

      public getDocumentConvertedUrisFromIds_args getEmptyArgsInstance() {
        return new getDocumentConvertedUrisFromIds_args();
      }

      public AsyncMethodCallback<ConversionResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ConversionResult>() { 
          public void onComplete(ConversionResult o) {
            getDocumentConvertedUrisFromIds_result result = new getDocumentConvertedUrisFromIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDocumentConvertedUrisFromIds_result result = new getDocumentConvertedUrisFromIds_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDocumentConvertedUrisFromIds_args args, org.apache.thrift.async.AsyncMethodCallback<ConversionResult> resultHandler) throws TException {
        iface.getDocumentConvertedUrisFromIds(args.securityToken, args.ids,resultHandler);
      }
    }

    public static class getDocumentConvertedUrisFromUris<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDocumentConvertedUrisFromUris_args, ConversionResult> {
      public getDocumentConvertedUrisFromUris() {
        super("getDocumentConvertedUrisFromUris");
      }

      public getDocumentConvertedUrisFromUris_args getEmptyArgsInstance() {
        return new getDocumentConvertedUrisFromUris_args();
      }

      public AsyncMethodCallback<ConversionResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ConversionResult>() { 
          public void onComplete(ConversionResult o) {
            getDocumentConvertedUrisFromUris_result result = new getDocumentConvertedUrisFromUris_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDocumentConvertedUrisFromUris_result result = new getDocumentConvertedUrisFromUris_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDocumentConvertedUrisFromUris_args args, org.apache.thrift.async.AsyncMethodCallback<ConversionResult> resultHandler) throws TException {
        iface.getDocumentConvertedUrisFromUris(args.securityToken, args.uris,resultHandler);
      }
    }

    public static class getPurgeInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPurgeInfo_args, PurgeInfo> {
      public getPurgeInfo() {
        super("getPurgeInfo");
      }

      public getPurgeInfo_args getEmptyArgsInstance() {
        return new getPurgeInfo_args();
      }

      public AsyncMethodCallback<PurgeInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PurgeInfo>() { 
          public void onComplete(PurgeInfo o) {
            getPurgeInfo_result result = new getPurgeInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPurgeInfo_result result = new getPurgeInfo_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenancePurgeIdNotFoundException) {
                        result.purgeNotFound = (ProvenancePurgeIdNotFoundException) e;
                        result.setPurgeNotFoundIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPurgeInfo_args args, org.apache.thrift.async.AsyncMethodCallback<PurgeInfo> resultHandler) throws TException {
        iface.getPurgeInfo(args.securityToken, args.purgeId,resultHandler);
      }
    }

    public static class getAllPurgeIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllPurgeIds_args, List<Long>> {
      public getAllPurgeIds() {
        super("getAllPurgeIds");
      }

      public getAllPurgeIds_args getEmptyArgsInstance() {
        return new getAllPurgeIds_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getAllPurgeIds_result result = new getAllPurgeIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllPurgeIds_result result = new getAllPurgeIds_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllPurgeIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getAllPurgeIds(args.securityToken,resultHandler);
      }
    }

    public static class updatePurge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePurge_args, Void> {
      public updatePurge() {
        super("updatePurge");
      }

      public updatePurge_args getEmptyArgsInstance() {
        return new updatePurge_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updatePurge_result result = new updatePurge_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updatePurge_result result = new updatePurge_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenancePurgeIdNotFoundException) {
                        result.purgeNotFound = (ProvenancePurgeIdNotFoundException) e;
                        result.setPurgeNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceDocumentNotInPurgeException) {
                        result.documentNotInPurge = (ProvenanceDocumentNotInPurgeException) e;
                        result.setDocumentNotInPurgeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePurge_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updatePurge(args.securityToken, args.purgeId, args.completelyPurged, args.note, args.resolved,resultHandler);
      }
    }

    public static class removeDocumentAgeOffRuleInheritance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeDocumentAgeOffRuleInheritance_args, Void> {
      public removeDocumentAgeOffRuleInheritance() {
        super("removeDocumentAgeOffRuleInheritance");
      }

      public removeDocumentAgeOffRuleInheritance_args getEmptyArgsInstance() {
        return new removeDocumentAgeOffRuleInheritance_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeDocumentAgeOffRuleInheritance_result result = new removeDocumentAgeOffRuleInheritance_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeDocumentAgeOffRuleInheritance_result result = new removeDocumentAgeOffRuleInheritance_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceDocumentNotFoundException) {
                        result.documentNotFound = (ProvenanceDocumentNotFoundException) e;
                        result.setDocumentNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAlreadyAgedException) {
                        result.alreadyAged = (ProvenanceAlreadyAgedException) e;
                        result.setAlreadyAgedIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeDocumentAgeOffRuleInheritance_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeDocumentAgeOffRuleInheritance(args.securityToken, args.documentId, args.documentUri, args.parentId, args.parentUri,resultHandler);
      }
    }

    public static class removeDocumentExplicitAgeOffRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeDocumentExplicitAgeOffRule_args, Void> {
      public removeDocumentExplicitAgeOffRule() {
        super("removeDocumentExplicitAgeOffRule");
      }

      public removeDocumentExplicitAgeOffRule_args getEmptyArgsInstance() {
        return new removeDocumentExplicitAgeOffRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeDocumentExplicitAgeOffRule_result result = new removeDocumentExplicitAgeOffRule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeDocumentExplicitAgeOffRule_result result = new removeDocumentExplicitAgeOffRule_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceDocumentNotFoundException) {
                        result.documentNotFound = (ProvenanceDocumentNotFoundException) e;
                        result.setDocumentNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAgeOffRuleNotFoundException) {
                        result.ruleNotFound = (ProvenanceAgeOffRuleNotFoundException) e;
                        result.setRuleNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAlreadyAgedException) {
                        result.alreadyAged = (ProvenanceAlreadyAgedException) e;
                        result.setAlreadyAgedIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeDocumentExplicitAgeOffRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeDocumentExplicitAgeOffRule(args.securityToken, args.documentId, args.documentUri, args.ageOffRuleId,resultHandler);
      }
    }

    public static class addDocumentExplicitAgeOffRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addDocumentExplicitAgeOffRule_args, Void> {
      public addDocumentExplicitAgeOffRule() {
        super("addDocumentExplicitAgeOffRule");
      }

      public addDocumentExplicitAgeOffRule_args getEmptyArgsInstance() {
        return new addDocumentExplicitAgeOffRule_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addDocumentExplicitAgeOffRule_result result = new addDocumentExplicitAgeOffRule_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addDocumentExplicitAgeOffRule_result result = new addDocumentExplicitAgeOffRule_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceDocumentNotFoundException) {
                        result.documentNotFound = (ProvenanceDocumentNotFoundException) e;
                        result.setDocumentNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAgeOffRuleNotFoundException) {
                        result.ruleNotFound = (ProvenanceAgeOffRuleNotFoundException) e;
                        result.setRuleNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAlreadyAgedException) {
                        result.alreadyAged = (ProvenanceAlreadyAgedException) e;
                        result.setAlreadyAgedIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAgeOffExistsException) {
                        result.edgeExists = (ProvenanceAgeOffExistsException) e;
                        result.setEdgeExistsIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addDocumentExplicitAgeOffRule_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addDocumentExplicitAgeOffRule(args.securityToken, args.documentId, args.documentUri, args.ageOffMapping,resultHandler);
      }
    }

    public static class addDocumentInheritanceInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addDocumentInheritanceInfo_args, Void> {
      public addDocumentInheritanceInfo() {
        super("addDocumentInheritanceInfo");
      }

      public addDocumentInheritanceInfo_args getEmptyArgsInstance() {
        return new addDocumentInheritanceInfo_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addDocumentInheritanceInfo_result result = new addDocumentInheritanceInfo_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addDocumentInheritanceInfo_result result = new addDocumentInheritanceInfo_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceDocumentNotFoundException) {
                        result.documentNotFound = (ProvenanceDocumentNotFoundException) e;
                        result.setDocumentNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceCircularInheritanceNotAllowedException) {
                        result.circularInheritance = (ProvenanceCircularInheritanceNotAllowedException) e;
                        result.setCircularInheritanceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAlreadyAgedException) {
                        result.alreadyAged = (ProvenanceAlreadyAgedException) e;
                        result.setAlreadyAgedIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ProvenanceAgeOffInheritanceExistsException) {
                        result.inheritanceExists = (ProvenanceAgeOffInheritanceExistsException) e;
                        result.setInheritanceExistsIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addDocumentInheritanceInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addDocumentInheritanceInfo(args.securityToken, args.documentId, args.documentUri, args.inheritanceInfo,resultHandler);
      }
    }

    public static class recordObjectAccess<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recordObjectAccess_args, Void> {
      public recordObjectAccess() {
        super("recordObjectAccess");
      }

      public recordObjectAccess_args getEmptyArgsInstance() {
        return new recordObjectAccess_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            recordObjectAccess_result result = new recordObjectAccess_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            recordObjectAccess_result result = new recordObjectAccess_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recordObjectAccess_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.recordObjectAccess(args.securityToken, args.documentUri, args.accessType,resultHandler);
      }
    }

    public static class fetchUsersDocuments<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchUsersDocuments_args, ResultsAndContinuation> {
      public fetchUsersDocuments() {
        super("fetchUsersDocuments");
      }

      public fetchUsersDocuments_args getEmptyArgsInstance() {
        return new fetchUsersDocuments_args();
      }

      public AsyncMethodCallback<ResultsAndContinuation> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultsAndContinuation>() { 
          public void onComplete(ResultsAndContinuation o) {
            fetchUsersDocuments_result result = new fetchUsersDocuments_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            fetchUsersDocuments_result result = new fetchUsersDocuments_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchUsersDocuments_args args, org.apache.thrift.async.AsyncMethodCallback<ResultsAndContinuation> resultHandler) throws TException {
        iface.fetchUsersDocuments(args.securityToken, args.userPrincipal, args.startDateTime, args.stopDateTime, args.numToFetch, args.continuationPoint,resultHandler);
      }
    }

    public static class fetchDocumentUsers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchDocumentUsers_args, ResultsAndContinuation> {
      public fetchDocumentUsers() {
        super("fetchDocumentUsers");
      }

      public fetchDocumentUsers_args getEmptyArgsInstance() {
        return new fetchDocumentUsers_args();
      }

      public AsyncMethodCallback<ResultsAndContinuation> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultsAndContinuation>() { 
          public void onComplete(ResultsAndContinuation o) {
            fetchDocumentUsers_result result = new fetchDocumentUsers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            fetchDocumentUsers_result result = new fetchDocumentUsers_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchDocumentUsers_args args, org.apache.thrift.async.AsyncMethodCallback<ResultsAndContinuation> resultHandler) throws TException {
        iface.fetchDocumentUsers(args.securityToken, args.documentUri, args.startDateTime, args.stopDateTime, args.numToFetch, args.continuationPoint,resultHandler);
      }
    }

  }

  public static class addAgeOffRule_args implements org.apache.thrift.TBase<addAgeOffRule_args, addAgeOffRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<addAgeOffRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAgeOffRule_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RETENTION_DURATION_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("retentionDurationSeconds", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField MAXIMUM_EXECUTION_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("maximumExecutionPeriod", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAgeOffRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAgeOffRule_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public String name; // required
    public long retentionDurationSeconds; // required
    public int maximumExecutionPeriod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      NAME((short)2, "name"),
      RETENTION_DURATION_SECONDS((short)3, "retentionDurationSeconds"),
      MAXIMUM_EXECUTION_PERIOD((short)4, "maximumExecutionPeriod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // NAME
            return NAME;
          case 3: // RETENTION_DURATION_SECONDS
            return RETENTION_DURATION_SECONDS;
          case 4: // MAXIMUM_EXECUTION_PERIOD
            return MAXIMUM_EXECUTION_PERIOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RETENTIONDURATIONSECONDS_ISSET_ID = 0;
    private static final int __MAXIMUMEXECUTIONPERIOD_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RETENTION_DURATION_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("retentionDurationSeconds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MAXIMUM_EXECUTION_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("maximumExecutionPeriod", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAgeOffRule_args.class, metaDataMap);
    }

    public addAgeOffRule_args() {
    }

    public addAgeOffRule_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      String name,
      long retentionDurationSeconds,
      int maximumExecutionPeriod)
    {
      this();
      this.securityToken = securityToken;
      this.name = name;
      this.retentionDurationSeconds = retentionDurationSeconds;
      setRetentionDurationSecondsIsSet(true);
      this.maximumExecutionPeriod = maximumExecutionPeriod;
      setMaximumExecutionPeriodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAgeOffRule_args(addAgeOffRule_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.retentionDurationSeconds = other.retentionDurationSeconds;
      this.maximumExecutionPeriod = other.maximumExecutionPeriod;
    }

    public addAgeOffRule_args deepCopy() {
      return new addAgeOffRule_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.name = null;
      setRetentionDurationSecondsIsSet(false);
      this.retentionDurationSeconds = 0;
      setMaximumExecutionPeriodIsSet(false);
      this.maximumExecutionPeriod = 0;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public addAgeOffRule_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public addAgeOffRule_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public long getRetentionDurationSeconds() {
      return this.retentionDurationSeconds;
    }

    public addAgeOffRule_args setRetentionDurationSeconds(long retentionDurationSeconds) {
      this.retentionDurationSeconds = retentionDurationSeconds;
      setRetentionDurationSecondsIsSet(true);
      return this;
    }

    public void unsetRetentionDurationSeconds() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETENTIONDURATIONSECONDS_ISSET_ID);
    }

    /** Returns true if field retentionDurationSeconds is set (has been assigned a value) and false otherwise */
    public boolean isSetRetentionDurationSeconds() {
      return EncodingUtils.testBit(__isset_bitfield, __RETENTIONDURATIONSECONDS_ISSET_ID);
    }

    public void setRetentionDurationSecondsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETENTIONDURATIONSECONDS_ISSET_ID, value);
    }

    public int getMaximumExecutionPeriod() {
      return this.maximumExecutionPeriod;
    }

    public addAgeOffRule_args setMaximumExecutionPeriod(int maximumExecutionPeriod) {
      this.maximumExecutionPeriod = maximumExecutionPeriod;
      setMaximumExecutionPeriodIsSet(true);
      return this;
    }

    public void unsetMaximumExecutionPeriod() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXIMUMEXECUTIONPERIOD_ISSET_ID);
    }

    /** Returns true if field maximumExecutionPeriod is set (has been assigned a value) and false otherwise */
    public boolean isSetMaximumExecutionPeriod() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXIMUMEXECUTIONPERIOD_ISSET_ID);
    }

    public void setMaximumExecutionPeriodIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXIMUMEXECUTIONPERIOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case RETENTION_DURATION_SECONDS:
        if (value == null) {
          unsetRetentionDurationSeconds();
        } else {
          setRetentionDurationSeconds((Long)value);
        }
        break;

      case MAXIMUM_EXECUTION_PERIOD:
        if (value == null) {
          unsetMaximumExecutionPeriod();
        } else {
          setMaximumExecutionPeriod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case NAME:
        return getName();

      case RETENTION_DURATION_SECONDS:
        return Long.valueOf(getRetentionDurationSeconds());

      case MAXIMUM_EXECUTION_PERIOD:
        return Integer.valueOf(getMaximumExecutionPeriod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case NAME:
        return isSetName();
      case RETENTION_DURATION_SECONDS:
        return isSetRetentionDurationSeconds();
      case MAXIMUM_EXECUTION_PERIOD:
        return isSetMaximumExecutionPeriod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAgeOffRule_args)
        return this.equals((addAgeOffRule_args)that);
      return false;
    }

    public boolean equals(addAgeOffRule_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_retentionDurationSeconds = true;
      boolean that_present_retentionDurationSeconds = true;
      if (this_present_retentionDurationSeconds || that_present_retentionDurationSeconds) {
        if (!(this_present_retentionDurationSeconds && that_present_retentionDurationSeconds))
          return false;
        if (this.retentionDurationSeconds != that.retentionDurationSeconds)
          return false;
      }

      boolean this_present_maximumExecutionPeriod = true;
      boolean that_present_maximumExecutionPeriod = true;
      if (this_present_maximumExecutionPeriod || that_present_maximumExecutionPeriod) {
        if (!(this_present_maximumExecutionPeriod && that_present_maximumExecutionPeriod))
          return false;
        if (this.maximumExecutionPeriod != that.maximumExecutionPeriod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_name = true && (isSetName());
      builder.append(present_name);
      if (present_name)
        builder.append(name);

      boolean present_retentionDurationSeconds = true;
      builder.append(present_retentionDurationSeconds);
      if (present_retentionDurationSeconds)
        builder.append(retentionDurationSeconds);

      boolean present_maximumExecutionPeriod = true;
      builder.append(present_maximumExecutionPeriod);
      if (present_maximumExecutionPeriod)
        builder.append(maximumExecutionPeriod);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addAgeOffRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRetentionDurationSeconds()).compareTo(other.isSetRetentionDurationSeconds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetentionDurationSeconds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retentionDurationSeconds, other.retentionDurationSeconds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaximumExecutionPeriod()).compareTo(other.isSetMaximumExecutionPeriod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaximumExecutionPeriod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maximumExecutionPeriod, other.maximumExecutionPeriod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAgeOffRule_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("retentionDurationSeconds:");
      sb.append(this.retentionDurationSeconds);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maximumExecutionPeriod:");
      sb.append(this.maximumExecutionPeriod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'retentionDurationSeconds' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'maximumExecutionPeriod' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAgeOffRule_argsStandardSchemeFactory implements SchemeFactory {
      public addAgeOffRule_argsStandardScheme getScheme() {
        return new addAgeOffRule_argsStandardScheme();
      }
    }

    private static class addAgeOffRule_argsStandardScheme extends StandardScheme<addAgeOffRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAgeOffRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RETENTION_DURATION_SECONDS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.retentionDurationSeconds = iprot.readI64();
                struct.setRetentionDurationSecondsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MAXIMUM_EXECUTION_PERIOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maximumExecutionPeriod = iprot.readI32();
                struct.setMaximumExecutionPeriodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetRetentionDurationSeconds()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'retentionDurationSeconds' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetMaximumExecutionPeriod()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'maximumExecutionPeriod' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAgeOffRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RETENTION_DURATION_SECONDS_FIELD_DESC);
        oprot.writeI64(struct.retentionDurationSeconds);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAXIMUM_EXECUTION_PERIOD_FIELD_DESC);
        oprot.writeI32(struct.maximumExecutionPeriod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAgeOffRule_argsTupleSchemeFactory implements SchemeFactory {
      public addAgeOffRule_argsTupleScheme getScheme() {
        return new addAgeOffRule_argsTupleScheme();
      }
    }

    private static class addAgeOffRule_argsTupleScheme extends TupleScheme<addAgeOffRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAgeOffRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        oprot.writeString(struct.name);
        oprot.writeI64(struct.retentionDurationSeconds);
        oprot.writeI32(struct.maximumExecutionPeriod);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAgeOffRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.retentionDurationSeconds = iprot.readI64();
        struct.setRetentionDurationSecondsIsSet(true);
        struct.maximumExecutionPeriod = iprot.readI32();
        struct.setMaximumExecutionPeriodIsSet(true);
      }
    }

  }

  public static class addAgeOffRule_result implements org.apache.thrift.TBase<addAgeOffRule_result, addAgeOffRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<addAgeOffRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAgeOffRule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("nameExists", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ILLEGAL_AGE_OFF_DURATION_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("illegalAgeOffDurationSeconds", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ILLEGAL_AGE_OFF_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("illegalAgeOffName", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ILLEGAL_MAX_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("illegalMaxPeriod", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAgeOffRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAgeOffRule_resultTupleSchemeFactory());
    }

    public long success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceAgeOffRuleNameExistsException nameExists; // required
    public ProvenanceIllegalAgeOffDurationSecondsException illegalAgeOffDurationSeconds; // required
    public ProvenanceIllegalAgeOffRuleNameException illegalAgeOffName; // required
    public ProvenanceIllegalMaximumExecutionPeriodException illegalMaxPeriod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      NAME_EXISTS((short)2, "nameExists"),
      ILLEGAL_AGE_OFF_DURATION_SECONDS((short)3, "illegalAgeOffDurationSeconds"),
      ILLEGAL_AGE_OFF_NAME((short)4, "illegalAgeOffName"),
      ILLEGAL_MAX_PERIOD((short)5, "illegalMaxPeriod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // NAME_EXISTS
            return NAME_EXISTS;
          case 3: // ILLEGAL_AGE_OFF_DURATION_SECONDS
            return ILLEGAL_AGE_OFF_DURATION_SECONDS;
          case 4: // ILLEGAL_AGE_OFF_NAME
            return ILLEGAL_AGE_OFF_NAME;
          case 5: // ILLEGAL_MAX_PERIOD
            return ILLEGAL_MAX_PERIOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NAME_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("nameExists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ILLEGAL_AGE_OFF_DURATION_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("illegalAgeOffDurationSeconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ILLEGAL_AGE_OFF_NAME, new org.apache.thrift.meta_data.FieldMetaData("illegalAgeOffName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ILLEGAL_MAX_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("illegalMaxPeriod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAgeOffRule_result.class, metaDataMap);
    }

    public addAgeOffRule_result() {
    }

    public addAgeOffRule_result(
      long success,
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceAgeOffRuleNameExistsException nameExists,
      ProvenanceIllegalAgeOffDurationSecondsException illegalAgeOffDurationSeconds,
      ProvenanceIllegalAgeOffRuleNameException illegalAgeOffName,
      ProvenanceIllegalMaximumExecutionPeriodException illegalMaxPeriod)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.security = security;
      this.nameExists = nameExists;
      this.illegalAgeOffDurationSeconds = illegalAgeOffDurationSeconds;
      this.illegalAgeOffName = illegalAgeOffName;
      this.illegalMaxPeriod = illegalMaxPeriod;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAgeOffRule_result(addAgeOffRule_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetNameExists()) {
        this.nameExists = new ProvenanceAgeOffRuleNameExistsException(other.nameExists);
      }
      if (other.isSetIllegalAgeOffDurationSeconds()) {
        this.illegalAgeOffDurationSeconds = new ProvenanceIllegalAgeOffDurationSecondsException(other.illegalAgeOffDurationSeconds);
      }
      if (other.isSetIllegalAgeOffName()) {
        this.illegalAgeOffName = new ProvenanceIllegalAgeOffRuleNameException(other.illegalAgeOffName);
      }
      if (other.isSetIllegalMaxPeriod()) {
        this.illegalMaxPeriod = new ProvenanceIllegalMaximumExecutionPeriodException(other.illegalMaxPeriod);
      }
    }

    public addAgeOffRule_result deepCopy() {
      return new addAgeOffRule_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.security = null;
      this.nameExists = null;
      this.illegalAgeOffDurationSeconds = null;
      this.illegalAgeOffName = null;
      this.illegalMaxPeriod = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public addAgeOffRule_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public addAgeOffRule_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceAgeOffRuleNameExistsException getNameExists() {
      return this.nameExists;
    }

    public addAgeOffRule_result setNameExists(ProvenanceAgeOffRuleNameExistsException nameExists) {
      this.nameExists = nameExists;
      return this;
    }

    public void unsetNameExists() {
      this.nameExists = null;
    }

    /** Returns true if field nameExists is set (has been assigned a value) and false otherwise */
    public boolean isSetNameExists() {
      return this.nameExists != null;
    }

    public void setNameExistsIsSet(boolean value) {
      if (!value) {
        this.nameExists = null;
      }
    }

    public ProvenanceIllegalAgeOffDurationSecondsException getIllegalAgeOffDurationSeconds() {
      return this.illegalAgeOffDurationSeconds;
    }

    public addAgeOffRule_result setIllegalAgeOffDurationSeconds(ProvenanceIllegalAgeOffDurationSecondsException illegalAgeOffDurationSeconds) {
      this.illegalAgeOffDurationSeconds = illegalAgeOffDurationSeconds;
      return this;
    }

    public void unsetIllegalAgeOffDurationSeconds() {
      this.illegalAgeOffDurationSeconds = null;
    }

    /** Returns true if field illegalAgeOffDurationSeconds is set (has been assigned a value) and false otherwise */
    public boolean isSetIllegalAgeOffDurationSeconds() {
      return this.illegalAgeOffDurationSeconds != null;
    }

    public void setIllegalAgeOffDurationSecondsIsSet(boolean value) {
      if (!value) {
        this.illegalAgeOffDurationSeconds = null;
      }
    }

    public ProvenanceIllegalAgeOffRuleNameException getIllegalAgeOffName() {
      return this.illegalAgeOffName;
    }

    public addAgeOffRule_result setIllegalAgeOffName(ProvenanceIllegalAgeOffRuleNameException illegalAgeOffName) {
      this.illegalAgeOffName = illegalAgeOffName;
      return this;
    }

    public void unsetIllegalAgeOffName() {
      this.illegalAgeOffName = null;
    }

    /** Returns true if field illegalAgeOffName is set (has been assigned a value) and false otherwise */
    public boolean isSetIllegalAgeOffName() {
      return this.illegalAgeOffName != null;
    }

    public void setIllegalAgeOffNameIsSet(boolean value) {
      if (!value) {
        this.illegalAgeOffName = null;
      }
    }

    public ProvenanceIllegalMaximumExecutionPeriodException getIllegalMaxPeriod() {
      return this.illegalMaxPeriod;
    }

    public addAgeOffRule_result setIllegalMaxPeriod(ProvenanceIllegalMaximumExecutionPeriodException illegalMaxPeriod) {
      this.illegalMaxPeriod = illegalMaxPeriod;
      return this;
    }

    public void unsetIllegalMaxPeriod() {
      this.illegalMaxPeriod = null;
    }

    /** Returns true if field illegalMaxPeriod is set (has been assigned a value) and false otherwise */
    public boolean isSetIllegalMaxPeriod() {
      return this.illegalMaxPeriod != null;
    }

    public void setIllegalMaxPeriodIsSet(boolean value) {
      if (!value) {
        this.illegalMaxPeriod = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case NAME_EXISTS:
        if (value == null) {
          unsetNameExists();
        } else {
          setNameExists((ProvenanceAgeOffRuleNameExistsException)value);
        }
        break;

      case ILLEGAL_AGE_OFF_DURATION_SECONDS:
        if (value == null) {
          unsetIllegalAgeOffDurationSeconds();
        } else {
          setIllegalAgeOffDurationSeconds((ProvenanceIllegalAgeOffDurationSecondsException)value);
        }
        break;

      case ILLEGAL_AGE_OFF_NAME:
        if (value == null) {
          unsetIllegalAgeOffName();
        } else {
          setIllegalAgeOffName((ProvenanceIllegalAgeOffRuleNameException)value);
        }
        break;

      case ILLEGAL_MAX_PERIOD:
        if (value == null) {
          unsetIllegalMaxPeriod();
        } else {
          setIllegalMaxPeriod((ProvenanceIllegalMaximumExecutionPeriodException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case SECURITY:
        return getSecurity();

      case NAME_EXISTS:
        return getNameExists();

      case ILLEGAL_AGE_OFF_DURATION_SECONDS:
        return getIllegalAgeOffDurationSeconds();

      case ILLEGAL_AGE_OFF_NAME:
        return getIllegalAgeOffName();

      case ILLEGAL_MAX_PERIOD:
        return getIllegalMaxPeriod();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case NAME_EXISTS:
        return isSetNameExists();
      case ILLEGAL_AGE_OFF_DURATION_SECONDS:
        return isSetIllegalAgeOffDurationSeconds();
      case ILLEGAL_AGE_OFF_NAME:
        return isSetIllegalAgeOffName();
      case ILLEGAL_MAX_PERIOD:
        return isSetIllegalMaxPeriod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAgeOffRule_result)
        return this.equals((addAgeOffRule_result)that);
      return false;
    }

    public boolean equals(addAgeOffRule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_nameExists = true && this.isSetNameExists();
      boolean that_present_nameExists = true && that.isSetNameExists();
      if (this_present_nameExists || that_present_nameExists) {
        if (!(this_present_nameExists && that_present_nameExists))
          return false;
        if (!this.nameExists.equals(that.nameExists))
          return false;
      }

      boolean this_present_illegalAgeOffDurationSeconds = true && this.isSetIllegalAgeOffDurationSeconds();
      boolean that_present_illegalAgeOffDurationSeconds = true && that.isSetIllegalAgeOffDurationSeconds();
      if (this_present_illegalAgeOffDurationSeconds || that_present_illegalAgeOffDurationSeconds) {
        if (!(this_present_illegalAgeOffDurationSeconds && that_present_illegalAgeOffDurationSeconds))
          return false;
        if (!this.illegalAgeOffDurationSeconds.equals(that.illegalAgeOffDurationSeconds))
          return false;
      }

      boolean this_present_illegalAgeOffName = true && this.isSetIllegalAgeOffName();
      boolean that_present_illegalAgeOffName = true && that.isSetIllegalAgeOffName();
      if (this_present_illegalAgeOffName || that_present_illegalAgeOffName) {
        if (!(this_present_illegalAgeOffName && that_present_illegalAgeOffName))
          return false;
        if (!this.illegalAgeOffName.equals(that.illegalAgeOffName))
          return false;
      }

      boolean this_present_illegalMaxPeriod = true && this.isSetIllegalMaxPeriod();
      boolean that_present_illegalMaxPeriod = true && that.isSetIllegalMaxPeriod();
      if (this_present_illegalMaxPeriod || that_present_illegalMaxPeriod) {
        if (!(this_present_illegalMaxPeriod && that_present_illegalMaxPeriod))
          return false;
        if (!this.illegalMaxPeriod.equals(that.illegalMaxPeriod))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_nameExists = true && (isSetNameExists());
      builder.append(present_nameExists);
      if (present_nameExists)
        builder.append(nameExists);

      boolean present_illegalAgeOffDurationSeconds = true && (isSetIllegalAgeOffDurationSeconds());
      builder.append(present_illegalAgeOffDurationSeconds);
      if (present_illegalAgeOffDurationSeconds)
        builder.append(illegalAgeOffDurationSeconds);

      boolean present_illegalAgeOffName = true && (isSetIllegalAgeOffName());
      builder.append(present_illegalAgeOffName);
      if (present_illegalAgeOffName)
        builder.append(illegalAgeOffName);

      boolean present_illegalMaxPeriod = true && (isSetIllegalMaxPeriod());
      builder.append(present_illegalMaxPeriod);
      if (present_illegalMaxPeriod)
        builder.append(illegalMaxPeriod);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addAgeOffRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNameExists()).compareTo(other.isSetNameExists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameExists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameExists, other.nameExists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIllegalAgeOffDurationSeconds()).compareTo(other.isSetIllegalAgeOffDurationSeconds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIllegalAgeOffDurationSeconds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.illegalAgeOffDurationSeconds, other.illegalAgeOffDurationSeconds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIllegalAgeOffName()).compareTo(other.isSetIllegalAgeOffName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIllegalAgeOffName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.illegalAgeOffName, other.illegalAgeOffName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIllegalMaxPeriod()).compareTo(other.isSetIllegalMaxPeriod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIllegalMaxPeriod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.illegalMaxPeriod, other.illegalMaxPeriod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAgeOffRule_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nameExists:");
      if (this.nameExists == null) {
        sb.append("null");
      } else {
        sb.append(this.nameExists);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("illegalAgeOffDurationSeconds:");
      if (this.illegalAgeOffDurationSeconds == null) {
        sb.append("null");
      } else {
        sb.append(this.illegalAgeOffDurationSeconds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("illegalAgeOffName:");
      if (this.illegalAgeOffName == null) {
        sb.append("null");
      } else {
        sb.append(this.illegalAgeOffName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("illegalMaxPeriod:");
      if (this.illegalMaxPeriod == null) {
        sb.append("null");
      } else {
        sb.append(this.illegalMaxPeriod);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAgeOffRule_resultStandardSchemeFactory implements SchemeFactory {
      public addAgeOffRule_resultStandardScheme getScheme() {
        return new addAgeOffRule_resultStandardScheme();
      }
    }

    private static class addAgeOffRule_resultStandardScheme extends StandardScheme<addAgeOffRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAgeOffRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nameExists = new ProvenanceAgeOffRuleNameExistsException();
                struct.nameExists.read(iprot);
                struct.setNameExistsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ILLEGAL_AGE_OFF_DURATION_SECONDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.illegalAgeOffDurationSeconds = new ProvenanceIllegalAgeOffDurationSecondsException();
                struct.illegalAgeOffDurationSeconds.read(iprot);
                struct.setIllegalAgeOffDurationSecondsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ILLEGAL_AGE_OFF_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.illegalAgeOffName = new ProvenanceIllegalAgeOffRuleNameException();
                struct.illegalAgeOffName.read(iprot);
                struct.setIllegalAgeOffNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ILLEGAL_MAX_PERIOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.illegalMaxPeriod = new ProvenanceIllegalMaximumExecutionPeriodException();
                struct.illegalMaxPeriod.read(iprot);
                struct.setIllegalMaxPeriodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAgeOffRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nameExists != null) {
          oprot.writeFieldBegin(NAME_EXISTS_FIELD_DESC);
          struct.nameExists.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.illegalAgeOffDurationSeconds != null) {
          oprot.writeFieldBegin(ILLEGAL_AGE_OFF_DURATION_SECONDS_FIELD_DESC);
          struct.illegalAgeOffDurationSeconds.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.illegalAgeOffName != null) {
          oprot.writeFieldBegin(ILLEGAL_AGE_OFF_NAME_FIELD_DESC);
          struct.illegalAgeOffName.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.illegalMaxPeriod != null) {
          oprot.writeFieldBegin(ILLEGAL_MAX_PERIOD_FIELD_DESC);
          struct.illegalMaxPeriod.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAgeOffRule_resultTupleSchemeFactory implements SchemeFactory {
      public addAgeOffRule_resultTupleScheme getScheme() {
        return new addAgeOffRule_resultTupleScheme();
      }
    }

    private static class addAgeOffRule_resultTupleScheme extends TupleScheme<addAgeOffRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAgeOffRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetNameExists()) {
          optionals.set(2);
        }
        if (struct.isSetIllegalAgeOffDurationSeconds()) {
          optionals.set(3);
        }
        if (struct.isSetIllegalAgeOffName()) {
          optionals.set(4);
        }
        if (struct.isSetIllegalMaxPeriod()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetNameExists()) {
          struct.nameExists.write(oprot);
        }
        if (struct.isSetIllegalAgeOffDurationSeconds()) {
          struct.illegalAgeOffDurationSeconds.write(oprot);
        }
        if (struct.isSetIllegalAgeOffName()) {
          struct.illegalAgeOffName.write(oprot);
        }
        if (struct.isSetIllegalMaxPeriod()) {
          struct.illegalMaxPeriod.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAgeOffRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nameExists = new ProvenanceAgeOffRuleNameExistsException();
          struct.nameExists.read(iprot);
          struct.setNameExistsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.illegalAgeOffDurationSeconds = new ProvenanceIllegalAgeOffDurationSecondsException();
          struct.illegalAgeOffDurationSeconds.read(iprot);
          struct.setIllegalAgeOffDurationSecondsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.illegalAgeOffName = new ProvenanceIllegalAgeOffRuleNameException();
          struct.illegalAgeOffName.read(iprot);
          struct.setIllegalAgeOffNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.illegalMaxPeriod = new ProvenanceIllegalMaximumExecutionPeriodException();
          struct.illegalMaxPeriod.read(iprot);
          struct.setIllegalMaxPeriodIsSet(true);
        }
      }
    }

  }

  public static class getAgeOffRuleById_args implements org.apache.thrift.TBase<getAgeOffRuleById_args, getAgeOffRuleById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAgeOffRuleById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAgeOffRuleById_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAgeOffRuleById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAgeOffRuleById_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public long ruleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      RULE_ID((short)2, "ruleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // RULE_ID
            return RULE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RULEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.RULE_ID, new org.apache.thrift.meta_data.FieldMetaData("ruleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAgeOffRuleById_args.class, metaDataMap);
    }

    public getAgeOffRuleById_args() {
    }

    public getAgeOffRuleById_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      long ruleId)
    {
      this();
      this.securityToken = securityToken;
      this.ruleId = ruleId;
      setRuleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAgeOffRuleById_args(getAgeOffRuleById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      this.ruleId = other.ruleId;
    }

    public getAgeOffRuleById_args deepCopy() {
      return new getAgeOffRuleById_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      setRuleIdIsSet(false);
      this.ruleId = 0;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public getAgeOffRuleById_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public long getRuleId() {
      return this.ruleId;
    }

    public getAgeOffRuleById_args setRuleId(long ruleId) {
      this.ruleId = ruleId;
      setRuleIdIsSet(true);
      return this;
    }

    public void unsetRuleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RULEID_ISSET_ID);
    }

    /** Returns true if field ruleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleId() {
      return EncodingUtils.testBit(__isset_bitfield, __RULEID_ISSET_ID);
    }

    public void setRuleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RULEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case RULE_ID:
        if (value == null) {
          unsetRuleId();
        } else {
          setRuleId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case RULE_ID:
        return Long.valueOf(getRuleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case RULE_ID:
        return isSetRuleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAgeOffRuleById_args)
        return this.equals((getAgeOffRuleById_args)that);
      return false;
    }

    public boolean equals(getAgeOffRuleById_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_ruleId = true;
      boolean that_present_ruleId = true;
      if (this_present_ruleId || that_present_ruleId) {
        if (!(this_present_ruleId && that_present_ruleId))
          return false;
        if (this.ruleId != that.ruleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_ruleId = true;
      builder.append(present_ruleId);
      if (present_ruleId)
        builder.append(ruleId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAgeOffRuleById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleId()).compareTo(other.isSetRuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleId, other.ruleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAgeOffRuleById_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleId:");
      sb.append(this.ruleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'ruleId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAgeOffRuleById_argsStandardSchemeFactory implements SchemeFactory {
      public getAgeOffRuleById_argsStandardScheme getScheme() {
        return new getAgeOffRuleById_argsStandardScheme();
      }
    }

    private static class getAgeOffRuleById_argsStandardScheme extends StandardScheme<getAgeOffRuleById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAgeOffRuleById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ruleId = iprot.readI64();
                struct.setRuleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetRuleId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'ruleId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAgeOffRuleById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RULE_ID_FIELD_DESC);
        oprot.writeI64(struct.ruleId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAgeOffRuleById_argsTupleSchemeFactory implements SchemeFactory {
      public getAgeOffRuleById_argsTupleScheme getScheme() {
        return new getAgeOffRuleById_argsTupleScheme();
      }
    }

    private static class getAgeOffRuleById_argsTupleScheme extends TupleScheme<getAgeOffRuleById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAgeOffRuleById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        oprot.writeI64(struct.ruleId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAgeOffRuleById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        struct.ruleId = iprot.readI64();
        struct.setRuleIdIsSet(true);
      }
    }

  }

  public static class getAgeOffRuleById_result implements org.apache.thrift.TBase<getAgeOffRuleById_result, getAgeOffRuleById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAgeOffRuleById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAgeOffRuleById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAgeOffRuleById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAgeOffRuleById_resultTupleSchemeFactory());
    }

    public AgeOffRule success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceAgeOffRuleNotFoundException ruleNotFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      RULE_NOT_FOUND((short)2, "ruleNotFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // RULE_NOT_FOUND
            return RULE_NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgeOffRule.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RULE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("ruleNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAgeOffRuleById_result.class, metaDataMap);
    }

    public getAgeOffRuleById_result() {
    }

    public getAgeOffRuleById_result(
      AgeOffRule success,
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceAgeOffRuleNotFoundException ruleNotFound)
    {
      this();
      this.success = success;
      this.security = security;
      this.ruleNotFound = ruleNotFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAgeOffRuleById_result(getAgeOffRuleById_result other) {
      if (other.isSetSuccess()) {
        this.success = new AgeOffRule(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetRuleNotFound()) {
        this.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException(other.ruleNotFound);
      }
    }

    public getAgeOffRuleById_result deepCopy() {
      return new getAgeOffRuleById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.ruleNotFound = null;
    }

    public AgeOffRule getSuccess() {
      return this.success;
    }

    public getAgeOffRuleById_result setSuccess(AgeOffRule success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getAgeOffRuleById_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceAgeOffRuleNotFoundException getRuleNotFound() {
      return this.ruleNotFound;
    }

    public getAgeOffRuleById_result setRuleNotFound(ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
      this.ruleNotFound = ruleNotFound;
      return this;
    }

    public void unsetRuleNotFound() {
      this.ruleNotFound = null;
    }

    /** Returns true if field ruleNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleNotFound() {
      return this.ruleNotFound != null;
    }

    public void setRuleNotFoundIsSet(boolean value) {
      if (!value) {
        this.ruleNotFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AgeOffRule)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case RULE_NOT_FOUND:
        if (value == null) {
          unsetRuleNotFound();
        } else {
          setRuleNotFound((ProvenanceAgeOffRuleNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case RULE_NOT_FOUND:
        return getRuleNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case RULE_NOT_FOUND:
        return isSetRuleNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAgeOffRuleById_result)
        return this.equals((getAgeOffRuleById_result)that);
      return false;
    }

    public boolean equals(getAgeOffRuleById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_ruleNotFound = true && this.isSetRuleNotFound();
      boolean that_present_ruleNotFound = true && that.isSetRuleNotFound();
      if (this_present_ruleNotFound || that_present_ruleNotFound) {
        if (!(this_present_ruleNotFound && that_present_ruleNotFound))
          return false;
        if (!this.ruleNotFound.equals(that.ruleNotFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_ruleNotFound = true && (isSetRuleNotFound());
      builder.append(present_ruleNotFound);
      if (present_ruleNotFound)
        builder.append(ruleNotFound);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAgeOffRuleById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleNotFound()).compareTo(other.isSetRuleNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleNotFound, other.ruleNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAgeOffRuleById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleNotFound:");
      if (this.ruleNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleNotFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAgeOffRuleById_resultStandardSchemeFactory implements SchemeFactory {
      public getAgeOffRuleById_resultStandardScheme getScheme() {
        return new getAgeOffRuleById_resultStandardScheme();
      }
    }

    private static class getAgeOffRuleById_resultStandardScheme extends StandardScheme<getAgeOffRuleById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAgeOffRuleById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AgeOffRule();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
                struct.ruleNotFound.read(iprot);
                struct.setRuleNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAgeOffRuleById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ruleNotFound != null) {
          oprot.writeFieldBegin(RULE_NOT_FOUND_FIELD_DESC);
          struct.ruleNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAgeOffRuleById_resultTupleSchemeFactory implements SchemeFactory {
      public getAgeOffRuleById_resultTupleScheme getScheme() {
        return new getAgeOffRuleById_resultTupleScheme();
      }
    }

    private static class getAgeOffRuleById_resultTupleScheme extends TupleScheme<getAgeOffRuleById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAgeOffRuleById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetRuleNotFound()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetRuleNotFound()) {
          struct.ruleNotFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAgeOffRuleById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new AgeOffRule();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
          struct.ruleNotFound.read(iprot);
          struct.setRuleNotFoundIsSet(true);
        }
      }
    }

  }

  public static class getAgeOffRule_args implements org.apache.thrift.TBase<getAgeOffRule_args, getAgeOffRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAgeOffRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAgeOffRule_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAgeOffRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAgeOffRule_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAgeOffRule_args.class, metaDataMap);
    }

    public getAgeOffRule_args() {
    }

    public getAgeOffRule_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      String name)
    {
      this();
      this.securityToken = securityToken;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAgeOffRule_args(getAgeOffRule_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getAgeOffRule_args deepCopy() {
      return new getAgeOffRule_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.name = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public getAgeOffRule_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public getAgeOffRule_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAgeOffRule_args)
        return this.equals((getAgeOffRule_args)that);
      return false;
    }

    public boolean equals(getAgeOffRule_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_name = true && (isSetName());
      builder.append(present_name);
      if (present_name)
        builder.append(name);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAgeOffRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAgeOffRule_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAgeOffRule_argsStandardSchemeFactory implements SchemeFactory {
      public getAgeOffRule_argsStandardScheme getScheme() {
        return new getAgeOffRule_argsStandardScheme();
      }
    }

    private static class getAgeOffRule_argsStandardScheme extends StandardScheme<getAgeOffRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAgeOffRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAgeOffRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAgeOffRule_argsTupleSchemeFactory implements SchemeFactory {
      public getAgeOffRule_argsTupleScheme getScheme() {
        return new getAgeOffRule_argsTupleScheme();
      }
    }

    private static class getAgeOffRule_argsTupleScheme extends TupleScheme<getAgeOffRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAgeOffRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        oprot.writeString(struct.name);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAgeOffRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }

  }

  public static class getAgeOffRule_result implements org.apache.thrift.TBase<getAgeOffRule_result, getAgeOffRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAgeOffRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAgeOffRule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAgeOffRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAgeOffRule_resultTupleSchemeFactory());
    }

    public AgeOffRule success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceAgeOffRuleNotFoundException ruleNotFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      RULE_NOT_FOUND((short)3, "ruleNotFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 3: // RULE_NOT_FOUND
            return RULE_NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgeOffRule.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RULE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("ruleNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAgeOffRule_result.class, metaDataMap);
    }

    public getAgeOffRule_result() {
    }

    public getAgeOffRule_result(
      AgeOffRule success,
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceAgeOffRuleNotFoundException ruleNotFound)
    {
      this();
      this.success = success;
      this.security = security;
      this.ruleNotFound = ruleNotFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAgeOffRule_result(getAgeOffRule_result other) {
      if (other.isSetSuccess()) {
        this.success = new AgeOffRule(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetRuleNotFound()) {
        this.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException(other.ruleNotFound);
      }
    }

    public getAgeOffRule_result deepCopy() {
      return new getAgeOffRule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.ruleNotFound = null;
    }

    public AgeOffRule getSuccess() {
      return this.success;
    }

    public getAgeOffRule_result setSuccess(AgeOffRule success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getAgeOffRule_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceAgeOffRuleNotFoundException getRuleNotFound() {
      return this.ruleNotFound;
    }

    public getAgeOffRule_result setRuleNotFound(ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
      this.ruleNotFound = ruleNotFound;
      return this;
    }

    public void unsetRuleNotFound() {
      this.ruleNotFound = null;
    }

    /** Returns true if field ruleNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleNotFound() {
      return this.ruleNotFound != null;
    }

    public void setRuleNotFoundIsSet(boolean value) {
      if (!value) {
        this.ruleNotFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AgeOffRule)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case RULE_NOT_FOUND:
        if (value == null) {
          unsetRuleNotFound();
        } else {
          setRuleNotFound((ProvenanceAgeOffRuleNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case RULE_NOT_FOUND:
        return getRuleNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case RULE_NOT_FOUND:
        return isSetRuleNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAgeOffRule_result)
        return this.equals((getAgeOffRule_result)that);
      return false;
    }

    public boolean equals(getAgeOffRule_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_ruleNotFound = true && this.isSetRuleNotFound();
      boolean that_present_ruleNotFound = true && that.isSetRuleNotFound();
      if (this_present_ruleNotFound || that_present_ruleNotFound) {
        if (!(this_present_ruleNotFound && that_present_ruleNotFound))
          return false;
        if (!this.ruleNotFound.equals(that.ruleNotFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_ruleNotFound = true && (isSetRuleNotFound());
      builder.append(present_ruleNotFound);
      if (present_ruleNotFound)
        builder.append(ruleNotFound);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAgeOffRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleNotFound()).compareTo(other.isSetRuleNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleNotFound, other.ruleNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAgeOffRule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleNotFound:");
      if (this.ruleNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleNotFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAgeOffRule_resultStandardSchemeFactory implements SchemeFactory {
      public getAgeOffRule_resultStandardScheme getScheme() {
        return new getAgeOffRule_resultStandardScheme();
      }
    }

    private static class getAgeOffRule_resultStandardScheme extends StandardScheme<getAgeOffRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAgeOffRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AgeOffRule();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RULE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
                struct.ruleNotFound.read(iprot);
                struct.setRuleNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAgeOffRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ruleNotFound != null) {
          oprot.writeFieldBegin(RULE_NOT_FOUND_FIELD_DESC);
          struct.ruleNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAgeOffRule_resultTupleSchemeFactory implements SchemeFactory {
      public getAgeOffRule_resultTupleScheme getScheme() {
        return new getAgeOffRule_resultTupleScheme();
      }
    }

    private static class getAgeOffRule_resultTupleScheme extends TupleScheme<getAgeOffRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAgeOffRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetRuleNotFound()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetRuleNotFound()) {
          struct.ruleNotFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAgeOffRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new AgeOffRule();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
          struct.ruleNotFound.read(iprot);
          struct.setRuleNotFoundIsSet(true);
        }
      }
    }

  }

  public static class updateAgeOffRule_args implements org.apache.thrift.TBase<updateAgeOffRule_args, updateAgeOffRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAgeOffRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAgeOffRule_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RETENTION_DURATION_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("retentionDurationSeconds", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAgeOffRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAgeOffRule_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public String name; // required
    public long retentionDurationSeconds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      NAME((short)2, "name"),
      RETENTION_DURATION_SECONDS((short)3, "retentionDurationSeconds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // NAME
            return NAME;
          case 3: // RETENTION_DURATION_SECONDS
            return RETENTION_DURATION_SECONDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RETENTIONDURATIONSECONDS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RETENTION_DURATION_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("retentionDurationSeconds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAgeOffRule_args.class, metaDataMap);
    }

    public updateAgeOffRule_args() {
    }

    public updateAgeOffRule_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      String name,
      long retentionDurationSeconds)
    {
      this();
      this.securityToken = securityToken;
      this.name = name;
      this.retentionDurationSeconds = retentionDurationSeconds;
      setRetentionDurationSecondsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAgeOffRule_args(updateAgeOffRule_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.retentionDurationSeconds = other.retentionDurationSeconds;
    }

    public updateAgeOffRule_args deepCopy() {
      return new updateAgeOffRule_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.name = null;
      setRetentionDurationSecondsIsSet(false);
      this.retentionDurationSeconds = 0;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public updateAgeOffRule_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public updateAgeOffRule_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public long getRetentionDurationSeconds() {
      return this.retentionDurationSeconds;
    }

    public updateAgeOffRule_args setRetentionDurationSeconds(long retentionDurationSeconds) {
      this.retentionDurationSeconds = retentionDurationSeconds;
      setRetentionDurationSecondsIsSet(true);
      return this;
    }

    public void unsetRetentionDurationSeconds() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETENTIONDURATIONSECONDS_ISSET_ID);
    }

    /** Returns true if field retentionDurationSeconds is set (has been assigned a value) and false otherwise */
    public boolean isSetRetentionDurationSeconds() {
      return EncodingUtils.testBit(__isset_bitfield, __RETENTIONDURATIONSECONDS_ISSET_ID);
    }

    public void setRetentionDurationSecondsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETENTIONDURATIONSECONDS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case RETENTION_DURATION_SECONDS:
        if (value == null) {
          unsetRetentionDurationSeconds();
        } else {
          setRetentionDurationSeconds((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case NAME:
        return getName();

      case RETENTION_DURATION_SECONDS:
        return Long.valueOf(getRetentionDurationSeconds());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case NAME:
        return isSetName();
      case RETENTION_DURATION_SECONDS:
        return isSetRetentionDurationSeconds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAgeOffRule_args)
        return this.equals((updateAgeOffRule_args)that);
      return false;
    }

    public boolean equals(updateAgeOffRule_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_retentionDurationSeconds = true;
      boolean that_present_retentionDurationSeconds = true;
      if (this_present_retentionDurationSeconds || that_present_retentionDurationSeconds) {
        if (!(this_present_retentionDurationSeconds && that_present_retentionDurationSeconds))
          return false;
        if (this.retentionDurationSeconds != that.retentionDurationSeconds)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_name = true && (isSetName());
      builder.append(present_name);
      if (present_name)
        builder.append(name);

      boolean present_retentionDurationSeconds = true;
      builder.append(present_retentionDurationSeconds);
      if (present_retentionDurationSeconds)
        builder.append(retentionDurationSeconds);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(updateAgeOffRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRetentionDurationSeconds()).compareTo(other.isSetRetentionDurationSeconds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRetentionDurationSeconds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retentionDurationSeconds, other.retentionDurationSeconds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAgeOffRule_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("retentionDurationSeconds:");
      sb.append(this.retentionDurationSeconds);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'retentionDurationSeconds' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAgeOffRule_argsStandardSchemeFactory implements SchemeFactory {
      public updateAgeOffRule_argsStandardScheme getScheme() {
        return new updateAgeOffRule_argsStandardScheme();
      }
    }

    private static class updateAgeOffRule_argsStandardScheme extends StandardScheme<updateAgeOffRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAgeOffRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RETENTION_DURATION_SECONDS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.retentionDurationSeconds = iprot.readI64();
                struct.setRetentionDurationSecondsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetRetentionDurationSeconds()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'retentionDurationSeconds' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAgeOffRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RETENTION_DURATION_SECONDS_FIELD_DESC);
        oprot.writeI64(struct.retentionDurationSeconds);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAgeOffRule_argsTupleSchemeFactory implements SchemeFactory {
      public updateAgeOffRule_argsTupleScheme getScheme() {
        return new updateAgeOffRule_argsTupleScheme();
      }
    }

    private static class updateAgeOffRule_argsTupleScheme extends TupleScheme<updateAgeOffRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAgeOffRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        oprot.writeString(struct.name);
        oprot.writeI64(struct.retentionDurationSeconds);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAgeOffRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.retentionDurationSeconds = iprot.readI64();
        struct.setRetentionDurationSecondsIsSet(true);
      }
    }

  }

  public static class updateAgeOffRule_result implements org.apache.thrift.TBase<updateAgeOffRule_result, updateAgeOffRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAgeOffRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAgeOffRule_result");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ILLEGAL_AGE_OFF_DURATION_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("illegalAgeOffDurationSeconds", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ILLEGAL_AGE_OFF_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("illegalAgeOffName", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAgeOffRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAgeOffRule_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceAgeOffRuleNotFoundException ruleNotFound; // required
    public ProvenanceIllegalAgeOffDurationSecondsException illegalAgeOffDurationSeconds; // required
    public ProvenanceIllegalAgeOffRuleNameException illegalAgeOffName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security"),
      RULE_NOT_FOUND((short)2, "ruleNotFound"),
      ILLEGAL_AGE_OFF_DURATION_SECONDS((short)3, "illegalAgeOffDurationSeconds"),
      ILLEGAL_AGE_OFF_NAME((short)4, "illegalAgeOffName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          case 2: // RULE_NOT_FOUND
            return RULE_NOT_FOUND;
          case 3: // ILLEGAL_AGE_OFF_DURATION_SECONDS
            return ILLEGAL_AGE_OFF_DURATION_SECONDS;
          case 4: // ILLEGAL_AGE_OFF_NAME
            return ILLEGAL_AGE_OFF_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RULE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("ruleNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ILLEGAL_AGE_OFF_DURATION_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("illegalAgeOffDurationSeconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ILLEGAL_AGE_OFF_NAME, new org.apache.thrift.meta_data.FieldMetaData("illegalAgeOffName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAgeOffRule_result.class, metaDataMap);
    }

    public updateAgeOffRule_result() {
    }

    public updateAgeOffRule_result(
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceAgeOffRuleNotFoundException ruleNotFound,
      ProvenanceIllegalAgeOffDurationSecondsException illegalAgeOffDurationSeconds,
      ProvenanceIllegalAgeOffRuleNameException illegalAgeOffName)
    {
      this();
      this.security = security;
      this.ruleNotFound = ruleNotFound;
      this.illegalAgeOffDurationSeconds = illegalAgeOffDurationSeconds;
      this.illegalAgeOffName = illegalAgeOffName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAgeOffRule_result(updateAgeOffRule_result other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetRuleNotFound()) {
        this.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException(other.ruleNotFound);
      }
      if (other.isSetIllegalAgeOffDurationSeconds()) {
        this.illegalAgeOffDurationSeconds = new ProvenanceIllegalAgeOffDurationSecondsException(other.illegalAgeOffDurationSeconds);
      }
      if (other.isSetIllegalAgeOffName()) {
        this.illegalAgeOffName = new ProvenanceIllegalAgeOffRuleNameException(other.illegalAgeOffName);
      }
    }

    public updateAgeOffRule_result deepCopy() {
      return new updateAgeOffRule_result(this);
    }

    @Override
    public void clear() {
      this.security = null;
      this.ruleNotFound = null;
      this.illegalAgeOffDurationSeconds = null;
      this.illegalAgeOffName = null;
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public updateAgeOffRule_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceAgeOffRuleNotFoundException getRuleNotFound() {
      return this.ruleNotFound;
    }

    public updateAgeOffRule_result setRuleNotFound(ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
      this.ruleNotFound = ruleNotFound;
      return this;
    }

    public void unsetRuleNotFound() {
      this.ruleNotFound = null;
    }

    /** Returns true if field ruleNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleNotFound() {
      return this.ruleNotFound != null;
    }

    public void setRuleNotFoundIsSet(boolean value) {
      if (!value) {
        this.ruleNotFound = null;
      }
    }

    public ProvenanceIllegalAgeOffDurationSecondsException getIllegalAgeOffDurationSeconds() {
      return this.illegalAgeOffDurationSeconds;
    }

    public updateAgeOffRule_result setIllegalAgeOffDurationSeconds(ProvenanceIllegalAgeOffDurationSecondsException illegalAgeOffDurationSeconds) {
      this.illegalAgeOffDurationSeconds = illegalAgeOffDurationSeconds;
      return this;
    }

    public void unsetIllegalAgeOffDurationSeconds() {
      this.illegalAgeOffDurationSeconds = null;
    }

    /** Returns true if field illegalAgeOffDurationSeconds is set (has been assigned a value) and false otherwise */
    public boolean isSetIllegalAgeOffDurationSeconds() {
      return this.illegalAgeOffDurationSeconds != null;
    }

    public void setIllegalAgeOffDurationSecondsIsSet(boolean value) {
      if (!value) {
        this.illegalAgeOffDurationSeconds = null;
      }
    }

    public ProvenanceIllegalAgeOffRuleNameException getIllegalAgeOffName() {
      return this.illegalAgeOffName;
    }

    public updateAgeOffRule_result setIllegalAgeOffName(ProvenanceIllegalAgeOffRuleNameException illegalAgeOffName) {
      this.illegalAgeOffName = illegalAgeOffName;
      return this;
    }

    public void unsetIllegalAgeOffName() {
      this.illegalAgeOffName = null;
    }

    /** Returns true if field illegalAgeOffName is set (has been assigned a value) and false otherwise */
    public boolean isSetIllegalAgeOffName() {
      return this.illegalAgeOffName != null;
    }

    public void setIllegalAgeOffNameIsSet(boolean value) {
      if (!value) {
        this.illegalAgeOffName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case RULE_NOT_FOUND:
        if (value == null) {
          unsetRuleNotFound();
        } else {
          setRuleNotFound((ProvenanceAgeOffRuleNotFoundException)value);
        }
        break;

      case ILLEGAL_AGE_OFF_DURATION_SECONDS:
        if (value == null) {
          unsetIllegalAgeOffDurationSeconds();
        } else {
          setIllegalAgeOffDurationSeconds((ProvenanceIllegalAgeOffDurationSecondsException)value);
        }
        break;

      case ILLEGAL_AGE_OFF_NAME:
        if (value == null) {
          unsetIllegalAgeOffName();
        } else {
          setIllegalAgeOffName((ProvenanceIllegalAgeOffRuleNameException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      case RULE_NOT_FOUND:
        return getRuleNotFound();

      case ILLEGAL_AGE_OFF_DURATION_SECONDS:
        return getIllegalAgeOffDurationSeconds();

      case ILLEGAL_AGE_OFF_NAME:
        return getIllegalAgeOffName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      case RULE_NOT_FOUND:
        return isSetRuleNotFound();
      case ILLEGAL_AGE_OFF_DURATION_SECONDS:
        return isSetIllegalAgeOffDurationSeconds();
      case ILLEGAL_AGE_OFF_NAME:
        return isSetIllegalAgeOffName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAgeOffRule_result)
        return this.equals((updateAgeOffRule_result)that);
      return false;
    }

    public boolean equals(updateAgeOffRule_result that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_ruleNotFound = true && this.isSetRuleNotFound();
      boolean that_present_ruleNotFound = true && that.isSetRuleNotFound();
      if (this_present_ruleNotFound || that_present_ruleNotFound) {
        if (!(this_present_ruleNotFound && that_present_ruleNotFound))
          return false;
        if (!this.ruleNotFound.equals(that.ruleNotFound))
          return false;
      }

      boolean this_present_illegalAgeOffDurationSeconds = true && this.isSetIllegalAgeOffDurationSeconds();
      boolean that_present_illegalAgeOffDurationSeconds = true && that.isSetIllegalAgeOffDurationSeconds();
      if (this_present_illegalAgeOffDurationSeconds || that_present_illegalAgeOffDurationSeconds) {
        if (!(this_present_illegalAgeOffDurationSeconds && that_present_illegalAgeOffDurationSeconds))
          return false;
        if (!this.illegalAgeOffDurationSeconds.equals(that.illegalAgeOffDurationSeconds))
          return false;
      }

      boolean this_present_illegalAgeOffName = true && this.isSetIllegalAgeOffName();
      boolean that_present_illegalAgeOffName = true && that.isSetIllegalAgeOffName();
      if (this_present_illegalAgeOffName || that_present_illegalAgeOffName) {
        if (!(this_present_illegalAgeOffName && that_present_illegalAgeOffName))
          return false;
        if (!this.illegalAgeOffName.equals(that.illegalAgeOffName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_ruleNotFound = true && (isSetRuleNotFound());
      builder.append(present_ruleNotFound);
      if (present_ruleNotFound)
        builder.append(ruleNotFound);

      boolean present_illegalAgeOffDurationSeconds = true && (isSetIllegalAgeOffDurationSeconds());
      builder.append(present_illegalAgeOffDurationSeconds);
      if (present_illegalAgeOffDurationSeconds)
        builder.append(illegalAgeOffDurationSeconds);

      boolean present_illegalAgeOffName = true && (isSetIllegalAgeOffName());
      builder.append(present_illegalAgeOffName);
      if (present_illegalAgeOffName)
        builder.append(illegalAgeOffName);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(updateAgeOffRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleNotFound()).compareTo(other.isSetRuleNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleNotFound, other.ruleNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIllegalAgeOffDurationSeconds()).compareTo(other.isSetIllegalAgeOffDurationSeconds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIllegalAgeOffDurationSeconds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.illegalAgeOffDurationSeconds, other.illegalAgeOffDurationSeconds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIllegalAgeOffName()).compareTo(other.isSetIllegalAgeOffName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIllegalAgeOffName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.illegalAgeOffName, other.illegalAgeOffName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAgeOffRule_result(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleNotFound:");
      if (this.ruleNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("illegalAgeOffDurationSeconds:");
      if (this.illegalAgeOffDurationSeconds == null) {
        sb.append("null");
      } else {
        sb.append(this.illegalAgeOffDurationSeconds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("illegalAgeOffName:");
      if (this.illegalAgeOffName == null) {
        sb.append("null");
      } else {
        sb.append(this.illegalAgeOffName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAgeOffRule_resultStandardSchemeFactory implements SchemeFactory {
      public updateAgeOffRule_resultStandardScheme getScheme() {
        return new updateAgeOffRule_resultStandardScheme();
      }
    }

    private static class updateAgeOffRule_resultStandardScheme extends StandardScheme<updateAgeOffRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAgeOffRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
                struct.ruleNotFound.read(iprot);
                struct.setRuleNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ILLEGAL_AGE_OFF_DURATION_SECONDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.illegalAgeOffDurationSeconds = new ProvenanceIllegalAgeOffDurationSecondsException();
                struct.illegalAgeOffDurationSeconds.read(iprot);
                struct.setIllegalAgeOffDurationSecondsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ILLEGAL_AGE_OFF_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.illegalAgeOffName = new ProvenanceIllegalAgeOffRuleNameException();
                struct.illegalAgeOffName.read(iprot);
                struct.setIllegalAgeOffNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAgeOffRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ruleNotFound != null) {
          oprot.writeFieldBegin(RULE_NOT_FOUND_FIELD_DESC);
          struct.ruleNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.illegalAgeOffDurationSeconds != null) {
          oprot.writeFieldBegin(ILLEGAL_AGE_OFF_DURATION_SECONDS_FIELD_DESC);
          struct.illegalAgeOffDurationSeconds.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.illegalAgeOffName != null) {
          oprot.writeFieldBegin(ILLEGAL_AGE_OFF_NAME_FIELD_DESC);
          struct.illegalAgeOffName.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAgeOffRule_resultTupleSchemeFactory implements SchemeFactory {
      public updateAgeOffRule_resultTupleScheme getScheme() {
        return new updateAgeOffRule_resultTupleScheme();
      }
    }

    private static class updateAgeOffRule_resultTupleScheme extends TupleScheme<updateAgeOffRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAgeOffRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        if (struct.isSetRuleNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetIllegalAgeOffDurationSeconds()) {
          optionals.set(2);
        }
        if (struct.isSetIllegalAgeOffName()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetRuleNotFound()) {
          struct.ruleNotFound.write(oprot);
        }
        if (struct.isSetIllegalAgeOffDurationSeconds()) {
          struct.illegalAgeOffDurationSeconds.write(oprot);
        }
        if (struct.isSetIllegalAgeOffName()) {
          struct.illegalAgeOffName.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAgeOffRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
          struct.ruleNotFound.read(iprot);
          struct.setRuleNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.illegalAgeOffDurationSeconds = new ProvenanceIllegalAgeOffDurationSecondsException();
          struct.illegalAgeOffDurationSeconds.read(iprot);
          struct.setIllegalAgeOffDurationSecondsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.illegalAgeOffName = new ProvenanceIllegalAgeOffRuleNameException();
          struct.illegalAgeOffName.read(iprot);
          struct.setIllegalAgeOffNameIsSet(true);
        }
      }
    }

  }

  public static class getAllAgeOffRules_args implements org.apache.thrift.TBase<getAllAgeOffRules_args, getAllAgeOffRules_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllAgeOffRules_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllAgeOffRules_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllAgeOffRules_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllAgeOffRules_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public int limit; // required
    public int page; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      LIMIT((short)2, "limit"),
      PAGE((short)3, "page");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // LIMIT
            return LIMIT;
          case 3: // PAGE
            return PAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LIMIT_ISSET_ID = 0;
    private static final int __PAGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllAgeOffRules_args.class, metaDataMap);
    }

    public getAllAgeOffRules_args() {
    }

    public getAllAgeOffRules_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      int limit,
      int page)
    {
      this();
      this.securityToken = securityToken;
      this.limit = limit;
      setLimitIsSet(true);
      this.page = page;
      setPageIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllAgeOffRules_args(getAllAgeOffRules_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      this.limit = other.limit;
      this.page = other.page;
    }

    public getAllAgeOffRules_args deepCopy() {
      return new getAllAgeOffRules_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      setLimitIsSet(false);
      this.limit = 0;
      setPageIsSet(false);
      this.page = 0;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public getAllAgeOffRules_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public int getLimit() {
      return this.limit;
    }

    public getAllAgeOffRules_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public getAllAgeOffRules_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case LIMIT:
        return Integer.valueOf(getLimit());

      case PAGE:
        return Integer.valueOf(getPage());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case LIMIT:
        return isSetLimit();
      case PAGE:
        return isSetPage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllAgeOffRules_args)
        return this.equals((getAllAgeOffRules_args)that);
      return false;
    }

    public boolean equals(getAllAgeOffRules_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_limit = true;
      builder.append(present_limit);
      if (present_limit)
        builder.append(limit);

      boolean present_page = true;
      builder.append(present_page);
      if (present_page)
        builder.append(page);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAllAgeOffRules_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllAgeOffRules_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllAgeOffRules_argsStandardSchemeFactory implements SchemeFactory {
      public getAllAgeOffRules_argsStandardScheme getScheme() {
        return new getAllAgeOffRules_argsStandardScheme();
      }
    }

    private static class getAllAgeOffRules_argsStandardScheme extends StandardScheme<getAllAgeOffRules_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllAgeOffRules_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllAgeOffRules_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllAgeOffRules_argsTupleSchemeFactory implements SchemeFactory {
      public getAllAgeOffRules_argsTupleScheme getScheme() {
        return new getAllAgeOffRules_argsTupleScheme();
      }
    }

    private static class getAllAgeOffRules_argsTupleScheme extends TupleScheme<getAllAgeOffRules_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllAgeOffRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        BitSet optionals = new BitSet();
        if (struct.isSetLimit()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllAgeOffRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
      }
    }

  }

  public static class getAllAgeOffRules_result implements org.apache.thrift.TBase<getAllAgeOffRules_result, getAllAgeOffRules_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllAgeOffRules_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllAgeOffRules_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllAgeOffRules_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllAgeOffRules_resultTupleSchemeFactory());
    }

    public List<AgeOffRule> success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgeOffRule.class))));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllAgeOffRules_result.class, metaDataMap);
    }

    public getAllAgeOffRules_result() {
    }

    public getAllAgeOffRules_result(
      List<AgeOffRule> success,
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.success = success;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllAgeOffRules_result(getAllAgeOffRules_result other) {
      if (other.isSetSuccess()) {
        List<AgeOffRule> __this__success = new ArrayList<AgeOffRule>(other.success.size());
        for (AgeOffRule other_element : other.success) {
          __this__success.add(new AgeOffRule(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public getAllAgeOffRules_result deepCopy() {
      return new getAllAgeOffRules_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AgeOffRule> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AgeOffRule elem) {
      if (this.success == null) {
        this.success = new ArrayList<AgeOffRule>();
      }
      this.success.add(elem);
    }

    public List<AgeOffRule> getSuccess() {
      return this.success;
    }

    public getAllAgeOffRules_result setSuccess(List<AgeOffRule> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getAllAgeOffRules_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AgeOffRule>)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllAgeOffRules_result)
        return this.equals((getAllAgeOffRules_result)that);
      return false;
    }

    public boolean equals(getAllAgeOffRules_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAllAgeOffRules_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllAgeOffRules_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllAgeOffRules_resultStandardSchemeFactory implements SchemeFactory {
      public getAllAgeOffRules_resultStandardScheme getScheme() {
        return new getAllAgeOffRules_resultStandardScheme();
      }
    }

    private static class getAllAgeOffRules_resultStandardScheme extends StandardScheme<getAllAgeOffRules_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllAgeOffRules_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list198 = iprot.readListBegin();
                  struct.success = new ArrayList<AgeOffRule>(_list198.size);
                  for (int _i199 = 0; _i199 < _list198.size; ++_i199)
                  {
                    AgeOffRule _elem200;
                    _elem200 = new AgeOffRule();
                    _elem200.read(iprot);
                    struct.success.add(_elem200);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllAgeOffRules_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AgeOffRule _iter201 : struct.success)
            {
              _iter201.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllAgeOffRules_resultTupleSchemeFactory implements SchemeFactory {
      public getAllAgeOffRules_resultTupleScheme getScheme() {
        return new getAllAgeOffRules_resultTupleScheme();
      }
    }

    private static class getAllAgeOffRules_resultTupleScheme extends TupleScheme<getAllAgeOffRules_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllAgeOffRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AgeOffRule _iter202 : struct.success)
            {
              _iter202.write(oprot);
            }
          }
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllAgeOffRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list203 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AgeOffRule>(_list203.size);
            for (int _i204 = 0; _i204 < _list203.size; ++_i204)
            {
              AgeOffRule _elem205;
              _elem205 = new AgeOffRule();
              _elem205.read(iprot);
              struct.success.add(_elem205);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class countAgeOffRules_args implements org.apache.thrift.TBase<countAgeOffRules_args, countAgeOffRules_args._Fields>, java.io.Serializable, Cloneable, Comparable<countAgeOffRules_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countAgeOffRules_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countAgeOffRules_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countAgeOffRules_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countAgeOffRules_args.class, metaDataMap);
    }

    public countAgeOffRules_args() {
    }

    public countAgeOffRules_args(
      ezbake.base.thrift.EzSecurityToken securityToken)
    {
      this();
      this.securityToken = securityToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countAgeOffRules_args(countAgeOffRules_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
    }

    public countAgeOffRules_args deepCopy() {
      return new countAgeOffRules_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public countAgeOffRules_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countAgeOffRules_args)
        return this.equals((countAgeOffRules_args)that);
      return false;
    }

    public boolean equals(countAgeOffRules_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(countAgeOffRules_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countAgeOffRules_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countAgeOffRules_argsStandardSchemeFactory implements SchemeFactory {
      public countAgeOffRules_argsStandardScheme getScheme() {
        return new countAgeOffRules_argsStandardScheme();
      }
    }

    private static class countAgeOffRules_argsStandardScheme extends StandardScheme<countAgeOffRules_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countAgeOffRules_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countAgeOffRules_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countAgeOffRules_argsTupleSchemeFactory implements SchemeFactory {
      public countAgeOffRules_argsTupleScheme getScheme() {
        return new countAgeOffRules_argsTupleScheme();
      }
    }

    private static class countAgeOffRules_argsTupleScheme extends TupleScheme<countAgeOffRules_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countAgeOffRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countAgeOffRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
      }
    }

  }

  public static class countAgeOffRules_result implements org.apache.thrift.TBase<countAgeOffRules_result, countAgeOffRules_result._Fields>, java.io.Serializable, Cloneable, Comparable<countAgeOffRules_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countAgeOffRules_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countAgeOffRules_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countAgeOffRules_resultTupleSchemeFactory());
    }

    public int success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countAgeOffRules_result.class, metaDataMap);
    }

    public countAgeOffRules_result() {
    }

    public countAgeOffRules_result(
      int success,
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countAgeOffRules_result(countAgeOffRules_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public countAgeOffRules_result deepCopy() {
      return new countAgeOffRules_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.security = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public countAgeOffRules_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public countAgeOffRules_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countAgeOffRules_result)
        return this.equals((countAgeOffRules_result)that);
      return false;
    }

    public boolean equals(countAgeOffRules_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(countAgeOffRules_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countAgeOffRules_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countAgeOffRules_resultStandardSchemeFactory implements SchemeFactory {
      public countAgeOffRules_resultStandardScheme getScheme() {
        return new countAgeOffRules_resultStandardScheme();
      }
    }

    private static class countAgeOffRules_resultStandardScheme extends StandardScheme<countAgeOffRules_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countAgeOffRules_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countAgeOffRules_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countAgeOffRules_resultTupleSchemeFactory implements SchemeFactory {
      public countAgeOffRules_resultTupleScheme getScheme() {
        return new countAgeOffRules_resultTupleScheme();
      }
    }

    private static class countAgeOffRules_resultTupleScheme extends TupleScheme<countAgeOffRules_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countAgeOffRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countAgeOffRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class addDocument_args implements org.apache.thrift.TBase<addDocument_args, addDocument_args._Fields>, java.io.Serializable, Cloneable, Comparable<addDocument_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDocument_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("parents", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField AGE_OFF_RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("ageOffRules", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDocument_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDocument_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public String uri; // required
    public List<InheritanceInfo> parents; // required
    public List<AgeOffMapping> ageOffRules; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      URI((short)2, "uri"),
      PARENTS((short)3, "parents"),
      AGE_OFF_RULES((short)4, "ageOffRules");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // URI
            return URI;
          case 3: // PARENTS
            return PARENTS;
          case 4: // AGE_OFF_RULES
            return AGE_OFF_RULES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENTS, new org.apache.thrift.meta_data.FieldMetaData("parents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InheritanceInfo.class))));
      tmpMap.put(_Fields.AGE_OFF_RULES, new org.apache.thrift.meta_data.FieldMetaData("ageOffRules", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgeOffMapping.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDocument_args.class, metaDataMap);
    }

    public addDocument_args() {
    }

    public addDocument_args(
      ezbake.base.thrift.EzSecurityToken token,
      String uri,
      List<InheritanceInfo> parents,
      List<AgeOffMapping> ageOffRules)
    {
      this();
      this.token = token;
      this.uri = uri;
      this.parents = parents;
      this.ageOffRules = ageOffRules;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDocument_args(addDocument_args other) {
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      if (other.isSetUri()) {
        this.uri = other.uri;
      }
      if (other.isSetParents()) {
        List<InheritanceInfo> __this__parents = new ArrayList<InheritanceInfo>(other.parents.size());
        for (InheritanceInfo other_element : other.parents) {
          __this__parents.add(new InheritanceInfo(other_element));
        }
        this.parents = __this__parents;
      }
      if (other.isSetAgeOffRules()) {
        List<AgeOffMapping> __this__ageOffRules = new ArrayList<AgeOffMapping>(other.ageOffRules.size());
        for (AgeOffMapping other_element : other.ageOffRules) {
          __this__ageOffRules.add(new AgeOffMapping(other_element));
        }
        this.ageOffRules = __this__ageOffRules;
      }
    }

    public addDocument_args deepCopy() {
      return new addDocument_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.uri = null;
      this.parents = null;
      this.ageOffRules = null;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public addDocument_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getUri() {
      return this.uri;
    }

    public addDocument_args setUri(String uri) {
      this.uri = uri;
      return this;
    }

    public void unsetUri() {
      this.uri = null;
    }

    /** Returns true if field uri is set (has been assigned a value) and false otherwise */
    public boolean isSetUri() {
      return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
      if (!value) {
        this.uri = null;
      }
    }

    public int getParentsSize() {
      return (this.parents == null) ? 0 : this.parents.size();
    }

    public java.util.Iterator<InheritanceInfo> getParentsIterator() {
      return (this.parents == null) ? null : this.parents.iterator();
    }

    public void addToParents(InheritanceInfo elem) {
      if (this.parents == null) {
        this.parents = new ArrayList<InheritanceInfo>();
      }
      this.parents.add(elem);
    }

    public List<InheritanceInfo> getParents() {
      return this.parents;
    }

    public addDocument_args setParents(List<InheritanceInfo> parents) {
      this.parents = parents;
      return this;
    }

    public void unsetParents() {
      this.parents = null;
    }

    /** Returns true if field parents is set (has been assigned a value) and false otherwise */
    public boolean isSetParents() {
      return this.parents != null;
    }

    public void setParentsIsSet(boolean value) {
      if (!value) {
        this.parents = null;
      }
    }

    public int getAgeOffRulesSize() {
      return (this.ageOffRules == null) ? 0 : this.ageOffRules.size();
    }

    public java.util.Iterator<AgeOffMapping> getAgeOffRulesIterator() {
      return (this.ageOffRules == null) ? null : this.ageOffRules.iterator();
    }

    public void addToAgeOffRules(AgeOffMapping elem) {
      if (this.ageOffRules == null) {
        this.ageOffRules = new ArrayList<AgeOffMapping>();
      }
      this.ageOffRules.add(elem);
    }

    public List<AgeOffMapping> getAgeOffRules() {
      return this.ageOffRules;
    }

    public addDocument_args setAgeOffRules(List<AgeOffMapping> ageOffRules) {
      this.ageOffRules = ageOffRules;
      return this;
    }

    public void unsetAgeOffRules() {
      this.ageOffRules = null;
    }

    /** Returns true if field ageOffRules is set (has been assigned a value) and false otherwise */
    public boolean isSetAgeOffRules() {
      return this.ageOffRules != null;
    }

    public void setAgeOffRulesIsSet(boolean value) {
      if (!value) {
        this.ageOffRules = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case URI:
        if (value == null) {
          unsetUri();
        } else {
          setUri((String)value);
        }
        break;

      case PARENTS:
        if (value == null) {
          unsetParents();
        } else {
          setParents((List<InheritanceInfo>)value);
        }
        break;

      case AGE_OFF_RULES:
        if (value == null) {
          unsetAgeOffRules();
        } else {
          setAgeOffRules((List<AgeOffMapping>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case URI:
        return getUri();

      case PARENTS:
        return getParents();

      case AGE_OFF_RULES:
        return getAgeOffRules();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case URI:
        return isSetUri();
      case PARENTS:
        return isSetParents();
      case AGE_OFF_RULES:
        return isSetAgeOffRules();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDocument_args)
        return this.equals((addDocument_args)that);
      return false;
    }

    public boolean equals(addDocument_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_uri = true && this.isSetUri();
      boolean that_present_uri = true && that.isSetUri();
      if (this_present_uri || that_present_uri) {
        if (!(this_present_uri && that_present_uri))
          return false;
        if (!this.uri.equals(that.uri))
          return false;
      }

      boolean this_present_parents = true && this.isSetParents();
      boolean that_present_parents = true && that.isSetParents();
      if (this_present_parents || that_present_parents) {
        if (!(this_present_parents && that_present_parents))
          return false;
        if (!this.parents.equals(that.parents))
          return false;
      }

      boolean this_present_ageOffRules = true && this.isSetAgeOffRules();
      boolean that_present_ageOffRules = true && that.isSetAgeOffRules();
      if (this_present_ageOffRules || that_present_ageOffRules) {
        if (!(this_present_ageOffRules && that_present_ageOffRules))
          return false;
        if (!this.ageOffRules.equals(that.ageOffRules))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_token = true && (isSetToken());
      builder.append(present_token);
      if (present_token)
        builder.append(token);

      boolean present_uri = true && (isSetUri());
      builder.append(present_uri);
      if (present_uri)
        builder.append(uri);

      boolean present_parents = true && (isSetParents());
      builder.append(present_parents);
      if (present_parents)
        builder.append(parents);

      boolean present_ageOffRules = true && (isSetAgeOffRules());
      builder.append(present_ageOffRules);
      if (present_ageOffRules)
        builder.append(ageOffRules);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addDocument_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParents()).compareTo(other.isSetParents());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParents()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parents, other.parents);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAgeOffRules()).compareTo(other.isSetAgeOffRules());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgeOffRules()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageOffRules, other.ageOffRules);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDocument_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parents:");
      if (this.parents == null) {
        sb.append("null");
      } else {
        sb.append(this.parents);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ageOffRules:");
      if (this.ageOffRules == null) {
        sb.append("null");
      } else {
        sb.append(this.ageOffRules);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (uri == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uri' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDocument_argsStandardSchemeFactory implements SchemeFactory {
      public addDocument_argsStandardScheme getScheme() {
        return new addDocument_argsStandardScheme();
      }
    }

    private static class addDocument_argsStandardScheme extends StandardScheme<addDocument_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDocument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uri = iprot.readString();
                struct.setUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list206 = iprot.readListBegin();
                  struct.parents = new ArrayList<InheritanceInfo>(_list206.size);
                  for (int _i207 = 0; _i207 < _list206.size; ++_i207)
                  {
                    InheritanceInfo _elem208;
                    _elem208 = new InheritanceInfo();
                    _elem208.read(iprot);
                    struct.parents.add(_elem208);
                  }
                  iprot.readListEnd();
                }
                struct.setParentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AGE_OFF_RULES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list209 = iprot.readListBegin();
                  struct.ageOffRules = new ArrayList<AgeOffMapping>(_list209.size);
                  for (int _i210 = 0; _i210 < _list209.size; ++_i210)
                  {
                    AgeOffMapping _elem211;
                    _elem211 = new AgeOffMapping();
                    _elem211.read(iprot);
                    struct.ageOffRules.add(_elem211);
                  }
                  iprot.readListEnd();
                }
                struct.setAgeOffRulesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDocument_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uri != null) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
        if (struct.parents != null) {
          oprot.writeFieldBegin(PARENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parents.size()));
            for (InheritanceInfo _iter212 : struct.parents)
            {
              _iter212.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ageOffRules != null) {
          oprot.writeFieldBegin(AGE_OFF_RULES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ageOffRules.size()));
            for (AgeOffMapping _iter213 : struct.ageOffRules)
            {
              _iter213.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDocument_argsTupleSchemeFactory implements SchemeFactory {
      public addDocument_argsTupleScheme getScheme() {
        return new addDocument_argsTupleScheme();
      }
    }

    private static class addDocument_argsTupleScheme extends TupleScheme<addDocument_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDocument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        oprot.writeString(struct.uri);
        BitSet optionals = new BitSet();
        if (struct.isSetParents()) {
          optionals.set(0);
        }
        if (struct.isSetAgeOffRules()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParents()) {
          {
            oprot.writeI32(struct.parents.size());
            for (InheritanceInfo _iter214 : struct.parents)
            {
              _iter214.write(oprot);
            }
          }
        }
        if (struct.isSetAgeOffRules()) {
          {
            oprot.writeI32(struct.ageOffRules.size());
            for (AgeOffMapping _iter215 : struct.ageOffRules)
            {
              _iter215.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDocument_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        struct.uri = iprot.readString();
        struct.setUriIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list216 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.parents = new ArrayList<InheritanceInfo>(_list216.size);
            for (int _i217 = 0; _i217 < _list216.size; ++_i217)
            {
              InheritanceInfo _elem218;
              _elem218 = new InheritanceInfo();
              _elem218.read(iprot);
              struct.parents.add(_elem218);
            }
          }
          struct.setParentsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list219 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.ageOffRules = new ArrayList<AgeOffMapping>(_list219.size);
            for (int _i220 = 0; _i220 < _list219.size; ++_i220)
            {
              AgeOffMapping _elem221;
              _elem221 = new AgeOffMapping();
              _elem221.read(iprot);
              struct.ageOffRules.add(_elem221);
            }
          }
          struct.setAgeOffRulesIsSet(true);
        }
      }
    }

  }

  public static class addDocument_result implements org.apache.thrift.TBase<addDocument_result, addDocument_result._Fields>, java.io.Serializable, Cloneable, Comparable<addDocument_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDocument_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documentExists", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RULE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PARENT_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("parentNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField CIRCULAR_INHERITANCE_NOT_ALLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("circularInheritanceNotAllowed", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDocument_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDocument_resultTupleSchemeFactory());
    }

    public long success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceDocumentExistsException documentExists; // required
    public ProvenanceAgeOffRuleNotFoundException ruleNotFound; // required
    public ProvenanceParentDocumentNotFoundException parentNotFound; // required
    public ProvenanceCircularInheritanceNotAllowedException circularInheritanceNotAllowed; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      DOCUMENT_EXISTS((short)2, "documentExists"),
      RULE_NOT_FOUND((short)3, "ruleNotFound"),
      PARENT_NOT_FOUND((short)4, "parentNotFound"),
      CIRCULAR_INHERITANCE_NOT_ALLOWED((short)5, "circularInheritanceNotAllowed");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOCUMENT_EXISTS
            return DOCUMENT_EXISTS;
          case 3: // RULE_NOT_FOUND
            return RULE_NOT_FOUND;
          case 4: // PARENT_NOT_FOUND
            return PARENT_NOT_FOUND;
          case 5: // CIRCULAR_INHERITANCE_NOT_ALLOWED
            return CIRCULAR_INHERITANCE_NOT_ALLOWED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOCUMENT_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("documentExists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RULE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("ruleNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PARENT_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("parentNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CIRCULAR_INHERITANCE_NOT_ALLOWED, new org.apache.thrift.meta_data.FieldMetaData("circularInheritanceNotAllowed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDocument_result.class, metaDataMap);
    }

    public addDocument_result() {
    }

    public addDocument_result(
      long success,
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceDocumentExistsException documentExists,
      ProvenanceAgeOffRuleNotFoundException ruleNotFound,
      ProvenanceParentDocumentNotFoundException parentNotFound,
      ProvenanceCircularInheritanceNotAllowedException circularInheritanceNotAllowed)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.security = security;
      this.documentExists = documentExists;
      this.ruleNotFound = ruleNotFound;
      this.parentNotFound = parentNotFound;
      this.circularInheritanceNotAllowed = circularInheritanceNotAllowed;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDocument_result(addDocument_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDocumentExists()) {
        this.documentExists = new ProvenanceDocumentExistsException(other.documentExists);
      }
      if (other.isSetRuleNotFound()) {
        this.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException(other.ruleNotFound);
      }
      if (other.isSetParentNotFound()) {
        this.parentNotFound = new ProvenanceParentDocumentNotFoundException(other.parentNotFound);
      }
      if (other.isSetCircularInheritanceNotAllowed()) {
        this.circularInheritanceNotAllowed = new ProvenanceCircularInheritanceNotAllowedException(other.circularInheritanceNotAllowed);
      }
    }

    public addDocument_result deepCopy() {
      return new addDocument_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.security = null;
      this.documentExists = null;
      this.ruleNotFound = null;
      this.parentNotFound = null;
      this.circularInheritanceNotAllowed = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public addDocument_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public addDocument_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceDocumentExistsException getDocumentExists() {
      return this.documentExists;
    }

    public addDocument_result setDocumentExists(ProvenanceDocumentExistsException documentExists) {
      this.documentExists = documentExists;
      return this;
    }

    public void unsetDocumentExists() {
      this.documentExists = null;
    }

    /** Returns true if field documentExists is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentExists() {
      return this.documentExists != null;
    }

    public void setDocumentExistsIsSet(boolean value) {
      if (!value) {
        this.documentExists = null;
      }
    }

    public ProvenanceAgeOffRuleNotFoundException getRuleNotFound() {
      return this.ruleNotFound;
    }

    public addDocument_result setRuleNotFound(ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
      this.ruleNotFound = ruleNotFound;
      return this;
    }

    public void unsetRuleNotFound() {
      this.ruleNotFound = null;
    }

    /** Returns true if field ruleNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleNotFound() {
      return this.ruleNotFound != null;
    }

    public void setRuleNotFoundIsSet(boolean value) {
      if (!value) {
        this.ruleNotFound = null;
      }
    }

    public ProvenanceParentDocumentNotFoundException getParentNotFound() {
      return this.parentNotFound;
    }

    public addDocument_result setParentNotFound(ProvenanceParentDocumentNotFoundException parentNotFound) {
      this.parentNotFound = parentNotFound;
      return this;
    }

    public void unsetParentNotFound() {
      this.parentNotFound = null;
    }

    /** Returns true if field parentNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetParentNotFound() {
      return this.parentNotFound != null;
    }

    public void setParentNotFoundIsSet(boolean value) {
      if (!value) {
        this.parentNotFound = null;
      }
    }

    public ProvenanceCircularInheritanceNotAllowedException getCircularInheritanceNotAllowed() {
      return this.circularInheritanceNotAllowed;
    }

    public addDocument_result setCircularInheritanceNotAllowed(ProvenanceCircularInheritanceNotAllowedException circularInheritanceNotAllowed) {
      this.circularInheritanceNotAllowed = circularInheritanceNotAllowed;
      return this;
    }

    public void unsetCircularInheritanceNotAllowed() {
      this.circularInheritanceNotAllowed = null;
    }

    /** Returns true if field circularInheritanceNotAllowed is set (has been assigned a value) and false otherwise */
    public boolean isSetCircularInheritanceNotAllowed() {
      return this.circularInheritanceNotAllowed != null;
    }

    public void setCircularInheritanceNotAllowedIsSet(boolean value) {
      if (!value) {
        this.circularInheritanceNotAllowed = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOCUMENT_EXISTS:
        if (value == null) {
          unsetDocumentExists();
        } else {
          setDocumentExists((ProvenanceDocumentExistsException)value);
        }
        break;

      case RULE_NOT_FOUND:
        if (value == null) {
          unsetRuleNotFound();
        } else {
          setRuleNotFound((ProvenanceAgeOffRuleNotFoundException)value);
        }
        break;

      case PARENT_NOT_FOUND:
        if (value == null) {
          unsetParentNotFound();
        } else {
          setParentNotFound((ProvenanceParentDocumentNotFoundException)value);
        }
        break;

      case CIRCULAR_INHERITANCE_NOT_ALLOWED:
        if (value == null) {
          unsetCircularInheritanceNotAllowed();
        } else {
          setCircularInheritanceNotAllowed((ProvenanceCircularInheritanceNotAllowedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case SECURITY:
        return getSecurity();

      case DOCUMENT_EXISTS:
        return getDocumentExists();

      case RULE_NOT_FOUND:
        return getRuleNotFound();

      case PARENT_NOT_FOUND:
        return getParentNotFound();

      case CIRCULAR_INHERITANCE_NOT_ALLOWED:
        return getCircularInheritanceNotAllowed();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case DOCUMENT_EXISTS:
        return isSetDocumentExists();
      case RULE_NOT_FOUND:
        return isSetRuleNotFound();
      case PARENT_NOT_FOUND:
        return isSetParentNotFound();
      case CIRCULAR_INHERITANCE_NOT_ALLOWED:
        return isSetCircularInheritanceNotAllowed();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDocument_result)
        return this.equals((addDocument_result)that);
      return false;
    }

    public boolean equals(addDocument_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_documentExists = true && this.isSetDocumentExists();
      boolean that_present_documentExists = true && that.isSetDocumentExists();
      if (this_present_documentExists || that_present_documentExists) {
        if (!(this_present_documentExists && that_present_documentExists))
          return false;
        if (!this.documentExists.equals(that.documentExists))
          return false;
      }

      boolean this_present_ruleNotFound = true && this.isSetRuleNotFound();
      boolean that_present_ruleNotFound = true && that.isSetRuleNotFound();
      if (this_present_ruleNotFound || that_present_ruleNotFound) {
        if (!(this_present_ruleNotFound && that_present_ruleNotFound))
          return false;
        if (!this.ruleNotFound.equals(that.ruleNotFound))
          return false;
      }

      boolean this_present_parentNotFound = true && this.isSetParentNotFound();
      boolean that_present_parentNotFound = true && that.isSetParentNotFound();
      if (this_present_parentNotFound || that_present_parentNotFound) {
        if (!(this_present_parentNotFound && that_present_parentNotFound))
          return false;
        if (!this.parentNotFound.equals(that.parentNotFound))
          return false;
      }

      boolean this_present_circularInheritanceNotAllowed = true && this.isSetCircularInheritanceNotAllowed();
      boolean that_present_circularInheritanceNotAllowed = true && that.isSetCircularInheritanceNotAllowed();
      if (this_present_circularInheritanceNotAllowed || that_present_circularInheritanceNotAllowed) {
        if (!(this_present_circularInheritanceNotAllowed && that_present_circularInheritanceNotAllowed))
          return false;
        if (!this.circularInheritanceNotAllowed.equals(that.circularInheritanceNotAllowed))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_documentExists = true && (isSetDocumentExists());
      builder.append(present_documentExists);
      if (present_documentExists)
        builder.append(documentExists);

      boolean present_ruleNotFound = true && (isSetRuleNotFound());
      builder.append(present_ruleNotFound);
      if (present_ruleNotFound)
        builder.append(ruleNotFound);

      boolean present_parentNotFound = true && (isSetParentNotFound());
      builder.append(present_parentNotFound);
      if (present_parentNotFound)
        builder.append(parentNotFound);

      boolean present_circularInheritanceNotAllowed = true && (isSetCircularInheritanceNotAllowed());
      builder.append(present_circularInheritanceNotAllowed);
      if (present_circularInheritanceNotAllowed)
        builder.append(circularInheritanceNotAllowed);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addDocument_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentExists()).compareTo(other.isSetDocumentExists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentExists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentExists, other.documentExists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleNotFound()).compareTo(other.isSetRuleNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleNotFound, other.ruleNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentNotFound()).compareTo(other.isSetParentNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentNotFound, other.parentNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCircularInheritanceNotAllowed()).compareTo(other.isSetCircularInheritanceNotAllowed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCircularInheritanceNotAllowed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circularInheritanceNotAllowed, other.circularInheritanceNotAllowed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDocument_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentExists:");
      if (this.documentExists == null) {
        sb.append("null");
      } else {
        sb.append(this.documentExists);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleNotFound:");
      if (this.ruleNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentNotFound:");
      if (this.parentNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.parentNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("circularInheritanceNotAllowed:");
      if (this.circularInheritanceNotAllowed == null) {
        sb.append("null");
      } else {
        sb.append(this.circularInheritanceNotAllowed);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDocument_resultStandardSchemeFactory implements SchemeFactory {
      public addDocument_resultStandardScheme getScheme() {
        return new addDocument_resultStandardScheme();
      }
    }

    private static class addDocument_resultStandardScheme extends StandardScheme<addDocument_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDocument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.documentExists = new ProvenanceDocumentExistsException();
                struct.documentExists.read(iprot);
                struct.setDocumentExistsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RULE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
                struct.ruleNotFound.read(iprot);
                struct.setRuleNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARENT_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parentNotFound = new ProvenanceParentDocumentNotFoundException();
                struct.parentNotFound.read(iprot);
                struct.setParentNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CIRCULAR_INHERITANCE_NOT_ALLOWED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.circularInheritanceNotAllowed = new ProvenanceCircularInheritanceNotAllowedException();
                struct.circularInheritanceNotAllowed.read(iprot);
                struct.setCircularInheritanceNotAllowedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDocument_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.documentExists != null) {
          oprot.writeFieldBegin(DOCUMENT_EXISTS_FIELD_DESC);
          struct.documentExists.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ruleNotFound != null) {
          oprot.writeFieldBegin(RULE_NOT_FOUND_FIELD_DESC);
          struct.ruleNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parentNotFound != null) {
          oprot.writeFieldBegin(PARENT_NOT_FOUND_FIELD_DESC);
          struct.parentNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.circularInheritanceNotAllowed != null) {
          oprot.writeFieldBegin(CIRCULAR_INHERITANCE_NOT_ALLOWED_FIELD_DESC);
          struct.circularInheritanceNotAllowed.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDocument_resultTupleSchemeFactory implements SchemeFactory {
      public addDocument_resultTupleScheme getScheme() {
        return new addDocument_resultTupleScheme();
      }
    }

    private static class addDocument_resultTupleScheme extends TupleScheme<addDocument_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDocument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetDocumentExists()) {
          optionals.set(2);
        }
        if (struct.isSetRuleNotFound()) {
          optionals.set(3);
        }
        if (struct.isSetParentNotFound()) {
          optionals.set(4);
        }
        if (struct.isSetCircularInheritanceNotAllowed()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDocumentExists()) {
          struct.documentExists.write(oprot);
        }
        if (struct.isSetRuleNotFound()) {
          struct.ruleNotFound.write(oprot);
        }
        if (struct.isSetParentNotFound()) {
          struct.parentNotFound.write(oprot);
        }
        if (struct.isSetCircularInheritanceNotAllowed()) {
          struct.circularInheritanceNotAllowed.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDocument_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.documentExists = new ProvenanceDocumentExistsException();
          struct.documentExists.read(iprot);
          struct.setDocumentExistsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
          struct.ruleNotFound.read(iprot);
          struct.setRuleNotFoundIsSet(true);
        }
        if (incoming.get(4)) {
          struct.parentNotFound = new ProvenanceParentDocumentNotFoundException();
          struct.parentNotFound.read(iprot);
          struct.setParentNotFoundIsSet(true);
        }
        if (incoming.get(5)) {
          struct.circularInheritanceNotAllowed = new ProvenanceCircularInheritanceNotAllowedException();
          struct.circularInheritanceNotAllowed.read(iprot);
          struct.setCircularInheritanceNotAllowedIsSet(true);
        }
      }
    }

  }

  public static class addDocuments_args implements org.apache.thrift.TBase<addDocuments_args, addDocuments_args._Fields>, java.io.Serializable, Cloneable, Comparable<addDocuments_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDocuments_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("documents", org.apache.thrift.protocol.TType.SET, (short)2);
    private static final org.apache.thrift.protocol.TField AGE_OFF_RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("ageOffRules", org.apache.thrift.protocol.TType.SET, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDocuments_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDocuments_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public Set<AddDocumentEntry> documents; // required
    public Set<AgeOffMapping> ageOffRules; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      DOCUMENTS((short)2, "documents"),
      AGE_OFF_RULES((short)3, "ageOffRules");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // DOCUMENTS
            return DOCUMENTS;
          case 3: // AGE_OFF_RULES
            return AGE_OFF_RULES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.DOCUMENTS, new org.apache.thrift.meta_data.FieldMetaData("documents", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddDocumentEntry.class))));
      tmpMap.put(_Fields.AGE_OFF_RULES, new org.apache.thrift.meta_data.FieldMetaData("ageOffRules", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgeOffMapping.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDocuments_args.class, metaDataMap);
    }

    public addDocuments_args() {
    }

    public addDocuments_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      Set<AddDocumentEntry> documents,
      Set<AgeOffMapping> ageOffRules)
    {
      this();
      this.securityToken = securityToken;
      this.documents = documents;
      this.ageOffRules = ageOffRules;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDocuments_args(addDocuments_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetDocuments()) {
        Set<AddDocumentEntry> __this__documents = new HashSet<AddDocumentEntry>(other.documents.size());
        for (AddDocumentEntry other_element : other.documents) {
          __this__documents.add(new AddDocumentEntry(other_element));
        }
        this.documents = __this__documents;
      }
      if (other.isSetAgeOffRules()) {
        Set<AgeOffMapping> __this__ageOffRules = new HashSet<AgeOffMapping>(other.ageOffRules.size());
        for (AgeOffMapping other_element : other.ageOffRules) {
          __this__ageOffRules.add(new AgeOffMapping(other_element));
        }
        this.ageOffRules = __this__ageOffRules;
      }
    }

    public addDocuments_args deepCopy() {
      return new addDocuments_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.documents = null;
      this.ageOffRules = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public addDocuments_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public int getDocumentsSize() {
      return (this.documents == null) ? 0 : this.documents.size();
    }

    public java.util.Iterator<AddDocumentEntry> getDocumentsIterator() {
      return (this.documents == null) ? null : this.documents.iterator();
    }

    public void addToDocuments(AddDocumentEntry elem) {
      if (this.documents == null) {
        this.documents = new HashSet<AddDocumentEntry>();
      }
      this.documents.add(elem);
    }

    public Set<AddDocumentEntry> getDocuments() {
      return this.documents;
    }

    public addDocuments_args setDocuments(Set<AddDocumentEntry> documents) {
      this.documents = documents;
      return this;
    }

    public void unsetDocuments() {
      this.documents = null;
    }

    /** Returns true if field documents is set (has been assigned a value) and false otherwise */
    public boolean isSetDocuments() {
      return this.documents != null;
    }

    public void setDocumentsIsSet(boolean value) {
      if (!value) {
        this.documents = null;
      }
    }

    public int getAgeOffRulesSize() {
      return (this.ageOffRules == null) ? 0 : this.ageOffRules.size();
    }

    public java.util.Iterator<AgeOffMapping> getAgeOffRulesIterator() {
      return (this.ageOffRules == null) ? null : this.ageOffRules.iterator();
    }

    public void addToAgeOffRules(AgeOffMapping elem) {
      if (this.ageOffRules == null) {
        this.ageOffRules = new HashSet<AgeOffMapping>();
      }
      this.ageOffRules.add(elem);
    }

    public Set<AgeOffMapping> getAgeOffRules() {
      return this.ageOffRules;
    }

    public addDocuments_args setAgeOffRules(Set<AgeOffMapping> ageOffRules) {
      this.ageOffRules = ageOffRules;
      return this;
    }

    public void unsetAgeOffRules() {
      this.ageOffRules = null;
    }

    /** Returns true if field ageOffRules is set (has been assigned a value) and false otherwise */
    public boolean isSetAgeOffRules() {
      return this.ageOffRules != null;
    }

    public void setAgeOffRulesIsSet(boolean value) {
      if (!value) {
        this.ageOffRules = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case DOCUMENTS:
        if (value == null) {
          unsetDocuments();
        } else {
          setDocuments((Set<AddDocumentEntry>)value);
        }
        break;

      case AGE_OFF_RULES:
        if (value == null) {
          unsetAgeOffRules();
        } else {
          setAgeOffRules((Set<AgeOffMapping>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case DOCUMENTS:
        return getDocuments();

      case AGE_OFF_RULES:
        return getAgeOffRules();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case DOCUMENTS:
        return isSetDocuments();
      case AGE_OFF_RULES:
        return isSetAgeOffRules();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDocuments_args)
        return this.equals((addDocuments_args)that);
      return false;
    }

    public boolean equals(addDocuments_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_documents = true && this.isSetDocuments();
      boolean that_present_documents = true && that.isSetDocuments();
      if (this_present_documents || that_present_documents) {
        if (!(this_present_documents && that_present_documents))
          return false;
        if (!this.documents.equals(that.documents))
          return false;
      }

      boolean this_present_ageOffRules = true && this.isSetAgeOffRules();
      boolean that_present_ageOffRules = true && that.isSetAgeOffRules();
      if (this_present_ageOffRules || that_present_ageOffRules) {
        if (!(this_present_ageOffRules && that_present_ageOffRules))
          return false;
        if (!this.ageOffRules.equals(that.ageOffRules))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_documents = true && (isSetDocuments());
      builder.append(present_documents);
      if (present_documents)
        builder.append(documents);

      boolean present_ageOffRules = true && (isSetAgeOffRules());
      builder.append(present_ageOffRules);
      if (present_ageOffRules)
        builder.append(ageOffRules);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addDocuments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocuments()).compareTo(other.isSetDocuments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocuments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documents, other.documents);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAgeOffRules()).compareTo(other.isSetAgeOffRules());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgeOffRules()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageOffRules, other.ageOffRules);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDocuments_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documents:");
      if (this.documents == null) {
        sb.append("null");
      } else {
        sb.append(this.documents);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ageOffRules:");
      if (this.ageOffRules == null) {
        sb.append("null");
      } else {
        sb.append(this.ageOffRules);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (documents == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'documents' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDocuments_argsStandardSchemeFactory implements SchemeFactory {
      public addDocuments_argsStandardScheme getScheme() {
        return new addDocuments_argsStandardScheme();
      }
    }

    private static class addDocuments_argsStandardScheme extends StandardScheme<addDocuments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDocuments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set222 = iprot.readSetBegin();
                  struct.documents = new HashSet<AddDocumentEntry>(2*_set222.size);
                  for (int _i223 = 0; _i223 < _set222.size; ++_i223)
                  {
                    AddDocumentEntry _elem224;
                    _elem224 = new AddDocumentEntry();
                    _elem224.read(iprot);
                    struct.documents.add(_elem224);
                  }
                  iprot.readSetEnd();
                }
                struct.setDocumentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AGE_OFF_RULES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set225 = iprot.readSetBegin();
                  struct.ageOffRules = new HashSet<AgeOffMapping>(2*_set225.size);
                  for (int _i226 = 0; _i226 < _set225.size; ++_i226)
                  {
                    AgeOffMapping _elem227;
                    _elem227 = new AgeOffMapping();
                    _elem227.read(iprot);
                    struct.ageOffRules.add(_elem227);
                  }
                  iprot.readSetEnd();
                }
                struct.setAgeOffRulesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDocuments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.documents != null) {
          oprot.writeFieldBegin(DOCUMENTS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.documents.size()));
            for (AddDocumentEntry _iter228 : struct.documents)
            {
              _iter228.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ageOffRules != null) {
          oprot.writeFieldBegin(AGE_OFF_RULES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.ageOffRules.size()));
            for (AgeOffMapping _iter229 : struct.ageOffRules)
            {
              _iter229.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDocuments_argsTupleSchemeFactory implements SchemeFactory {
      public addDocuments_argsTupleScheme getScheme() {
        return new addDocuments_argsTupleScheme();
      }
    }

    private static class addDocuments_argsTupleScheme extends TupleScheme<addDocuments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDocuments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        {
          oprot.writeI32(struct.documents.size());
          for (AddDocumentEntry _iter230 : struct.documents)
          {
            _iter230.write(oprot);
          }
        }
        BitSet optionals = new BitSet();
        if (struct.isSetAgeOffRules()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAgeOffRules()) {
          {
            oprot.writeI32(struct.ageOffRules.size());
            for (AgeOffMapping _iter231 : struct.ageOffRules)
            {
              _iter231.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDocuments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        {
          org.apache.thrift.protocol.TSet _set232 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.documents = new HashSet<AddDocumentEntry>(2*_set232.size);
          for (int _i233 = 0; _i233 < _set232.size; ++_i233)
          {
            AddDocumentEntry _elem234;
            _elem234 = new AddDocumentEntry();
            _elem234.read(iprot);
            struct.documents.add(_elem234);
          }
        }
        struct.setDocumentsIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set235 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.ageOffRules = new HashSet<AgeOffMapping>(2*_set235.size);
            for (int _i236 = 0; _i236 < _set235.size; ++_i236)
            {
              AgeOffMapping _elem237;
              _elem237 = new AgeOffMapping();
              _elem237.read(iprot);
              struct.ageOffRules.add(_elem237);
            }
          }
          struct.setAgeOffRulesIsSet(true);
        }
      }
    }

  }

  public static class addDocuments_result implements org.apache.thrift.TBase<addDocuments_result, addDocuments_result._Fields>, java.io.Serializable, Cloneable, Comparable<addDocuments_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDocuments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField EXCEEDS_MAX_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("exceedsMaxSize", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDocuments_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDocuments_resultTupleSchemeFactory());
    }

    public Map<String,AddDocumentResult> success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceAgeOffRuleNotFoundException ruleNotFound; // required
    public ProvenanceExceedsMaxBatchSizeException exceedsMaxSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      RULE_NOT_FOUND((short)2, "ruleNotFound"),
      EXCEEDS_MAX_SIZE((short)3, "exceedsMaxSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // RULE_NOT_FOUND
            return RULE_NOT_FOUND;
          case 3: // EXCEEDS_MAX_SIZE
            return EXCEEDS_MAX_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddDocumentResult.class))));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RULE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("ruleNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXCEEDS_MAX_SIZE, new org.apache.thrift.meta_data.FieldMetaData("exceedsMaxSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDocuments_result.class, metaDataMap);
    }

    public addDocuments_result() {
    }

    public addDocuments_result(
      Map<String,AddDocumentResult> success,
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceAgeOffRuleNotFoundException ruleNotFound,
      ProvenanceExceedsMaxBatchSizeException exceedsMaxSize)
    {
      this();
      this.success = success;
      this.security = security;
      this.ruleNotFound = ruleNotFound;
      this.exceedsMaxSize = exceedsMaxSize;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDocuments_result(addDocuments_result other) {
      if (other.isSetSuccess()) {
        Map<String,AddDocumentResult> __this__success = new HashMap<String,AddDocumentResult>(other.success.size());
        for (Map.Entry<String, AddDocumentResult> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          AddDocumentResult other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          AddDocumentResult __this__success_copy_value = new AddDocumentResult(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetRuleNotFound()) {
        this.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException(other.ruleNotFound);
      }
      if (other.isSetExceedsMaxSize()) {
        this.exceedsMaxSize = new ProvenanceExceedsMaxBatchSizeException(other.exceedsMaxSize);
      }
    }

    public addDocuments_result deepCopy() {
      return new addDocuments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.ruleNotFound = null;
      this.exceedsMaxSize = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, AddDocumentResult val) {
      if (this.success == null) {
        this.success = new HashMap<String,AddDocumentResult>();
      }
      this.success.put(key, val);
    }

    public Map<String,AddDocumentResult> getSuccess() {
      return this.success;
    }

    public addDocuments_result setSuccess(Map<String,AddDocumentResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public addDocuments_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceAgeOffRuleNotFoundException getRuleNotFound() {
      return this.ruleNotFound;
    }

    public addDocuments_result setRuleNotFound(ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
      this.ruleNotFound = ruleNotFound;
      return this;
    }

    public void unsetRuleNotFound() {
      this.ruleNotFound = null;
    }

    /** Returns true if field ruleNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleNotFound() {
      return this.ruleNotFound != null;
    }

    public void setRuleNotFoundIsSet(boolean value) {
      if (!value) {
        this.ruleNotFound = null;
      }
    }

    public ProvenanceExceedsMaxBatchSizeException getExceedsMaxSize() {
      return this.exceedsMaxSize;
    }

    public addDocuments_result setExceedsMaxSize(ProvenanceExceedsMaxBatchSizeException exceedsMaxSize) {
      this.exceedsMaxSize = exceedsMaxSize;
      return this;
    }

    public void unsetExceedsMaxSize() {
      this.exceedsMaxSize = null;
    }

    /** Returns true if field exceedsMaxSize is set (has been assigned a value) and false otherwise */
    public boolean isSetExceedsMaxSize() {
      return this.exceedsMaxSize != null;
    }

    public void setExceedsMaxSizeIsSet(boolean value) {
      if (!value) {
        this.exceedsMaxSize = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,AddDocumentResult>)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case RULE_NOT_FOUND:
        if (value == null) {
          unsetRuleNotFound();
        } else {
          setRuleNotFound((ProvenanceAgeOffRuleNotFoundException)value);
        }
        break;

      case EXCEEDS_MAX_SIZE:
        if (value == null) {
          unsetExceedsMaxSize();
        } else {
          setExceedsMaxSize((ProvenanceExceedsMaxBatchSizeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case RULE_NOT_FOUND:
        return getRuleNotFound();

      case EXCEEDS_MAX_SIZE:
        return getExceedsMaxSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case RULE_NOT_FOUND:
        return isSetRuleNotFound();
      case EXCEEDS_MAX_SIZE:
        return isSetExceedsMaxSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDocuments_result)
        return this.equals((addDocuments_result)that);
      return false;
    }

    public boolean equals(addDocuments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_ruleNotFound = true && this.isSetRuleNotFound();
      boolean that_present_ruleNotFound = true && that.isSetRuleNotFound();
      if (this_present_ruleNotFound || that_present_ruleNotFound) {
        if (!(this_present_ruleNotFound && that_present_ruleNotFound))
          return false;
        if (!this.ruleNotFound.equals(that.ruleNotFound))
          return false;
      }

      boolean this_present_exceedsMaxSize = true && this.isSetExceedsMaxSize();
      boolean that_present_exceedsMaxSize = true && that.isSetExceedsMaxSize();
      if (this_present_exceedsMaxSize || that_present_exceedsMaxSize) {
        if (!(this_present_exceedsMaxSize && that_present_exceedsMaxSize))
          return false;
        if (!this.exceedsMaxSize.equals(that.exceedsMaxSize))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_ruleNotFound = true && (isSetRuleNotFound());
      builder.append(present_ruleNotFound);
      if (present_ruleNotFound)
        builder.append(ruleNotFound);

      boolean present_exceedsMaxSize = true && (isSetExceedsMaxSize());
      builder.append(present_exceedsMaxSize);
      if (present_exceedsMaxSize)
        builder.append(exceedsMaxSize);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addDocuments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleNotFound()).compareTo(other.isSetRuleNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleNotFound, other.ruleNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExceedsMaxSize()).compareTo(other.isSetExceedsMaxSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExceedsMaxSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceedsMaxSize, other.exceedsMaxSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDocuments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleNotFound:");
      if (this.ruleNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exceedsMaxSize:");
      if (this.exceedsMaxSize == null) {
        sb.append("null");
      } else {
        sb.append(this.exceedsMaxSize);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDocuments_resultStandardSchemeFactory implements SchemeFactory {
      public addDocuments_resultStandardScheme getScheme() {
        return new addDocuments_resultStandardScheme();
      }
    }

    private static class addDocuments_resultStandardScheme extends StandardScheme<addDocuments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDocuments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map238 = iprot.readMapBegin();
                  struct.success = new HashMap<String,AddDocumentResult>(2*_map238.size);
                  for (int _i239 = 0; _i239 < _map238.size; ++_i239)
                  {
                    String _key240;
                    AddDocumentResult _val241;
                    _key240 = iprot.readString();
                    _val241 = new AddDocumentResult();
                    _val241.read(iprot);
                    struct.success.put(_key240, _val241);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
                struct.ruleNotFound.read(iprot);
                struct.setRuleNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXCEEDS_MAX_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exceedsMaxSize = new ProvenanceExceedsMaxBatchSizeException();
                struct.exceedsMaxSize.read(iprot);
                struct.setExceedsMaxSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDocuments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, AddDocumentResult> _iter242 : struct.success.entrySet())
            {
              oprot.writeString(_iter242.getKey());
              _iter242.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ruleNotFound != null) {
          oprot.writeFieldBegin(RULE_NOT_FOUND_FIELD_DESC);
          struct.ruleNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exceedsMaxSize != null) {
          oprot.writeFieldBegin(EXCEEDS_MAX_SIZE_FIELD_DESC);
          struct.exceedsMaxSize.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDocuments_resultTupleSchemeFactory implements SchemeFactory {
      public addDocuments_resultTupleScheme getScheme() {
        return new addDocuments_resultTupleScheme();
      }
    }

    private static class addDocuments_resultTupleScheme extends TupleScheme<addDocuments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDocuments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetRuleNotFound()) {
          optionals.set(2);
        }
        if (struct.isSetExceedsMaxSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, AddDocumentResult> _iter243 : struct.success.entrySet())
            {
              oprot.writeString(_iter243.getKey());
              _iter243.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetRuleNotFound()) {
          struct.ruleNotFound.write(oprot);
        }
        if (struct.isSetExceedsMaxSize()) {
          struct.exceedsMaxSize.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDocuments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map244 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,AddDocumentResult>(2*_map244.size);
            for (int _i245 = 0; _i245 < _map244.size; ++_i245)
            {
              String _key246;
              AddDocumentResult _val247;
              _key246 = iprot.readString();
              _val247 = new AddDocumentResult();
              _val247.read(iprot);
              struct.success.put(_key246, _val247);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
          struct.ruleNotFound.read(iprot);
          struct.setRuleNotFoundIsSet(true);
        }
        if (incoming.get(3)) {
          struct.exceedsMaxSize = new ProvenanceExceedsMaxBatchSizeException();
          struct.exceedsMaxSize.read(iprot);
          struct.setExceedsMaxSizeIsSet(true);
        }
      }
    }

  }

  public static class getAddDocumentsMaxSize_args implements org.apache.thrift.TBase<getAddDocumentsMaxSize_args, getAddDocumentsMaxSize_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAddDocumentsMaxSize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAddDocumentsMaxSize_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAddDocumentsMaxSize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAddDocumentsMaxSize_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAddDocumentsMaxSize_args.class, metaDataMap);
    }

    public getAddDocumentsMaxSize_args() {
    }

    public getAddDocumentsMaxSize_args(
      ezbake.base.thrift.EzSecurityToken securityToken)
    {
      this();
      this.securityToken = securityToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAddDocumentsMaxSize_args(getAddDocumentsMaxSize_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
    }

    public getAddDocumentsMaxSize_args deepCopy() {
      return new getAddDocumentsMaxSize_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public getAddDocumentsMaxSize_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAddDocumentsMaxSize_args)
        return this.equals((getAddDocumentsMaxSize_args)that);
      return false;
    }

    public boolean equals(getAddDocumentsMaxSize_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAddDocumentsMaxSize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAddDocumentsMaxSize_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAddDocumentsMaxSize_argsStandardSchemeFactory implements SchemeFactory {
      public getAddDocumentsMaxSize_argsStandardScheme getScheme() {
        return new getAddDocumentsMaxSize_argsStandardScheme();
      }
    }

    private static class getAddDocumentsMaxSize_argsStandardScheme extends StandardScheme<getAddDocumentsMaxSize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAddDocumentsMaxSize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAddDocumentsMaxSize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAddDocumentsMaxSize_argsTupleSchemeFactory implements SchemeFactory {
      public getAddDocumentsMaxSize_argsTupleScheme getScheme() {
        return new getAddDocumentsMaxSize_argsTupleScheme();
      }
    }

    private static class getAddDocumentsMaxSize_argsTupleScheme extends TupleScheme<getAddDocumentsMaxSize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAddDocumentsMaxSize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAddDocumentsMaxSize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
      }
    }

  }

  public static class getAddDocumentsMaxSize_result implements org.apache.thrift.TBase<getAddDocumentsMaxSize_result, getAddDocumentsMaxSize_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAddDocumentsMaxSize_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAddDocumentsMaxSize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAddDocumentsMaxSize_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAddDocumentsMaxSize_resultTupleSchemeFactory());
    }

    public int success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAddDocumentsMaxSize_result.class, metaDataMap);
    }

    public getAddDocumentsMaxSize_result() {
    }

    public getAddDocumentsMaxSize_result(
      int success,
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAddDocumentsMaxSize_result(getAddDocumentsMaxSize_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public getAddDocumentsMaxSize_result deepCopy() {
      return new getAddDocumentsMaxSize_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.security = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getAddDocumentsMaxSize_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getAddDocumentsMaxSize_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAddDocumentsMaxSize_result)
        return this.equals((getAddDocumentsMaxSize_result)that);
      return false;
    }

    public boolean equals(getAddDocumentsMaxSize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true;
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAddDocumentsMaxSize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAddDocumentsMaxSize_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAddDocumentsMaxSize_resultStandardSchemeFactory implements SchemeFactory {
      public getAddDocumentsMaxSize_resultStandardScheme getScheme() {
        return new getAddDocumentsMaxSize_resultStandardScheme();
      }
    }

    private static class getAddDocumentsMaxSize_resultStandardScheme extends StandardScheme<getAddDocumentsMaxSize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAddDocumentsMaxSize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAddDocumentsMaxSize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAddDocumentsMaxSize_resultTupleSchemeFactory implements SchemeFactory {
      public getAddDocumentsMaxSize_resultTupleScheme getScheme() {
        return new getAddDocumentsMaxSize_resultTupleScheme();
      }
    }

    private static class getAddDocumentsMaxSize_resultTupleScheme extends TupleScheme<getAddDocumentsMaxSize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAddDocumentsMaxSize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAddDocumentsMaxSize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class startAgeOffEvent_args implements org.apache.thrift.TBase<startAgeOffEvent_args, startAgeOffEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<startAgeOffEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startAgeOffEvent_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField EFFECTIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("effectiveTime", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startAgeOffEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startAgeOffEvent_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public long ruleId; // required
    public ezbake.base.thrift.DateTime effectiveTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      RULE_ID((short)2, "ruleId"),
      EFFECTIVE_TIME((short)3, "effectiveTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // RULE_ID
            return RULE_ID;
          case 3: // EFFECTIVE_TIME
            return EFFECTIVE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RULEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.RULE_ID, new org.apache.thrift.meta_data.FieldMetaData("ruleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EFFECTIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("effectiveTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startAgeOffEvent_args.class, metaDataMap);
    }

    public startAgeOffEvent_args() {
    }

    public startAgeOffEvent_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      long ruleId,
      ezbake.base.thrift.DateTime effectiveTime)
    {
      this();
      this.securityToken = securityToken;
      this.ruleId = ruleId;
      setRuleIdIsSet(true);
      this.effectiveTime = effectiveTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startAgeOffEvent_args(startAgeOffEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      this.ruleId = other.ruleId;
      if (other.isSetEffectiveTime()) {
        this.effectiveTime = new ezbake.base.thrift.DateTime(other.effectiveTime);
      }
    }

    public startAgeOffEvent_args deepCopy() {
      return new startAgeOffEvent_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      setRuleIdIsSet(false);
      this.ruleId = 0;
      this.effectiveTime = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public startAgeOffEvent_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public long getRuleId() {
      return this.ruleId;
    }

    public startAgeOffEvent_args setRuleId(long ruleId) {
      this.ruleId = ruleId;
      setRuleIdIsSet(true);
      return this;
    }

    public void unsetRuleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RULEID_ISSET_ID);
    }

    /** Returns true if field ruleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleId() {
      return EncodingUtils.testBit(__isset_bitfield, __RULEID_ISSET_ID);
    }

    public void setRuleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RULEID_ISSET_ID, value);
    }

    public ezbake.base.thrift.DateTime getEffectiveTime() {
      return this.effectiveTime;
    }

    public startAgeOffEvent_args setEffectiveTime(ezbake.base.thrift.DateTime effectiveTime) {
      this.effectiveTime = effectiveTime;
      return this;
    }

    public void unsetEffectiveTime() {
      this.effectiveTime = null;
    }

    /** Returns true if field effectiveTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEffectiveTime() {
      return this.effectiveTime != null;
    }

    public void setEffectiveTimeIsSet(boolean value) {
      if (!value) {
        this.effectiveTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case RULE_ID:
        if (value == null) {
          unsetRuleId();
        } else {
          setRuleId((Long)value);
        }
        break;

      case EFFECTIVE_TIME:
        if (value == null) {
          unsetEffectiveTime();
        } else {
          setEffectiveTime((ezbake.base.thrift.DateTime)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case RULE_ID:
        return Long.valueOf(getRuleId());

      case EFFECTIVE_TIME:
        return getEffectiveTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case RULE_ID:
        return isSetRuleId();
      case EFFECTIVE_TIME:
        return isSetEffectiveTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startAgeOffEvent_args)
        return this.equals((startAgeOffEvent_args)that);
      return false;
    }

    public boolean equals(startAgeOffEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_ruleId = true;
      boolean that_present_ruleId = true;
      if (this_present_ruleId || that_present_ruleId) {
        if (!(this_present_ruleId && that_present_ruleId))
          return false;
        if (this.ruleId != that.ruleId)
          return false;
      }

      boolean this_present_effectiveTime = true && this.isSetEffectiveTime();
      boolean that_present_effectiveTime = true && that.isSetEffectiveTime();
      if (this_present_effectiveTime || that_present_effectiveTime) {
        if (!(this_present_effectiveTime && that_present_effectiveTime))
          return false;
        if (!this.effectiveTime.equals(that.effectiveTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_ruleId = true;
      builder.append(present_ruleId);
      if (present_ruleId)
        builder.append(ruleId);

      boolean present_effectiveTime = true && (isSetEffectiveTime());
      builder.append(present_effectiveTime);
      if (present_effectiveTime)
        builder.append(effectiveTime);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(startAgeOffEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleId()).compareTo(other.isSetRuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleId, other.ruleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEffectiveTime()).compareTo(other.isSetEffectiveTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEffectiveTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.effectiveTime, other.effectiveTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startAgeOffEvent_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleId:");
      sb.append(this.ruleId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("effectiveTime:");
      if (this.effectiveTime == null) {
        sb.append("null");
      } else {
        sb.append(this.effectiveTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'ruleId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
      if (effectiveTime != null) {
        effectiveTime.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startAgeOffEvent_argsStandardSchemeFactory implements SchemeFactory {
      public startAgeOffEvent_argsStandardScheme getScheme() {
        return new startAgeOffEvent_argsStandardScheme();
      }
    }

    private static class startAgeOffEvent_argsStandardScheme extends StandardScheme<startAgeOffEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startAgeOffEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ruleId = iprot.readI64();
                struct.setRuleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EFFECTIVE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.effectiveTime = new ezbake.base.thrift.DateTime();
                struct.effectiveTime.read(iprot);
                struct.setEffectiveTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetRuleId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'ruleId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startAgeOffEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RULE_ID_FIELD_DESC);
        oprot.writeI64(struct.ruleId);
        oprot.writeFieldEnd();
        if (struct.effectiveTime != null) {
          oprot.writeFieldBegin(EFFECTIVE_TIME_FIELD_DESC);
          struct.effectiveTime.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startAgeOffEvent_argsTupleSchemeFactory implements SchemeFactory {
      public startAgeOffEvent_argsTupleScheme getScheme() {
        return new startAgeOffEvent_argsTupleScheme();
      }
    }

    private static class startAgeOffEvent_argsTupleScheme extends TupleScheme<startAgeOffEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startAgeOffEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        oprot.writeI64(struct.ruleId);
        BitSet optionals = new BitSet();
        if (struct.isSetEffectiveTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEffectiveTime()) {
          struct.effectiveTime.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startAgeOffEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        struct.ruleId = iprot.readI64();
        struct.setRuleIdIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.effectiveTime = new ezbake.base.thrift.DateTime();
          struct.effectiveTime.read(iprot);
          struct.setEffectiveTimeIsSet(true);
        }
      }
    }

  }

  public static class startAgeOffEvent_result implements org.apache.thrift.TBase<startAgeOffEvent_result, startAgeOffEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<startAgeOffEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startAgeOffEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startAgeOffEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startAgeOffEvent_resultTupleSchemeFactory());
    }

    public AgeOffInitiationResult success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceAgeOffRuleNotFoundException ruleNotFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      RULE_NOT_FOUND((short)2, "ruleNotFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // RULE_NOT_FOUND
            return RULE_NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgeOffInitiationResult.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RULE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("ruleNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startAgeOffEvent_result.class, metaDataMap);
    }

    public startAgeOffEvent_result() {
    }

    public startAgeOffEvent_result(
      AgeOffInitiationResult success,
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceAgeOffRuleNotFoundException ruleNotFound)
    {
      this();
      this.success = success;
      this.security = security;
      this.ruleNotFound = ruleNotFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startAgeOffEvent_result(startAgeOffEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new AgeOffInitiationResult(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetRuleNotFound()) {
        this.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException(other.ruleNotFound);
      }
    }

    public startAgeOffEvent_result deepCopy() {
      return new startAgeOffEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.ruleNotFound = null;
    }

    public AgeOffInitiationResult getSuccess() {
      return this.success;
    }

    public startAgeOffEvent_result setSuccess(AgeOffInitiationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public startAgeOffEvent_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceAgeOffRuleNotFoundException getRuleNotFound() {
      return this.ruleNotFound;
    }

    public startAgeOffEvent_result setRuleNotFound(ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
      this.ruleNotFound = ruleNotFound;
      return this;
    }

    public void unsetRuleNotFound() {
      this.ruleNotFound = null;
    }

    /** Returns true if field ruleNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleNotFound() {
      return this.ruleNotFound != null;
    }

    public void setRuleNotFoundIsSet(boolean value) {
      if (!value) {
        this.ruleNotFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AgeOffInitiationResult)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case RULE_NOT_FOUND:
        if (value == null) {
          unsetRuleNotFound();
        } else {
          setRuleNotFound((ProvenanceAgeOffRuleNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case RULE_NOT_FOUND:
        return getRuleNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case RULE_NOT_FOUND:
        return isSetRuleNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startAgeOffEvent_result)
        return this.equals((startAgeOffEvent_result)that);
      return false;
    }

    public boolean equals(startAgeOffEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_ruleNotFound = true && this.isSetRuleNotFound();
      boolean that_present_ruleNotFound = true && that.isSetRuleNotFound();
      if (this_present_ruleNotFound || that_present_ruleNotFound) {
        if (!(this_present_ruleNotFound && that_present_ruleNotFound))
          return false;
        if (!this.ruleNotFound.equals(that.ruleNotFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_ruleNotFound = true && (isSetRuleNotFound());
      builder.append(present_ruleNotFound);
      if (present_ruleNotFound)
        builder.append(ruleNotFound);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(startAgeOffEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleNotFound()).compareTo(other.isSetRuleNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleNotFound, other.ruleNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startAgeOffEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleNotFound:");
      if (this.ruleNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleNotFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startAgeOffEvent_resultStandardSchemeFactory implements SchemeFactory {
      public startAgeOffEvent_resultStandardScheme getScheme() {
        return new startAgeOffEvent_resultStandardScheme();
      }
    }

    private static class startAgeOffEvent_resultStandardScheme extends StandardScheme<startAgeOffEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startAgeOffEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AgeOffInitiationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
                struct.ruleNotFound.read(iprot);
                struct.setRuleNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startAgeOffEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ruleNotFound != null) {
          oprot.writeFieldBegin(RULE_NOT_FOUND_FIELD_DESC);
          struct.ruleNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startAgeOffEvent_resultTupleSchemeFactory implements SchemeFactory {
      public startAgeOffEvent_resultTupleScheme getScheme() {
        return new startAgeOffEvent_resultTupleScheme();
      }
    }

    private static class startAgeOffEvent_resultTupleScheme extends TupleScheme<startAgeOffEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startAgeOffEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetRuleNotFound()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetRuleNotFound()) {
          struct.ruleNotFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startAgeOffEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new AgeOffInitiationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
          struct.ruleNotFound.read(iprot);
          struct.setRuleNotFoundIsSet(true);
        }
      }
    }

  }

  public static class markDocumentAsAged_args implements org.apache.thrift.TBase<markDocumentAsAged_args, markDocumentAsAged_args._Fields>, java.io.Serializable, Cloneable, Comparable<markDocumentAsAged_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markDocumentAsAged_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AGED_DOCUMENT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("agedDocumentIds", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markDocumentAsAged_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markDocumentAsAged_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public Set<Long> agedDocumentIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      AGED_DOCUMENT_IDS((short)2, "agedDocumentIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // AGED_DOCUMENT_IDS
            return AGED_DOCUMENT_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.AGED_DOCUMENT_IDS, new org.apache.thrift.meta_data.FieldMetaData("agedDocumentIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markDocumentAsAged_args.class, metaDataMap);
    }

    public markDocumentAsAged_args() {
    }

    public markDocumentAsAged_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      Set<Long> agedDocumentIds)
    {
      this();
      this.securityToken = securityToken;
      this.agedDocumentIds = agedDocumentIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markDocumentAsAged_args(markDocumentAsAged_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetAgedDocumentIds()) {
        Set<Long> __this__agedDocumentIds = new HashSet<Long>(other.agedDocumentIds);
        this.agedDocumentIds = __this__agedDocumentIds;
      }
    }

    public markDocumentAsAged_args deepCopy() {
      return new markDocumentAsAged_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.agedDocumentIds = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public markDocumentAsAged_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public int getAgedDocumentIdsSize() {
      return (this.agedDocumentIds == null) ? 0 : this.agedDocumentIds.size();
    }

    public java.util.Iterator<Long> getAgedDocumentIdsIterator() {
      return (this.agedDocumentIds == null) ? null : this.agedDocumentIds.iterator();
    }

    public void addToAgedDocumentIds(long elem) {
      if (this.agedDocumentIds == null) {
        this.agedDocumentIds = new HashSet<Long>();
      }
      this.agedDocumentIds.add(elem);
    }

    public Set<Long> getAgedDocumentIds() {
      return this.agedDocumentIds;
    }

    public markDocumentAsAged_args setAgedDocumentIds(Set<Long> agedDocumentIds) {
      this.agedDocumentIds = agedDocumentIds;
      return this;
    }

    public void unsetAgedDocumentIds() {
      this.agedDocumentIds = null;
    }

    /** Returns true if field agedDocumentIds is set (has been assigned a value) and false otherwise */
    public boolean isSetAgedDocumentIds() {
      return this.agedDocumentIds != null;
    }

    public void setAgedDocumentIdsIsSet(boolean value) {
      if (!value) {
        this.agedDocumentIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case AGED_DOCUMENT_IDS:
        if (value == null) {
          unsetAgedDocumentIds();
        } else {
          setAgedDocumentIds((Set<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case AGED_DOCUMENT_IDS:
        return getAgedDocumentIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case AGED_DOCUMENT_IDS:
        return isSetAgedDocumentIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markDocumentAsAged_args)
        return this.equals((markDocumentAsAged_args)that);
      return false;
    }

    public boolean equals(markDocumentAsAged_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_agedDocumentIds = true && this.isSetAgedDocumentIds();
      boolean that_present_agedDocumentIds = true && that.isSetAgedDocumentIds();
      if (this_present_agedDocumentIds || that_present_agedDocumentIds) {
        if (!(this_present_agedDocumentIds && that_present_agedDocumentIds))
          return false;
        if (!this.agedDocumentIds.equals(that.agedDocumentIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_agedDocumentIds = true && (isSetAgedDocumentIds());
      builder.append(present_agedDocumentIds);
      if (present_agedDocumentIds)
        builder.append(agedDocumentIds);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(markDocumentAsAged_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAgedDocumentIds()).compareTo(other.isSetAgedDocumentIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgedDocumentIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agedDocumentIds, other.agedDocumentIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markDocumentAsAged_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("agedDocumentIds:");
      if (this.agedDocumentIds == null) {
        sb.append("null");
      } else {
        sb.append(this.agedDocumentIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (agedDocumentIds == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'agedDocumentIds' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markDocumentAsAged_argsStandardSchemeFactory implements SchemeFactory {
      public markDocumentAsAged_argsStandardScheme getScheme() {
        return new markDocumentAsAged_argsStandardScheme();
      }
    }

    private static class markDocumentAsAged_argsStandardScheme extends StandardScheme<markDocumentAsAged_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markDocumentAsAged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AGED_DOCUMENT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set248 = iprot.readSetBegin();
                  struct.agedDocumentIds = new HashSet<Long>(2*_set248.size);
                  for (int _i249 = 0; _i249 < _set248.size; ++_i249)
                  {
                    long _elem250;
                    _elem250 = iprot.readI64();
                    struct.agedDocumentIds.add(_elem250);
                  }
                  iprot.readSetEnd();
                }
                struct.setAgedDocumentIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markDocumentAsAged_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.agedDocumentIds != null) {
          oprot.writeFieldBegin(AGED_DOCUMENT_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.agedDocumentIds.size()));
            for (long _iter251 : struct.agedDocumentIds)
            {
              oprot.writeI64(_iter251);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markDocumentAsAged_argsTupleSchemeFactory implements SchemeFactory {
      public markDocumentAsAged_argsTupleScheme getScheme() {
        return new markDocumentAsAged_argsTupleScheme();
      }
    }

    private static class markDocumentAsAged_argsTupleScheme extends TupleScheme<markDocumentAsAged_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markDocumentAsAged_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        {
          oprot.writeI32(struct.agedDocumentIds.size());
          for (long _iter252 : struct.agedDocumentIds)
          {
            oprot.writeI64(_iter252);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markDocumentAsAged_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        {
          org.apache.thrift.protocol.TSet _set253 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.agedDocumentIds = new HashSet<Long>(2*_set253.size);
          for (int _i254 = 0; _i254 < _set253.size; ++_i254)
          {
            long _elem255;
            _elem255 = iprot.readI64();
            struct.agedDocumentIds.add(_elem255);
          }
        }
        struct.setAgedDocumentIdsIsSet(true);
      }
    }

  }

  public static class markDocumentAsAged_result implements org.apache.thrift.TBase<markDocumentAsAged_result, markDocumentAsAged_result._Fields>, java.io.Serializable, Cloneable, Comparable<markDocumentAsAged_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markDocumentAsAged_result");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("documentNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markDocumentAsAged_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markDocumentAsAged_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceDocumentNotFoundException documentNotFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security"),
      DOCUMENT_NOT_FOUND((short)2, "documentNotFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOCUMENT_NOT_FOUND
            return DOCUMENT_NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOCUMENT_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("documentNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markDocumentAsAged_result.class, metaDataMap);
    }

    public markDocumentAsAged_result() {
    }

    public markDocumentAsAged_result(
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceDocumentNotFoundException documentNotFound)
    {
      this();
      this.security = security;
      this.documentNotFound = documentNotFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markDocumentAsAged_result(markDocumentAsAged_result other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDocumentNotFound()) {
        this.documentNotFound = new ProvenanceDocumentNotFoundException(other.documentNotFound);
      }
    }

    public markDocumentAsAged_result deepCopy() {
      return new markDocumentAsAged_result(this);
    }

    @Override
    public void clear() {
      this.security = null;
      this.documentNotFound = null;
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public markDocumentAsAged_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceDocumentNotFoundException getDocumentNotFound() {
      return this.documentNotFound;
    }

    public markDocumentAsAged_result setDocumentNotFound(ProvenanceDocumentNotFoundException documentNotFound) {
      this.documentNotFound = documentNotFound;
      return this;
    }

    public void unsetDocumentNotFound() {
      this.documentNotFound = null;
    }

    /** Returns true if field documentNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentNotFound() {
      return this.documentNotFound != null;
    }

    public void setDocumentNotFoundIsSet(boolean value) {
      if (!value) {
        this.documentNotFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOCUMENT_NOT_FOUND:
        if (value == null) {
          unsetDocumentNotFound();
        } else {
          setDocumentNotFound((ProvenanceDocumentNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      case DOCUMENT_NOT_FOUND:
        return getDocumentNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      case DOCUMENT_NOT_FOUND:
        return isSetDocumentNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markDocumentAsAged_result)
        return this.equals((markDocumentAsAged_result)that);
      return false;
    }

    public boolean equals(markDocumentAsAged_result that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_documentNotFound = true && this.isSetDocumentNotFound();
      boolean that_present_documentNotFound = true && that.isSetDocumentNotFound();
      if (this_present_documentNotFound || that_present_documentNotFound) {
        if (!(this_present_documentNotFound && that_present_documentNotFound))
          return false;
        if (!this.documentNotFound.equals(that.documentNotFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_documentNotFound = true && (isSetDocumentNotFound());
      builder.append(present_documentNotFound);
      if (present_documentNotFound)
        builder.append(documentNotFound);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(markDocumentAsAged_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentNotFound()).compareTo(other.isSetDocumentNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentNotFound, other.documentNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markDocumentAsAged_result(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentNotFound:");
      if (this.documentNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.documentNotFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markDocumentAsAged_resultStandardSchemeFactory implements SchemeFactory {
      public markDocumentAsAged_resultStandardScheme getScheme() {
        return new markDocumentAsAged_resultStandardScheme();
      }
    }

    private static class markDocumentAsAged_resultStandardScheme extends StandardScheme<markDocumentAsAged_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markDocumentAsAged_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.documentNotFound = new ProvenanceDocumentNotFoundException();
                struct.documentNotFound.read(iprot);
                struct.setDocumentNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markDocumentAsAged_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.documentNotFound != null) {
          oprot.writeFieldBegin(DOCUMENT_NOT_FOUND_FIELD_DESC);
          struct.documentNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markDocumentAsAged_resultTupleSchemeFactory implements SchemeFactory {
      public markDocumentAsAged_resultTupleScheme getScheme() {
        return new markDocumentAsAged_resultTupleScheme();
      }
    }

    private static class markDocumentAsAged_resultTupleScheme extends TupleScheme<markDocumentAsAged_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markDocumentAsAged_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        if (struct.isSetDocumentNotFound()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDocumentNotFound()) {
          struct.documentNotFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markDocumentAsAged_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.documentNotFound = new ProvenanceDocumentNotFoundException();
          struct.documentNotFound.read(iprot);
          struct.setDocumentNotFoundIsSet(true);
        }
      }
    }

  }

  public static class getDocumentInfo_args implements org.apache.thrift.TBase<getDocumentInfo_args, getDocumentInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDocumentInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocumentInfo_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDocumentInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDocumentInfo_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public long id; // required
    public String uri; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      ID((short)2, "id"),
      URI((short)3, "uri");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // ID
            return ID;
          case 3: // URI
            return URI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocumentInfo_args.class, metaDataMap);
    }

    public getDocumentInfo_args() {
    }

    public getDocumentInfo_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      long id,
      String uri)
    {
      this();
      this.securityToken = securityToken;
      this.id = id;
      setIdIsSet(true);
      this.uri = uri;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocumentInfo_args(getDocumentInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      this.id = other.id;
      if (other.isSetUri()) {
        this.uri = other.uri;
      }
    }

    public getDocumentInfo_args deepCopy() {
      return new getDocumentInfo_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      setIdIsSet(false);
      this.id = 0;
      this.uri = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public getDocumentInfo_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public long getId() {
      return this.id;
    }

    public getDocumentInfo_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getUri() {
      return this.uri;
    }

    public getDocumentInfo_args setUri(String uri) {
      this.uri = uri;
      return this;
    }

    public void unsetUri() {
      this.uri = null;
    }

    /** Returns true if field uri is set (has been assigned a value) and false otherwise */
    public boolean isSetUri() {
      return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
      if (!value) {
        this.uri = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case URI:
        if (value == null) {
          unsetUri();
        } else {
          setUri((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case ID:
        return Long.valueOf(getId());

      case URI:
        return getUri();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case ID:
        return isSetId();
      case URI:
        return isSetUri();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDocumentInfo_args)
        return this.equals((getDocumentInfo_args)that);
      return false;
    }

    public boolean equals(getDocumentInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_uri = true && this.isSetUri();
      boolean that_present_uri = true && that.isSetUri();
      if (this_present_uri || that_present_uri) {
        if (!(this_present_uri && that_present_uri))
          return false;
        if (!this.uri.equals(that.uri))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_id = true;
      builder.append(present_id);
      if (present_id)
        builder.append(id);

      boolean present_uri = true && (isSetUri());
      builder.append(present_uri);
      if (present_uri)
        builder.append(uri);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getDocumentInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocumentInfo_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocumentInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getDocumentInfo_argsStandardScheme getScheme() {
        return new getDocumentInfo_argsStandardScheme();
      }
    }

    private static class getDocumentInfo_argsStandardScheme extends StandardScheme<getDocumentInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocumentInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uri = iprot.readString();
                struct.setUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocumentInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.uri != null) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocumentInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getDocumentInfo_argsTupleScheme getScheme() {
        return new getDocumentInfo_argsTupleScheme();
      }
    }

    private static class getDocumentInfo_argsTupleScheme extends TupleScheme<getDocumentInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocumentInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetUri()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetUri()) {
          oprot.writeString(struct.uri);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocumentInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uri = iprot.readString();
          struct.setUriIsSet(true);
        }
      }
    }

  }

  public static class getDocumentInfo_result implements org.apache.thrift.TBase<getDocumentInfo_result, getDocumentInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDocumentInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocumentInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOC_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("docNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDocumentInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDocumentInfo_resultTupleSchemeFactory());
    }

    public DocumentInfo success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceDocumentNotFoundException docNotFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      DOC_NOT_FOUND((short)2, "docNotFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOC_NOT_FOUND
            return DOC_NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DocumentInfo.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOC_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("docNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocumentInfo_result.class, metaDataMap);
    }

    public getDocumentInfo_result() {
    }

    public getDocumentInfo_result(
      DocumentInfo success,
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceDocumentNotFoundException docNotFound)
    {
      this();
      this.success = success;
      this.security = security;
      this.docNotFound = docNotFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocumentInfo_result(getDocumentInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new DocumentInfo(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDocNotFound()) {
        this.docNotFound = new ProvenanceDocumentNotFoundException(other.docNotFound);
      }
    }

    public getDocumentInfo_result deepCopy() {
      return new getDocumentInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.docNotFound = null;
    }

    public DocumentInfo getSuccess() {
      return this.success;
    }

    public getDocumentInfo_result setSuccess(DocumentInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getDocumentInfo_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceDocumentNotFoundException getDocNotFound() {
      return this.docNotFound;
    }

    public getDocumentInfo_result setDocNotFound(ProvenanceDocumentNotFoundException docNotFound) {
      this.docNotFound = docNotFound;
      return this;
    }

    public void unsetDocNotFound() {
      this.docNotFound = null;
    }

    /** Returns true if field docNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetDocNotFound() {
      return this.docNotFound != null;
    }

    public void setDocNotFoundIsSet(boolean value) {
      if (!value) {
        this.docNotFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DocumentInfo)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOC_NOT_FOUND:
        if (value == null) {
          unsetDocNotFound();
        } else {
          setDocNotFound((ProvenanceDocumentNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case DOC_NOT_FOUND:
        return getDocNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case DOC_NOT_FOUND:
        return isSetDocNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDocumentInfo_result)
        return this.equals((getDocumentInfo_result)that);
      return false;
    }

    public boolean equals(getDocumentInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_docNotFound = true && this.isSetDocNotFound();
      boolean that_present_docNotFound = true && that.isSetDocNotFound();
      if (this_present_docNotFound || that_present_docNotFound) {
        if (!(this_present_docNotFound && that_present_docNotFound))
          return false;
        if (!this.docNotFound.equals(that.docNotFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_docNotFound = true && (isSetDocNotFound());
      builder.append(present_docNotFound);
      if (present_docNotFound)
        builder.append(docNotFound);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getDocumentInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocNotFound()).compareTo(other.isSetDocNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docNotFound, other.docNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocumentInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("docNotFound:");
      if (this.docNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.docNotFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocumentInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getDocumentInfo_resultStandardScheme getScheme() {
        return new getDocumentInfo_resultStandardScheme();
      }
    }

    private static class getDocumentInfo_resultStandardScheme extends StandardScheme<getDocumentInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocumentInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DocumentInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOC_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.docNotFound = new ProvenanceDocumentNotFoundException();
                struct.docNotFound.read(iprot);
                struct.setDocNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocumentInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.docNotFound != null) {
          oprot.writeFieldBegin(DOC_NOT_FOUND_FIELD_DESC);
          struct.docNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocumentInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getDocumentInfo_resultTupleScheme getScheme() {
        return new getDocumentInfo_resultTupleScheme();
      }
    }

    private static class getDocumentInfo_resultTupleScheme extends TupleScheme<getDocumentInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocumentInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetDocNotFound()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDocNotFound()) {
          struct.docNotFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocumentInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new DocumentInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.docNotFound = new ProvenanceDocumentNotFoundException();
          struct.docNotFound.read(iprot);
          struct.setDocNotFoundIsSet(true);
        }
      }
    }

  }

  public static class getDocumentAncestors_args implements org.apache.thrift.TBase<getDocumentAncestors_args, getDocumentAncestors_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDocumentAncestors_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocumentAncestors_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField URIS_FIELD_DESC = new org.apache.thrift.protocol.TField("uris", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDocumentAncestors_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDocumentAncestors_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public List<String> uris; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      URIS((short)2, "uris");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // URIS
            return URIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.URIS, new org.apache.thrift.meta_data.FieldMetaData("uris", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocumentAncestors_args.class, metaDataMap);
    }

    public getDocumentAncestors_args() {
    }

    public getDocumentAncestors_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      List<String> uris)
    {
      this();
      this.securityToken = securityToken;
      this.uris = uris;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocumentAncestors_args(getDocumentAncestors_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetUris()) {
        List<String> __this__uris = new ArrayList<String>(other.uris);
        this.uris = __this__uris;
      }
    }

    public getDocumentAncestors_args deepCopy() {
      return new getDocumentAncestors_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.uris = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public getDocumentAncestors_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public int getUrisSize() {
      return (this.uris == null) ? 0 : this.uris.size();
    }

    public java.util.Iterator<String> getUrisIterator() {
      return (this.uris == null) ? null : this.uris.iterator();
    }

    public void addToUris(String elem) {
      if (this.uris == null) {
        this.uris = new ArrayList<String>();
      }
      this.uris.add(elem);
    }

    public List<String> getUris() {
      return this.uris;
    }

    public getDocumentAncestors_args setUris(List<String> uris) {
      this.uris = uris;
      return this;
    }

    public void unsetUris() {
      this.uris = null;
    }

    /** Returns true if field uris is set (has been assigned a value) and false otherwise */
    public boolean isSetUris() {
      return this.uris != null;
    }

    public void setUrisIsSet(boolean value) {
      if (!value) {
        this.uris = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case URIS:
        if (value == null) {
          unsetUris();
        } else {
          setUris((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case URIS:
        return getUris();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case URIS:
        return isSetUris();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDocumentAncestors_args)
        return this.equals((getDocumentAncestors_args)that);
      return false;
    }

    public boolean equals(getDocumentAncestors_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_uris = true && this.isSetUris();
      boolean that_present_uris = true && that.isSetUris();
      if (this_present_uris || that_present_uris) {
        if (!(this_present_uris && that_present_uris))
          return false;
        if (!this.uris.equals(that.uris))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_uris = true && (isSetUris());
      builder.append(present_uris);
      if (present_uris)
        builder.append(uris);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getDocumentAncestors_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUris()).compareTo(other.isSetUris());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUris()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uris, other.uris);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocumentAncestors_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uris:");
      if (this.uris == null) {
        sb.append("null");
      } else {
        sb.append(this.uris);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (uris == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uris' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocumentAncestors_argsStandardSchemeFactory implements SchemeFactory {
      public getDocumentAncestors_argsStandardScheme getScheme() {
        return new getDocumentAncestors_argsStandardScheme();
      }
    }

    private static class getDocumentAncestors_argsStandardScheme extends StandardScheme<getDocumentAncestors_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocumentAncestors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URIS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                  struct.uris = new ArrayList<String>(_list256.size);
                  for (int _i257 = 0; _i257 < _list256.size; ++_i257)
                  {
                    String _elem258;
                    _elem258 = iprot.readString();
                    struct.uris.add(_elem258);
                  }
                  iprot.readListEnd();
                }
                struct.setUrisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocumentAncestors_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uris != null) {
          oprot.writeFieldBegin(URIS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.uris.size()));
            for (String _iter259 : struct.uris)
            {
              oprot.writeString(_iter259);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocumentAncestors_argsTupleSchemeFactory implements SchemeFactory {
      public getDocumentAncestors_argsTupleScheme getScheme() {
        return new getDocumentAncestors_argsTupleScheme();
      }
    }

    private static class getDocumentAncestors_argsTupleScheme extends TupleScheme<getDocumentAncestors_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocumentAncestors_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        {
          oprot.writeI32(struct.uris.size());
          for (String _iter260 : struct.uris)
          {
            oprot.writeString(_iter260);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocumentAncestors_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        {
          org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.uris = new ArrayList<String>(_list261.size);
          for (int _i262 = 0; _i262 < _list261.size; ++_i262)
          {
            String _elem263;
            _elem263 = iprot.readString();
            struct.uris.add(_elem263);
          }
        }
        struct.setUrisIsSet(true);
      }
    }

  }

  public static class getDocumentAncestors_result implements org.apache.thrift.TBase<getDocumentAncestors_result, getDocumentAncestors_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDocumentAncestors_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocumentAncestors_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDocumentAncestors_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDocumentAncestors_resultTupleSchemeFactory());
    }

    public DerivedResult success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DerivedResult.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocumentAncestors_result.class, metaDataMap);
    }

    public getDocumentAncestors_result() {
    }

    public getDocumentAncestors_result(
      DerivedResult success,
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.success = success;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocumentAncestors_result(getDocumentAncestors_result other) {
      if (other.isSetSuccess()) {
        this.success = new DerivedResult(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public getDocumentAncestors_result deepCopy() {
      return new getDocumentAncestors_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
    }

    public DerivedResult getSuccess() {
      return this.success;
    }

    public getDocumentAncestors_result setSuccess(DerivedResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getDocumentAncestors_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DerivedResult)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDocumentAncestors_result)
        return this.equals((getDocumentAncestors_result)that);
      return false;
    }

    public boolean equals(getDocumentAncestors_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getDocumentAncestors_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocumentAncestors_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocumentAncestors_resultStandardSchemeFactory implements SchemeFactory {
      public getDocumentAncestors_resultStandardScheme getScheme() {
        return new getDocumentAncestors_resultStandardScheme();
      }
    }

    private static class getDocumentAncestors_resultStandardScheme extends StandardScheme<getDocumentAncestors_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocumentAncestors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DerivedResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocumentAncestors_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocumentAncestors_resultTupleSchemeFactory implements SchemeFactory {
      public getDocumentAncestors_resultTupleScheme getScheme() {
        return new getDocumentAncestors_resultTupleScheme();
      }
    }

    private static class getDocumentAncestors_resultTupleScheme extends TupleScheme<getDocumentAncestors_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocumentAncestors_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocumentAncestors_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DerivedResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getDocumentDescendants_args implements org.apache.thrift.TBase<getDocumentDescendants_args, getDocumentDescendants_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDocumentDescendants_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocumentDescendants_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField URIS_FIELD_DESC = new org.apache.thrift.protocol.TField("uris", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDocumentDescendants_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDocumentDescendants_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public List<String> uris; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      URIS((short)2, "uris");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // URIS
            return URIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.URIS, new org.apache.thrift.meta_data.FieldMetaData("uris", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocumentDescendants_args.class, metaDataMap);
    }

    public getDocumentDescendants_args() {
    }

    public getDocumentDescendants_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      List<String> uris)
    {
      this();
      this.securityToken = securityToken;
      this.uris = uris;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocumentDescendants_args(getDocumentDescendants_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetUris()) {
        List<String> __this__uris = new ArrayList<String>(other.uris);
        this.uris = __this__uris;
      }
    }

    public getDocumentDescendants_args deepCopy() {
      return new getDocumentDescendants_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.uris = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public getDocumentDescendants_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public int getUrisSize() {
      return (this.uris == null) ? 0 : this.uris.size();
    }

    public java.util.Iterator<String> getUrisIterator() {
      return (this.uris == null) ? null : this.uris.iterator();
    }

    public void addToUris(String elem) {
      if (this.uris == null) {
        this.uris = new ArrayList<String>();
      }
      this.uris.add(elem);
    }

    public List<String> getUris() {
      return this.uris;
    }

    public getDocumentDescendants_args setUris(List<String> uris) {
      this.uris = uris;
      return this;
    }

    public void unsetUris() {
      this.uris = null;
    }

    /** Returns true if field uris is set (has been assigned a value) and false otherwise */
    public boolean isSetUris() {
      return this.uris != null;
    }

    public void setUrisIsSet(boolean value) {
      if (!value) {
        this.uris = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case URIS:
        if (value == null) {
          unsetUris();
        } else {
          setUris((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case URIS:
        return getUris();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case URIS:
        return isSetUris();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDocumentDescendants_args)
        return this.equals((getDocumentDescendants_args)that);
      return false;
    }

    public boolean equals(getDocumentDescendants_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_uris = true && this.isSetUris();
      boolean that_present_uris = true && that.isSetUris();
      if (this_present_uris || that_present_uris) {
        if (!(this_present_uris && that_present_uris))
          return false;
        if (!this.uris.equals(that.uris))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_uris = true && (isSetUris());
      builder.append(present_uris);
      if (present_uris)
        builder.append(uris);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getDocumentDescendants_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUris()).compareTo(other.isSetUris());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUris()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uris, other.uris);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocumentDescendants_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uris:");
      if (this.uris == null) {
        sb.append("null");
      } else {
        sb.append(this.uris);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (uris == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uris' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocumentDescendants_argsStandardSchemeFactory implements SchemeFactory {
      public getDocumentDescendants_argsStandardScheme getScheme() {
        return new getDocumentDescendants_argsStandardScheme();
      }
    }

    private static class getDocumentDescendants_argsStandardScheme extends StandardScheme<getDocumentDescendants_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocumentDescendants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URIS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                  struct.uris = new ArrayList<String>(_list264.size);
                  for (int _i265 = 0; _i265 < _list264.size; ++_i265)
                  {
                    String _elem266;
                    _elem266 = iprot.readString();
                    struct.uris.add(_elem266);
                  }
                  iprot.readListEnd();
                }
                struct.setUrisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocumentDescendants_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uris != null) {
          oprot.writeFieldBegin(URIS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.uris.size()));
            for (String _iter267 : struct.uris)
            {
              oprot.writeString(_iter267);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocumentDescendants_argsTupleSchemeFactory implements SchemeFactory {
      public getDocumentDescendants_argsTupleScheme getScheme() {
        return new getDocumentDescendants_argsTupleScheme();
      }
    }

    private static class getDocumentDescendants_argsTupleScheme extends TupleScheme<getDocumentDescendants_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocumentDescendants_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        {
          oprot.writeI32(struct.uris.size());
          for (String _iter268 : struct.uris)
          {
            oprot.writeString(_iter268);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocumentDescendants_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        {
          org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.uris = new ArrayList<String>(_list269.size);
          for (int _i270 = 0; _i270 < _list269.size; ++_i270)
          {
            String _elem271;
            _elem271 = iprot.readString();
            struct.uris.add(_elem271);
          }
        }
        struct.setUrisIsSet(true);
      }
    }

  }

  public static class getDocumentDescendants_result implements org.apache.thrift.TBase<getDocumentDescendants_result, getDocumentDescendants_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDocumentDescendants_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocumentDescendants_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDocumentDescendants_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDocumentDescendants_resultTupleSchemeFactory());
    }

    public DerivedResult success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DerivedResult.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocumentDescendants_result.class, metaDataMap);
    }

    public getDocumentDescendants_result() {
    }

    public getDocumentDescendants_result(
      DerivedResult success,
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.success = success;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocumentDescendants_result(getDocumentDescendants_result other) {
      if (other.isSetSuccess()) {
        this.success = new DerivedResult(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public getDocumentDescendants_result deepCopy() {
      return new getDocumentDescendants_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
    }

    public DerivedResult getSuccess() {
      return this.success;
    }

    public getDocumentDescendants_result setSuccess(DerivedResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getDocumentDescendants_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DerivedResult)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDocumentDescendants_result)
        return this.equals((getDocumentDescendants_result)that);
      return false;
    }

    public boolean equals(getDocumentDescendants_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getDocumentDescendants_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocumentDescendants_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocumentDescendants_resultStandardSchemeFactory implements SchemeFactory {
      public getDocumentDescendants_resultStandardScheme getScheme() {
        return new getDocumentDescendants_resultStandardScheme();
      }
    }

    private static class getDocumentDescendants_resultStandardScheme extends StandardScheme<getDocumentDescendants_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocumentDescendants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DerivedResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocumentDescendants_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocumentDescendants_resultTupleSchemeFactory implements SchemeFactory {
      public getDocumentDescendants_resultTupleScheme getScheme() {
        return new getDocumentDescendants_resultTupleScheme();
      }
    }

    private static class getDocumentDescendants_resultTupleScheme extends TupleScheme<getDocumentDescendants_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocumentDescendants_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocumentDescendants_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DerivedResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class markDocumentForPurge_args implements org.apache.thrift.TBase<markDocumentForPurge_args, markDocumentForPurge_args._Fields>, java.io.Serializable, Cloneable, Comparable<markDocumentForPurge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markDocumentForPurge_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField URIS_FIELD_DESC = new org.apache.thrift.protocol.TField("uris", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markDocumentForPurge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markDocumentForPurge_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public List<String> uris; // required
    public String name; // required
    public String description; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      URIS((short)2, "uris"),
      NAME((short)3, "name"),
      DESCRIPTION((short)4, "description");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // URIS
            return URIS;
          case 3: // NAME
            return NAME;
          case 4: // DESCRIPTION
            return DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.URIS, new org.apache.thrift.meta_data.FieldMetaData("uris", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markDocumentForPurge_args.class, metaDataMap);
    }

    public markDocumentForPurge_args() {
    }

    public markDocumentForPurge_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      List<String> uris,
      String name,
      String description)
    {
      this();
      this.securityToken = securityToken;
      this.uris = uris;
      this.name = name;
      this.description = description;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markDocumentForPurge_args(markDocumentForPurge_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetUris()) {
        List<String> __this__uris = new ArrayList<String>(other.uris);
        this.uris = __this__uris;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
    }

    public markDocumentForPurge_args deepCopy() {
      return new markDocumentForPurge_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.uris = null;
      this.name = null;
      this.description = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public markDocumentForPurge_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public int getUrisSize() {
      return (this.uris == null) ? 0 : this.uris.size();
    }

    public java.util.Iterator<String> getUrisIterator() {
      return (this.uris == null) ? null : this.uris.iterator();
    }

    public void addToUris(String elem) {
      if (this.uris == null) {
        this.uris = new ArrayList<String>();
      }
      this.uris.add(elem);
    }

    public List<String> getUris() {
      return this.uris;
    }

    public markDocumentForPurge_args setUris(List<String> uris) {
      this.uris = uris;
      return this;
    }

    public void unsetUris() {
      this.uris = null;
    }

    /** Returns true if field uris is set (has been assigned a value) and false otherwise */
    public boolean isSetUris() {
      return this.uris != null;
    }

    public void setUrisIsSet(boolean value) {
      if (!value) {
        this.uris = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public markDocumentForPurge_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public markDocumentForPurge_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case URIS:
        if (value == null) {
          unsetUris();
        } else {
          setUris((List<String>)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case URIS:
        return getUris();

      case NAME:
        return getName();

      case DESCRIPTION:
        return getDescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case URIS:
        return isSetUris();
      case NAME:
        return isSetName();
      case DESCRIPTION:
        return isSetDescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markDocumentForPurge_args)
        return this.equals((markDocumentForPurge_args)that);
      return false;
    }

    public boolean equals(markDocumentForPurge_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_uris = true && this.isSetUris();
      boolean that_present_uris = true && that.isSetUris();
      if (this_present_uris || that_present_uris) {
        if (!(this_present_uris && that_present_uris))
          return false;
        if (!this.uris.equals(that.uris))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_uris = true && (isSetUris());
      builder.append(present_uris);
      if (present_uris)
        builder.append(uris);

      boolean present_name = true && (isSetName());
      builder.append(present_name);
      if (present_name)
        builder.append(name);

      boolean present_description = true && (isSetDescription());
      builder.append(present_description);
      if (present_description)
        builder.append(description);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(markDocumentForPurge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUris()).compareTo(other.isSetUris());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUris()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uris, other.uris);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markDocumentForPurge_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uris:");
      if (this.uris == null) {
        sb.append("null");
      } else {
        sb.append(this.uris);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (uris == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uris' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markDocumentForPurge_argsStandardSchemeFactory implements SchemeFactory {
      public markDocumentForPurge_argsStandardScheme getScheme() {
        return new markDocumentForPurge_argsStandardScheme();
      }
    }

    private static class markDocumentForPurge_argsStandardScheme extends StandardScheme<markDocumentForPurge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markDocumentForPurge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URIS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list272 = iprot.readListBegin();
                  struct.uris = new ArrayList<String>(_list272.size);
                  for (int _i273 = 0; _i273 < _list272.size; ++_i273)
                  {
                    String _elem274;
                    _elem274 = iprot.readString();
                    struct.uris.add(_elem274);
                  }
                  iprot.readListEnd();
                }
                struct.setUrisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markDocumentForPurge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uris != null) {
          oprot.writeFieldBegin(URIS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.uris.size()));
            for (String _iter275 : struct.uris)
            {
              oprot.writeString(_iter275);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markDocumentForPurge_argsTupleSchemeFactory implements SchemeFactory {
      public markDocumentForPurge_argsTupleScheme getScheme() {
        return new markDocumentForPurge_argsTupleScheme();
      }
    }

    private static class markDocumentForPurge_argsTupleScheme extends TupleScheme<markDocumentForPurge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markDocumentForPurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        {
          oprot.writeI32(struct.uris.size());
          for (String _iter276 : struct.uris)
          {
            oprot.writeString(_iter276);
          }
        }
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        if (struct.isSetDescription()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markDocumentForPurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        {
          org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.uris = new ArrayList<String>(_list277.size);
          for (int _i278 = 0; _i278 < _list277.size; ++_i278)
          {
            String _elem279;
            _elem279 = iprot.readString();
            struct.uris.add(_elem279);
          }
        }
        struct.setUrisIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
      }
    }

  }

  public static class markDocumentForPurge_result implements org.apache.thrift.TBase<markDocumentForPurge_result, markDocumentForPurge_result._Fields>, java.io.Serializable, Cloneable, Comparable<markDocumentForPurge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markDocumentForPurge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markDocumentForPurge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markDocumentForPurge_resultTupleSchemeFactory());
    }

    public PurgeInitiationResult success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PurgeInitiationResult.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markDocumentForPurge_result.class, metaDataMap);
    }

    public markDocumentForPurge_result() {
    }

    public markDocumentForPurge_result(
      PurgeInitiationResult success,
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.success = success;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markDocumentForPurge_result(markDocumentForPurge_result other) {
      if (other.isSetSuccess()) {
        this.success = new PurgeInitiationResult(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public markDocumentForPurge_result deepCopy() {
      return new markDocumentForPurge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
    }

    public PurgeInitiationResult getSuccess() {
      return this.success;
    }

    public markDocumentForPurge_result setSuccess(PurgeInitiationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public markDocumentForPurge_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PurgeInitiationResult)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markDocumentForPurge_result)
        return this.equals((markDocumentForPurge_result)that);
      return false;
    }

    public boolean equals(markDocumentForPurge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(markDocumentForPurge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markDocumentForPurge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markDocumentForPurge_resultStandardSchemeFactory implements SchemeFactory {
      public markDocumentForPurge_resultStandardScheme getScheme() {
        return new markDocumentForPurge_resultStandardScheme();
      }
    }

    private static class markDocumentForPurge_resultStandardScheme extends StandardScheme<markDocumentForPurge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markDocumentForPurge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PurgeInitiationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markDocumentForPurge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markDocumentForPurge_resultTupleSchemeFactory implements SchemeFactory {
      public markDocumentForPurge_resultTupleScheme getScheme() {
        return new markDocumentForPurge_resultTupleScheme();
      }
    }

    private static class markDocumentForPurge_resultTupleScheme extends TupleScheme<markDocumentForPurge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markDocumentForPurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markDocumentForPurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PurgeInitiationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getDocumentUriFromId_args implements org.apache.thrift.TBase<getDocumentUriFromId_args, getDocumentUriFromId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDocumentUriFromId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocumentUriFromId_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField POSITIONS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("positionsList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDocumentUriFromId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDocumentUriFromId_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public List<Long> positionsList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      POSITIONS_LIST((short)2, "positionsList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // POSITIONS_LIST
            return POSITIONS_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.POSITIONS_LIST, new org.apache.thrift.meta_data.FieldMetaData("positionsList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocumentUriFromId_args.class, metaDataMap);
    }

    public getDocumentUriFromId_args() {
    }

    public getDocumentUriFromId_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      List<Long> positionsList)
    {
      this();
      this.securityToken = securityToken;
      this.positionsList = positionsList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocumentUriFromId_args(getDocumentUriFromId_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetPositionsList()) {
        List<Long> __this__positionsList = new ArrayList<Long>(other.positionsList);
        this.positionsList = __this__positionsList;
      }
    }

    public getDocumentUriFromId_args deepCopy() {
      return new getDocumentUriFromId_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.positionsList = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public getDocumentUriFromId_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public int getPositionsListSize() {
      return (this.positionsList == null) ? 0 : this.positionsList.size();
    }

    public java.util.Iterator<Long> getPositionsListIterator() {
      return (this.positionsList == null) ? null : this.positionsList.iterator();
    }

    public void addToPositionsList(long elem) {
      if (this.positionsList == null) {
        this.positionsList = new ArrayList<Long>();
      }
      this.positionsList.add(elem);
    }

    public List<Long> getPositionsList() {
      return this.positionsList;
    }

    public getDocumentUriFromId_args setPositionsList(List<Long> positionsList) {
      this.positionsList = positionsList;
      return this;
    }

    public void unsetPositionsList() {
      this.positionsList = null;
    }

    /** Returns true if field positionsList is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionsList() {
      return this.positionsList != null;
    }

    public void setPositionsListIsSet(boolean value) {
      if (!value) {
        this.positionsList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case POSITIONS_LIST:
        if (value == null) {
          unsetPositionsList();
        } else {
          setPositionsList((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case POSITIONS_LIST:
        return getPositionsList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case POSITIONS_LIST:
        return isSetPositionsList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDocumentUriFromId_args)
        return this.equals((getDocumentUriFromId_args)that);
      return false;
    }

    public boolean equals(getDocumentUriFromId_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_positionsList = true && this.isSetPositionsList();
      boolean that_present_positionsList = true && that.isSetPositionsList();
      if (this_present_positionsList || that_present_positionsList) {
        if (!(this_present_positionsList && that_present_positionsList))
          return false;
        if (!this.positionsList.equals(that.positionsList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_positionsList = true && (isSetPositionsList());
      builder.append(present_positionsList);
      if (present_positionsList)
        builder.append(positionsList);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getDocumentUriFromId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPositionsList()).compareTo(other.isSetPositionsList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionsList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionsList, other.positionsList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocumentUriFromId_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionsList:");
      if (this.positionsList == null) {
        sb.append("null");
      } else {
        sb.append(this.positionsList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (positionsList == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'positionsList' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocumentUriFromId_argsStandardSchemeFactory implements SchemeFactory {
      public getDocumentUriFromId_argsStandardScheme getScheme() {
        return new getDocumentUriFromId_argsStandardScheme();
      }
    }

    private static class getDocumentUriFromId_argsStandardScheme extends StandardScheme<getDocumentUriFromId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocumentUriFromId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSITIONS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                  struct.positionsList = new ArrayList<Long>(_list280.size);
                  for (int _i281 = 0; _i281 < _list280.size; ++_i281)
                  {
                    long _elem282;
                    _elem282 = iprot.readI64();
                    struct.positionsList.add(_elem282);
                  }
                  iprot.readListEnd();
                }
                struct.setPositionsListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocumentUriFromId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.positionsList != null) {
          oprot.writeFieldBegin(POSITIONS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.positionsList.size()));
            for (long _iter283 : struct.positionsList)
            {
              oprot.writeI64(_iter283);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocumentUriFromId_argsTupleSchemeFactory implements SchemeFactory {
      public getDocumentUriFromId_argsTupleScheme getScheme() {
        return new getDocumentUriFromId_argsTupleScheme();
      }
    }

    private static class getDocumentUriFromId_argsTupleScheme extends TupleScheme<getDocumentUriFromId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocumentUriFromId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        {
          oprot.writeI32(struct.positionsList.size());
          for (long _iter284 : struct.positionsList)
          {
            oprot.writeI64(_iter284);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocumentUriFromId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        {
          org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.positionsList = new ArrayList<Long>(_list285.size);
          for (int _i286 = 0; _i286 < _list285.size; ++_i286)
          {
            long _elem287;
            _elem287 = iprot.readI64();
            struct.positionsList.add(_elem287);
          }
        }
        struct.setPositionsListIsSet(true);
      }
    }

  }

  public static class getDocumentUriFromId_result implements org.apache.thrift.TBase<getDocumentUriFromId_result, getDocumentUriFromId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDocumentUriFromId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocumentUriFromId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDocumentUriFromId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDocumentUriFromId_resultTupleSchemeFactory());
    }

    public PositionsToUris success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PositionsToUris.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocumentUriFromId_result.class, metaDataMap);
    }

    public getDocumentUriFromId_result() {
    }

    public getDocumentUriFromId_result(
      PositionsToUris success,
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.success = success;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocumentUriFromId_result(getDocumentUriFromId_result other) {
      if (other.isSetSuccess()) {
        this.success = new PositionsToUris(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public getDocumentUriFromId_result deepCopy() {
      return new getDocumentUriFromId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
    }

    public PositionsToUris getSuccess() {
      return this.success;
    }

    public getDocumentUriFromId_result setSuccess(PositionsToUris success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getDocumentUriFromId_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PositionsToUris)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDocumentUriFromId_result)
        return this.equals((getDocumentUriFromId_result)that);
      return false;
    }

    public boolean equals(getDocumentUriFromId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getDocumentUriFromId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocumentUriFromId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocumentUriFromId_resultStandardSchemeFactory implements SchemeFactory {
      public getDocumentUriFromId_resultStandardScheme getScheme() {
        return new getDocumentUriFromId_resultStandardScheme();
      }
    }

    private static class getDocumentUriFromId_resultStandardScheme extends StandardScheme<getDocumentUriFromId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocumentUriFromId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PositionsToUris();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocumentUriFromId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocumentUriFromId_resultTupleSchemeFactory implements SchemeFactory {
      public getDocumentUriFromId_resultTupleScheme getScheme() {
        return new getDocumentUriFromId_resultTupleScheme();
      }
    }

    private static class getDocumentUriFromId_resultTupleScheme extends TupleScheme<getDocumentUriFromId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocumentUriFromId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocumentUriFromId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PositionsToUris();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getDocumentConvertedUrisFromIds_args implements org.apache.thrift.TBase<getDocumentConvertedUrisFromIds_args, getDocumentConvertedUrisFromIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDocumentConvertedUrisFromIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocumentConvertedUrisFromIds_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDocumentConvertedUrisFromIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDocumentConvertedUrisFromIds_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public Set<Long> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      IDS((short)2, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocumentConvertedUrisFromIds_args.class, metaDataMap);
    }

    public getDocumentConvertedUrisFromIds_args() {
    }

    public getDocumentConvertedUrisFromIds_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      Set<Long> ids)
    {
      this();
      this.securityToken = securityToken;
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocumentConvertedUrisFromIds_args(getDocumentConvertedUrisFromIds_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetIds()) {
        Set<Long> __this__ids = new HashSet<Long>(other.ids);
        this.ids = __this__ids;
      }
    }

    public getDocumentConvertedUrisFromIds_args deepCopy() {
      return new getDocumentConvertedUrisFromIds_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.ids = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public getDocumentConvertedUrisFromIds_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new HashSet<Long>();
      }
      this.ids.add(elem);
    }

    public Set<Long> getIds() {
      return this.ids;
    }

    public getDocumentConvertedUrisFromIds_args setIds(Set<Long> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((Set<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDocumentConvertedUrisFromIds_args)
        return this.equals((getDocumentConvertedUrisFromIds_args)that);
      return false;
    }

    public boolean equals(getDocumentConvertedUrisFromIds_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_ids = true && (isSetIds());
      builder.append(present_ids);
      if (present_ids)
        builder.append(ids);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getDocumentConvertedUrisFromIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocumentConvertedUrisFromIds_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (ids == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ids' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocumentConvertedUrisFromIds_argsStandardSchemeFactory implements SchemeFactory {
      public getDocumentConvertedUrisFromIds_argsStandardScheme getScheme() {
        return new getDocumentConvertedUrisFromIds_argsStandardScheme();
      }
    }

    private static class getDocumentConvertedUrisFromIds_argsStandardScheme extends StandardScheme<getDocumentConvertedUrisFromIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocumentConvertedUrisFromIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set288 = iprot.readSetBegin();
                  struct.ids = new HashSet<Long>(2*_set288.size);
                  for (int _i289 = 0; _i289 < _set288.size; ++_i289)
                  {
                    long _elem290;
                    _elem290 = iprot.readI64();
                    struct.ids.add(_elem290);
                  }
                  iprot.readSetEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocumentConvertedUrisFromIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter291 : struct.ids)
            {
              oprot.writeI64(_iter291);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocumentConvertedUrisFromIds_argsTupleSchemeFactory implements SchemeFactory {
      public getDocumentConvertedUrisFromIds_argsTupleScheme getScheme() {
        return new getDocumentConvertedUrisFromIds_argsTupleScheme();
      }
    }

    private static class getDocumentConvertedUrisFromIds_argsTupleScheme extends TupleScheme<getDocumentConvertedUrisFromIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocumentConvertedUrisFromIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        {
          oprot.writeI32(struct.ids.size());
          for (long _iter292 : struct.ids)
          {
            oprot.writeI64(_iter292);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocumentConvertedUrisFromIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        {
          org.apache.thrift.protocol.TSet _set293 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.ids = new HashSet<Long>(2*_set293.size);
          for (int _i294 = 0; _i294 < _set293.size; ++_i294)
          {
            long _elem295;
            _elem295 = iprot.readI64();
            struct.ids.add(_elem295);
          }
        }
        struct.setIdsIsSet(true);
      }
    }

  }

  public static class getDocumentConvertedUrisFromIds_result implements org.apache.thrift.TBase<getDocumentConvertedUrisFromIds_result, getDocumentConvertedUrisFromIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDocumentConvertedUrisFromIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocumentConvertedUrisFromIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDocumentConvertedUrisFromIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDocumentConvertedUrisFromIds_resultTupleSchemeFactory());
    }

    public ConversionResult success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConversionResult.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocumentConvertedUrisFromIds_result.class, metaDataMap);
    }

    public getDocumentConvertedUrisFromIds_result() {
    }

    public getDocumentConvertedUrisFromIds_result(
      ConversionResult success,
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.success = success;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocumentConvertedUrisFromIds_result(getDocumentConvertedUrisFromIds_result other) {
      if (other.isSetSuccess()) {
        this.success = new ConversionResult(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public getDocumentConvertedUrisFromIds_result deepCopy() {
      return new getDocumentConvertedUrisFromIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
    }

    public ConversionResult getSuccess() {
      return this.success;
    }

    public getDocumentConvertedUrisFromIds_result setSuccess(ConversionResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getDocumentConvertedUrisFromIds_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ConversionResult)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDocumentConvertedUrisFromIds_result)
        return this.equals((getDocumentConvertedUrisFromIds_result)that);
      return false;
    }

    public boolean equals(getDocumentConvertedUrisFromIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getDocumentConvertedUrisFromIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocumentConvertedUrisFromIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocumentConvertedUrisFromIds_resultStandardSchemeFactory implements SchemeFactory {
      public getDocumentConvertedUrisFromIds_resultStandardScheme getScheme() {
        return new getDocumentConvertedUrisFromIds_resultStandardScheme();
      }
    }

    private static class getDocumentConvertedUrisFromIds_resultStandardScheme extends StandardScheme<getDocumentConvertedUrisFromIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocumentConvertedUrisFromIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ConversionResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocumentConvertedUrisFromIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocumentConvertedUrisFromIds_resultTupleSchemeFactory implements SchemeFactory {
      public getDocumentConvertedUrisFromIds_resultTupleScheme getScheme() {
        return new getDocumentConvertedUrisFromIds_resultTupleScheme();
      }
    }

    private static class getDocumentConvertedUrisFromIds_resultTupleScheme extends TupleScheme<getDocumentConvertedUrisFromIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocumentConvertedUrisFromIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocumentConvertedUrisFromIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ConversionResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getDocumentConvertedUrisFromUris_args implements org.apache.thrift.TBase<getDocumentConvertedUrisFromUris_args, getDocumentConvertedUrisFromUris_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDocumentConvertedUrisFromUris_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocumentConvertedUrisFromUris_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField URIS_FIELD_DESC = new org.apache.thrift.protocol.TField("uris", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDocumentConvertedUrisFromUris_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDocumentConvertedUrisFromUris_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public Set<String> uris; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      URIS((short)2, "uris");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // URIS
            return URIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.URIS, new org.apache.thrift.meta_data.FieldMetaData("uris", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocumentConvertedUrisFromUris_args.class, metaDataMap);
    }

    public getDocumentConvertedUrisFromUris_args() {
    }

    public getDocumentConvertedUrisFromUris_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      Set<String> uris)
    {
      this();
      this.securityToken = securityToken;
      this.uris = uris;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocumentConvertedUrisFromUris_args(getDocumentConvertedUrisFromUris_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetUris()) {
        Set<String> __this__uris = new HashSet<String>(other.uris);
        this.uris = __this__uris;
      }
    }

    public getDocumentConvertedUrisFromUris_args deepCopy() {
      return new getDocumentConvertedUrisFromUris_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.uris = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public getDocumentConvertedUrisFromUris_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public int getUrisSize() {
      return (this.uris == null) ? 0 : this.uris.size();
    }

    public java.util.Iterator<String> getUrisIterator() {
      return (this.uris == null) ? null : this.uris.iterator();
    }

    public void addToUris(String elem) {
      if (this.uris == null) {
        this.uris = new HashSet<String>();
      }
      this.uris.add(elem);
    }

    public Set<String> getUris() {
      return this.uris;
    }

    public getDocumentConvertedUrisFromUris_args setUris(Set<String> uris) {
      this.uris = uris;
      return this;
    }

    public void unsetUris() {
      this.uris = null;
    }

    /** Returns true if field uris is set (has been assigned a value) and false otherwise */
    public boolean isSetUris() {
      return this.uris != null;
    }

    public void setUrisIsSet(boolean value) {
      if (!value) {
        this.uris = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case URIS:
        if (value == null) {
          unsetUris();
        } else {
          setUris((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case URIS:
        return getUris();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case URIS:
        return isSetUris();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDocumentConvertedUrisFromUris_args)
        return this.equals((getDocumentConvertedUrisFromUris_args)that);
      return false;
    }

    public boolean equals(getDocumentConvertedUrisFromUris_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_uris = true && this.isSetUris();
      boolean that_present_uris = true && that.isSetUris();
      if (this_present_uris || that_present_uris) {
        if (!(this_present_uris && that_present_uris))
          return false;
        if (!this.uris.equals(that.uris))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_uris = true && (isSetUris());
      builder.append(present_uris);
      if (present_uris)
        builder.append(uris);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getDocumentConvertedUrisFromUris_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUris()).compareTo(other.isSetUris());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUris()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uris, other.uris);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocumentConvertedUrisFromUris_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uris:");
      if (this.uris == null) {
        sb.append("null");
      } else {
        sb.append(this.uris);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (uris == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uris' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocumentConvertedUrisFromUris_argsStandardSchemeFactory implements SchemeFactory {
      public getDocumentConvertedUrisFromUris_argsStandardScheme getScheme() {
        return new getDocumentConvertedUrisFromUris_argsStandardScheme();
      }
    }

    private static class getDocumentConvertedUrisFromUris_argsStandardScheme extends StandardScheme<getDocumentConvertedUrisFromUris_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocumentConvertedUrisFromUris_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URIS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set296 = iprot.readSetBegin();
                  struct.uris = new HashSet<String>(2*_set296.size);
                  for (int _i297 = 0; _i297 < _set296.size; ++_i297)
                  {
                    String _elem298;
                    _elem298 = iprot.readString();
                    struct.uris.add(_elem298);
                  }
                  iprot.readSetEnd();
                }
                struct.setUrisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocumentConvertedUrisFromUris_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uris != null) {
          oprot.writeFieldBegin(URIS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.uris.size()));
            for (String _iter299 : struct.uris)
            {
              oprot.writeString(_iter299);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocumentConvertedUrisFromUris_argsTupleSchemeFactory implements SchemeFactory {
      public getDocumentConvertedUrisFromUris_argsTupleScheme getScheme() {
        return new getDocumentConvertedUrisFromUris_argsTupleScheme();
      }
    }

    private static class getDocumentConvertedUrisFromUris_argsTupleScheme extends TupleScheme<getDocumentConvertedUrisFromUris_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocumentConvertedUrisFromUris_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        {
          oprot.writeI32(struct.uris.size());
          for (String _iter300 : struct.uris)
          {
            oprot.writeString(_iter300);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocumentConvertedUrisFromUris_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        {
          org.apache.thrift.protocol.TSet _set301 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.uris = new HashSet<String>(2*_set301.size);
          for (int _i302 = 0; _i302 < _set301.size; ++_i302)
          {
            String _elem303;
            _elem303 = iprot.readString();
            struct.uris.add(_elem303);
          }
        }
        struct.setUrisIsSet(true);
      }
    }

  }

  public static class getDocumentConvertedUrisFromUris_result implements org.apache.thrift.TBase<getDocumentConvertedUrisFromUris_result, getDocumentConvertedUrisFromUris_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDocumentConvertedUrisFromUris_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDocumentConvertedUrisFromUris_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDocumentConvertedUrisFromUris_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDocumentConvertedUrisFromUris_resultTupleSchemeFactory());
    }

    public ConversionResult success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConversionResult.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDocumentConvertedUrisFromUris_result.class, metaDataMap);
    }

    public getDocumentConvertedUrisFromUris_result() {
    }

    public getDocumentConvertedUrisFromUris_result(
      ConversionResult success,
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.success = success;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDocumentConvertedUrisFromUris_result(getDocumentConvertedUrisFromUris_result other) {
      if (other.isSetSuccess()) {
        this.success = new ConversionResult(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public getDocumentConvertedUrisFromUris_result deepCopy() {
      return new getDocumentConvertedUrisFromUris_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
    }

    public ConversionResult getSuccess() {
      return this.success;
    }

    public getDocumentConvertedUrisFromUris_result setSuccess(ConversionResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getDocumentConvertedUrisFromUris_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ConversionResult)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDocumentConvertedUrisFromUris_result)
        return this.equals((getDocumentConvertedUrisFromUris_result)that);
      return false;
    }

    public boolean equals(getDocumentConvertedUrisFromUris_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getDocumentConvertedUrisFromUris_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDocumentConvertedUrisFromUris_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDocumentConvertedUrisFromUris_resultStandardSchemeFactory implements SchemeFactory {
      public getDocumentConvertedUrisFromUris_resultStandardScheme getScheme() {
        return new getDocumentConvertedUrisFromUris_resultStandardScheme();
      }
    }

    private static class getDocumentConvertedUrisFromUris_resultStandardScheme extends StandardScheme<getDocumentConvertedUrisFromUris_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDocumentConvertedUrisFromUris_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ConversionResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDocumentConvertedUrisFromUris_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDocumentConvertedUrisFromUris_resultTupleSchemeFactory implements SchemeFactory {
      public getDocumentConvertedUrisFromUris_resultTupleScheme getScheme() {
        return new getDocumentConvertedUrisFromUris_resultTupleScheme();
      }
    }

    private static class getDocumentConvertedUrisFromUris_resultTupleScheme extends TupleScheme<getDocumentConvertedUrisFromUris_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDocumentConvertedUrisFromUris_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDocumentConvertedUrisFromUris_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ConversionResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getPurgeInfo_args implements org.apache.thrift.TBase<getPurgeInfo_args, getPurgeInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPurgeInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPurgeInfo_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PURGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPurgeInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPurgeInfo_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public long purgeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      PURGE_ID((short)2, "purgeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // PURGE_ID
            return PURGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PURGEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.PURGE_ID, new org.apache.thrift.meta_data.FieldMetaData("purgeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPurgeInfo_args.class, metaDataMap);
    }

    public getPurgeInfo_args() {
    }

    public getPurgeInfo_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      long purgeId)
    {
      this();
      this.securityToken = securityToken;
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPurgeInfo_args(getPurgeInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      this.purgeId = other.purgeId;
    }

    public getPurgeInfo_args deepCopy() {
      return new getPurgeInfo_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      setPurgeIdIsSet(false);
      this.purgeId = 0;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public getPurgeInfo_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public long getPurgeId() {
      return this.purgeId;
    }

    public getPurgeInfo_args setPurgeId(long purgeId) {
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
      return this;
    }

    public void unsetPurgeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    /** Returns true if field purgeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPurgeId() {
      return EncodingUtils.testBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    public void setPurgeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURGEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case PURGE_ID:
        if (value == null) {
          unsetPurgeId();
        } else {
          setPurgeId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case PURGE_ID:
        return Long.valueOf(getPurgeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case PURGE_ID:
        return isSetPurgeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPurgeInfo_args)
        return this.equals((getPurgeInfo_args)that);
      return false;
    }

    public boolean equals(getPurgeInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_purgeId = true;
      boolean that_present_purgeId = true;
      if (this_present_purgeId || that_present_purgeId) {
        if (!(this_present_purgeId && that_present_purgeId))
          return false;
        if (this.purgeId != that.purgeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_purgeId = true;
      builder.append(present_purgeId);
      if (present_purgeId)
        builder.append(purgeId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getPurgeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurgeId()).compareTo(other.isSetPurgeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurgeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeId, other.purgeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPurgeInfo_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purgeId:");
      sb.append(this.purgeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'purgeId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPurgeInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getPurgeInfo_argsStandardScheme getScheme() {
        return new getPurgeInfo_argsStandardScheme();
      }
    }

    private static class getPurgeInfo_argsStandardScheme extends StandardScheme<getPurgeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPurgeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PURGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.purgeId = iprot.readI64();
                struct.setPurgeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPurgeId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'purgeId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPurgeInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PURGE_ID_FIELD_DESC);
        oprot.writeI64(struct.purgeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPurgeInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getPurgeInfo_argsTupleScheme getScheme() {
        return new getPurgeInfo_argsTupleScheme();
      }
    }

    private static class getPurgeInfo_argsTupleScheme extends TupleScheme<getPurgeInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPurgeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        oprot.writeI64(struct.purgeId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPurgeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        struct.purgeId = iprot.readI64();
        struct.setPurgeIdIsSet(true);
      }
    }

  }

  public static class getPurgeInfo_result implements org.apache.thrift.TBase<getPurgeInfo_result, getPurgeInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPurgeInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPurgeInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PURGE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPurgeInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPurgeInfo_resultTupleSchemeFactory());
    }

    public PurgeInfo success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenancePurgeIdNotFoundException purgeNotFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      PURGE_NOT_FOUND((short)2, "purgeNotFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // PURGE_NOT_FOUND
            return PURGE_NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PurgeInfo.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PURGE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("purgeNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPurgeInfo_result.class, metaDataMap);
    }

    public getPurgeInfo_result() {
    }

    public getPurgeInfo_result(
      PurgeInfo success,
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenancePurgeIdNotFoundException purgeNotFound)
    {
      this();
      this.success = success;
      this.security = security;
      this.purgeNotFound = purgeNotFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPurgeInfo_result(getPurgeInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new PurgeInfo(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetPurgeNotFound()) {
        this.purgeNotFound = new ProvenancePurgeIdNotFoundException(other.purgeNotFound);
      }
    }

    public getPurgeInfo_result deepCopy() {
      return new getPurgeInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.purgeNotFound = null;
    }

    public PurgeInfo getSuccess() {
      return this.success;
    }

    public getPurgeInfo_result setSuccess(PurgeInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getPurgeInfo_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenancePurgeIdNotFoundException getPurgeNotFound() {
      return this.purgeNotFound;
    }

    public getPurgeInfo_result setPurgeNotFound(ProvenancePurgeIdNotFoundException purgeNotFound) {
      this.purgeNotFound = purgeNotFound;
      return this;
    }

    public void unsetPurgeNotFound() {
      this.purgeNotFound = null;
    }

    /** Returns true if field purgeNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetPurgeNotFound() {
      return this.purgeNotFound != null;
    }

    public void setPurgeNotFoundIsSet(boolean value) {
      if (!value) {
        this.purgeNotFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PurgeInfo)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case PURGE_NOT_FOUND:
        if (value == null) {
          unsetPurgeNotFound();
        } else {
          setPurgeNotFound((ProvenancePurgeIdNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case PURGE_NOT_FOUND:
        return getPurgeNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case PURGE_NOT_FOUND:
        return isSetPurgeNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPurgeInfo_result)
        return this.equals((getPurgeInfo_result)that);
      return false;
    }

    public boolean equals(getPurgeInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_purgeNotFound = true && this.isSetPurgeNotFound();
      boolean that_present_purgeNotFound = true && that.isSetPurgeNotFound();
      if (this_present_purgeNotFound || that_present_purgeNotFound) {
        if (!(this_present_purgeNotFound && that_present_purgeNotFound))
          return false;
        if (!this.purgeNotFound.equals(that.purgeNotFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_purgeNotFound = true && (isSetPurgeNotFound());
      builder.append(present_purgeNotFound);
      if (present_purgeNotFound)
        builder.append(purgeNotFound);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getPurgeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurgeNotFound()).compareTo(other.isSetPurgeNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurgeNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeNotFound, other.purgeNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPurgeInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purgeNotFound:");
      if (this.purgeNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.purgeNotFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPurgeInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getPurgeInfo_resultStandardScheme getScheme() {
        return new getPurgeInfo_resultStandardScheme();
      }
    }

    private static class getPurgeInfo_resultStandardScheme extends StandardScheme<getPurgeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPurgeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PurgeInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PURGE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.purgeNotFound = new ProvenancePurgeIdNotFoundException();
                struct.purgeNotFound.read(iprot);
                struct.setPurgeNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPurgeInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.purgeNotFound != null) {
          oprot.writeFieldBegin(PURGE_NOT_FOUND_FIELD_DESC);
          struct.purgeNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPurgeInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getPurgeInfo_resultTupleScheme getScheme() {
        return new getPurgeInfo_resultTupleScheme();
      }
    }

    private static class getPurgeInfo_resultTupleScheme extends TupleScheme<getPurgeInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPurgeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetPurgeNotFound()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetPurgeNotFound()) {
          struct.purgeNotFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPurgeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new PurgeInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.purgeNotFound = new ProvenancePurgeIdNotFoundException();
          struct.purgeNotFound.read(iprot);
          struct.setPurgeNotFoundIsSet(true);
        }
      }
    }

  }

  public static class getAllPurgeIds_args implements org.apache.thrift.TBase<getAllPurgeIds_args, getAllPurgeIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllPurgeIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllPurgeIds_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllPurgeIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllPurgeIds_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllPurgeIds_args.class, metaDataMap);
    }

    public getAllPurgeIds_args() {
    }

    public getAllPurgeIds_args(
      ezbake.base.thrift.EzSecurityToken securityToken)
    {
      this();
      this.securityToken = securityToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllPurgeIds_args(getAllPurgeIds_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
    }

    public getAllPurgeIds_args deepCopy() {
      return new getAllPurgeIds_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public getAllPurgeIds_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllPurgeIds_args)
        return this.equals((getAllPurgeIds_args)that);
      return false;
    }

    public boolean equals(getAllPurgeIds_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAllPurgeIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllPurgeIds_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllPurgeIds_argsStandardSchemeFactory implements SchemeFactory {
      public getAllPurgeIds_argsStandardScheme getScheme() {
        return new getAllPurgeIds_argsStandardScheme();
      }
    }

    private static class getAllPurgeIds_argsStandardScheme extends StandardScheme<getAllPurgeIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllPurgeIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllPurgeIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllPurgeIds_argsTupleSchemeFactory implements SchemeFactory {
      public getAllPurgeIds_argsTupleScheme getScheme() {
        return new getAllPurgeIds_argsTupleScheme();
      }
    }

    private static class getAllPurgeIds_argsTupleScheme extends TupleScheme<getAllPurgeIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllPurgeIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllPurgeIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
      }
    }

  }

  public static class getAllPurgeIds_result implements org.apache.thrift.TBase<getAllPurgeIds_result, getAllPurgeIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllPurgeIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllPurgeIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllPurgeIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllPurgeIds_resultTupleSchemeFactory());
    }

    public List<Long> success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllPurgeIds_result.class, metaDataMap);
    }

    public getAllPurgeIds_result() {
    }

    public getAllPurgeIds_result(
      List<Long> success,
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.success = success;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllPurgeIds_result(getAllPurgeIds_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public getAllPurgeIds_result deepCopy() {
      return new getAllPurgeIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public getAllPurgeIds_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getAllPurgeIds_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllPurgeIds_result)
        return this.equals((getAllPurgeIds_result)that);
      return false;
    }

    public boolean equals(getAllPurgeIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAllPurgeIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllPurgeIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllPurgeIds_resultStandardSchemeFactory implements SchemeFactory {
      public getAllPurgeIds_resultStandardScheme getScheme() {
        return new getAllPurgeIds_resultStandardScheme();
      }
    }

    private static class getAllPurgeIds_resultStandardScheme extends StandardScheme<getAllPurgeIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllPurgeIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list304.size);
                  for (int _i305 = 0; _i305 < _list304.size; ++_i305)
                  {
                    long _elem306;
                    _elem306 = iprot.readI64();
                    struct.success.add(_elem306);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllPurgeIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter307 : struct.success)
            {
              oprot.writeI64(_iter307);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllPurgeIds_resultTupleSchemeFactory implements SchemeFactory {
      public getAllPurgeIds_resultTupleScheme getScheme() {
        return new getAllPurgeIds_resultTupleScheme();
      }
    }

    private static class getAllPurgeIds_resultTupleScheme extends TupleScheme<getAllPurgeIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllPurgeIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter308 : struct.success)
            {
              oprot.writeI64(_iter308);
            }
          }
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllPurgeIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list309 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list309.size);
            for (int _i310 = 0; _i310 < _list309.size; ++_i310)
            {
              long _elem311;
              _elem311 = iprot.readI64();
              struct.success.add(_elem311);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class updatePurge_args implements org.apache.thrift.TBase<updatePurge_args, updatePurge_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePurge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePurge_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PURGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField COMPLETELY_PURGED_FIELD_DESC = new org.apache.thrift.protocol.TField("completelyPurged", org.apache.thrift.protocol.TType.SET, (short)3);
    private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField RESOLVED_FIELD_DESC = new org.apache.thrift.protocol.TField("resolved", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePurge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePurge_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public long purgeId; // required
    public Set<Long> completelyPurged; // required
    public String note; // required
    public boolean resolved; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      PURGE_ID((short)2, "purgeId"),
      COMPLETELY_PURGED((short)3, "completelyPurged"),
      NOTE((short)4, "note"),
      RESOLVED((short)5, "resolved");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // PURGE_ID
            return PURGE_ID;
          case 3: // COMPLETELY_PURGED
            return COMPLETELY_PURGED;
          case 4: // NOTE
            return NOTE;
          case 5: // RESOLVED
            return RESOLVED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PURGEID_ISSET_ID = 0;
    private static final int __RESOLVED_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.PURGE_ID, new org.apache.thrift.meta_data.FieldMetaData("purgeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMPLETELY_PURGED, new org.apache.thrift.meta_data.FieldMetaData("completelyPurged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RESOLVED, new org.apache.thrift.meta_data.FieldMetaData("resolved", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePurge_args.class, metaDataMap);
    }

    public updatePurge_args() {
    }

    public updatePurge_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      long purgeId,
      Set<Long> completelyPurged,
      String note,
      boolean resolved)
    {
      this();
      this.securityToken = securityToken;
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
      this.completelyPurged = completelyPurged;
      this.note = note;
      this.resolved = resolved;
      setResolvedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePurge_args(updatePurge_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      this.purgeId = other.purgeId;
      if (other.isSetCompletelyPurged()) {
        Set<Long> __this__completelyPurged = new HashSet<Long>(other.completelyPurged);
        this.completelyPurged = __this__completelyPurged;
      }
      if (other.isSetNote()) {
        this.note = other.note;
      }
      this.resolved = other.resolved;
    }

    public updatePurge_args deepCopy() {
      return new updatePurge_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      setPurgeIdIsSet(false);
      this.purgeId = 0;
      this.completelyPurged = null;
      this.note = null;
      setResolvedIsSet(false);
      this.resolved = false;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public updatePurge_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public long getPurgeId() {
      return this.purgeId;
    }

    public updatePurge_args setPurgeId(long purgeId) {
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
      return this;
    }

    public void unsetPurgeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    /** Returns true if field purgeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPurgeId() {
      return EncodingUtils.testBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    public void setPurgeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURGEID_ISSET_ID, value);
    }

    public int getCompletelyPurgedSize() {
      return (this.completelyPurged == null) ? 0 : this.completelyPurged.size();
    }

    public java.util.Iterator<Long> getCompletelyPurgedIterator() {
      return (this.completelyPurged == null) ? null : this.completelyPurged.iterator();
    }

    public void addToCompletelyPurged(long elem) {
      if (this.completelyPurged == null) {
        this.completelyPurged = new HashSet<Long>();
      }
      this.completelyPurged.add(elem);
    }

    public Set<Long> getCompletelyPurged() {
      return this.completelyPurged;
    }

    public updatePurge_args setCompletelyPurged(Set<Long> completelyPurged) {
      this.completelyPurged = completelyPurged;
      return this;
    }

    public void unsetCompletelyPurged() {
      this.completelyPurged = null;
    }

    /** Returns true if field completelyPurged is set (has been assigned a value) and false otherwise */
    public boolean isSetCompletelyPurged() {
      return this.completelyPurged != null;
    }

    public void setCompletelyPurgedIsSet(boolean value) {
      if (!value) {
        this.completelyPurged = null;
      }
    }

    public String getNote() {
      return this.note;
    }

    public updatePurge_args setNote(String note) {
      this.note = note;
      return this;
    }

    public void unsetNote() {
      this.note = null;
    }

    /** Returns true if field note is set (has been assigned a value) and false otherwise */
    public boolean isSetNote() {
      return this.note != null;
    }

    public void setNoteIsSet(boolean value) {
      if (!value) {
        this.note = null;
      }
    }

    public boolean isResolved() {
      return this.resolved;
    }

    public updatePurge_args setResolved(boolean resolved) {
      this.resolved = resolved;
      setResolvedIsSet(true);
      return this;
    }

    public void unsetResolved() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOLVED_ISSET_ID);
    }

    /** Returns true if field resolved is set (has been assigned a value) and false otherwise */
    public boolean isSetResolved() {
      return EncodingUtils.testBit(__isset_bitfield, __RESOLVED_ISSET_ID);
    }

    public void setResolvedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOLVED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case PURGE_ID:
        if (value == null) {
          unsetPurgeId();
        } else {
          setPurgeId((Long)value);
        }
        break;

      case COMPLETELY_PURGED:
        if (value == null) {
          unsetCompletelyPurged();
        } else {
          setCompletelyPurged((Set<Long>)value);
        }
        break;

      case NOTE:
        if (value == null) {
          unsetNote();
        } else {
          setNote((String)value);
        }
        break;

      case RESOLVED:
        if (value == null) {
          unsetResolved();
        } else {
          setResolved((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case PURGE_ID:
        return Long.valueOf(getPurgeId());

      case COMPLETELY_PURGED:
        return getCompletelyPurged();

      case NOTE:
        return getNote();

      case RESOLVED:
        return Boolean.valueOf(isResolved());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case PURGE_ID:
        return isSetPurgeId();
      case COMPLETELY_PURGED:
        return isSetCompletelyPurged();
      case NOTE:
        return isSetNote();
      case RESOLVED:
        return isSetResolved();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePurge_args)
        return this.equals((updatePurge_args)that);
      return false;
    }

    public boolean equals(updatePurge_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_purgeId = true;
      boolean that_present_purgeId = true;
      if (this_present_purgeId || that_present_purgeId) {
        if (!(this_present_purgeId && that_present_purgeId))
          return false;
        if (this.purgeId != that.purgeId)
          return false;
      }

      boolean this_present_completelyPurged = true && this.isSetCompletelyPurged();
      boolean that_present_completelyPurged = true && that.isSetCompletelyPurged();
      if (this_present_completelyPurged || that_present_completelyPurged) {
        if (!(this_present_completelyPurged && that_present_completelyPurged))
          return false;
        if (!this.completelyPurged.equals(that.completelyPurged))
          return false;
      }

      boolean this_present_note = true && this.isSetNote();
      boolean that_present_note = true && that.isSetNote();
      if (this_present_note || that_present_note) {
        if (!(this_present_note && that_present_note))
          return false;
        if (!this.note.equals(that.note))
          return false;
      }

      boolean this_present_resolved = true;
      boolean that_present_resolved = true;
      if (this_present_resolved || that_present_resolved) {
        if (!(this_present_resolved && that_present_resolved))
          return false;
        if (this.resolved != that.resolved)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_purgeId = true;
      builder.append(present_purgeId);
      if (present_purgeId)
        builder.append(purgeId);

      boolean present_completelyPurged = true && (isSetCompletelyPurged());
      builder.append(present_completelyPurged);
      if (present_completelyPurged)
        builder.append(completelyPurged);

      boolean present_note = true && (isSetNote());
      builder.append(present_note);
      if (present_note)
        builder.append(note);

      boolean present_resolved = true;
      builder.append(present_resolved);
      if (present_resolved)
        builder.append(resolved);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(updatePurge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurgeId()).compareTo(other.isSetPurgeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurgeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeId, other.purgeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCompletelyPurged()).compareTo(other.isSetCompletelyPurged());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompletelyPurged()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completelyPurged, other.completelyPurged);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNote()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResolved()).compareTo(other.isSetResolved());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResolved()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resolved, other.resolved);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePurge_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purgeId:");
      sb.append(this.purgeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("completelyPurged:");
      if (this.completelyPurged == null) {
        sb.append("null");
      } else {
        sb.append(this.completelyPurged);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resolved:");
      sb.append(this.resolved);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'purgeId' because it's a primitive and you chose the non-beans generator.
      if (completelyPurged == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'completelyPurged' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePurge_argsStandardSchemeFactory implements SchemeFactory {
      public updatePurge_argsStandardScheme getScheme() {
        return new updatePurge_argsStandardScheme();
      }
    }

    private static class updatePurge_argsStandardScheme extends StandardScheme<updatePurge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePurge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PURGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.purgeId = iprot.readI64();
                struct.setPurgeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMPLETELY_PURGED
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set312 = iprot.readSetBegin();
                  struct.completelyPurged = new HashSet<Long>(2*_set312.size);
                  for (int _i313 = 0; _i313 < _set312.size; ++_i313)
                  {
                    long _elem314;
                    _elem314 = iprot.readI64();
                    struct.completelyPurged.add(_elem314);
                  }
                  iprot.readSetEnd();
                }
                struct.setCompletelyPurgedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NOTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.note = iprot.readString();
                struct.setNoteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RESOLVED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.resolved = iprot.readBool();
                struct.setResolvedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPurgeId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'purgeId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePurge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PURGE_ID_FIELD_DESC);
        oprot.writeI64(struct.purgeId);
        oprot.writeFieldEnd();
        if (struct.completelyPurged != null) {
          oprot.writeFieldBegin(COMPLETELY_PURGED_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.completelyPurged.size()));
            for (long _iter315 : struct.completelyPurged)
            {
              oprot.writeI64(_iter315);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.note != null) {
          oprot.writeFieldBegin(NOTE_FIELD_DESC);
          oprot.writeString(struct.note);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RESOLVED_FIELD_DESC);
        oprot.writeBool(struct.resolved);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePurge_argsTupleSchemeFactory implements SchemeFactory {
      public updatePurge_argsTupleScheme getScheme() {
        return new updatePurge_argsTupleScheme();
      }
    }

    private static class updatePurge_argsTupleScheme extends TupleScheme<updatePurge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        oprot.writeI64(struct.purgeId);
        {
          oprot.writeI32(struct.completelyPurged.size());
          for (long _iter316 : struct.completelyPurged)
          {
            oprot.writeI64(_iter316);
          }
        }
        BitSet optionals = new BitSet();
        if (struct.isSetNote()) {
          optionals.set(0);
        }
        if (struct.isSetResolved()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNote()) {
          oprot.writeString(struct.note);
        }
        if (struct.isSetResolved()) {
          oprot.writeBool(struct.resolved);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        struct.purgeId = iprot.readI64();
        struct.setPurgeIdIsSet(true);
        {
          org.apache.thrift.protocol.TSet _set317 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.completelyPurged = new HashSet<Long>(2*_set317.size);
          for (int _i318 = 0; _i318 < _set317.size; ++_i318)
          {
            long _elem319;
            _elem319 = iprot.readI64();
            struct.completelyPurged.add(_elem319);
          }
        }
        struct.setCompletelyPurgedIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.note = iprot.readString();
          struct.setNoteIsSet(true);
        }
        if (incoming.get(1)) {
          struct.resolved = iprot.readBool();
          struct.setResolvedIsSet(true);
        }
      }
    }

  }

  public static class updatePurge_result implements org.apache.thrift.TBase<updatePurge_result, updatePurge_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePurge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePurge_result");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PURGE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DOCUMENT_NOT_IN_PURGE_FIELD_DESC = new org.apache.thrift.protocol.TField("documentNotInPurge", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePurge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePurge_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenancePurgeIdNotFoundException purgeNotFound; // required
    public ProvenanceDocumentNotInPurgeException documentNotInPurge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security"),
      PURGE_NOT_FOUND((short)2, "purgeNotFound"),
      DOCUMENT_NOT_IN_PURGE((short)3, "documentNotInPurge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          case 2: // PURGE_NOT_FOUND
            return PURGE_NOT_FOUND;
          case 3: // DOCUMENT_NOT_IN_PURGE
            return DOCUMENT_NOT_IN_PURGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PURGE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("purgeNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOCUMENT_NOT_IN_PURGE, new org.apache.thrift.meta_data.FieldMetaData("documentNotInPurge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePurge_result.class, metaDataMap);
    }

    public updatePurge_result() {
    }

    public updatePurge_result(
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenancePurgeIdNotFoundException purgeNotFound,
      ProvenanceDocumentNotInPurgeException documentNotInPurge)
    {
      this();
      this.security = security;
      this.purgeNotFound = purgeNotFound;
      this.documentNotInPurge = documentNotInPurge;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePurge_result(updatePurge_result other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetPurgeNotFound()) {
        this.purgeNotFound = new ProvenancePurgeIdNotFoundException(other.purgeNotFound);
      }
      if (other.isSetDocumentNotInPurge()) {
        this.documentNotInPurge = new ProvenanceDocumentNotInPurgeException(other.documentNotInPurge);
      }
    }

    public updatePurge_result deepCopy() {
      return new updatePurge_result(this);
    }

    @Override
    public void clear() {
      this.security = null;
      this.purgeNotFound = null;
      this.documentNotInPurge = null;
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public updatePurge_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenancePurgeIdNotFoundException getPurgeNotFound() {
      return this.purgeNotFound;
    }

    public updatePurge_result setPurgeNotFound(ProvenancePurgeIdNotFoundException purgeNotFound) {
      this.purgeNotFound = purgeNotFound;
      return this;
    }

    public void unsetPurgeNotFound() {
      this.purgeNotFound = null;
    }

    /** Returns true if field purgeNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetPurgeNotFound() {
      return this.purgeNotFound != null;
    }

    public void setPurgeNotFoundIsSet(boolean value) {
      if (!value) {
        this.purgeNotFound = null;
      }
    }

    public ProvenanceDocumentNotInPurgeException getDocumentNotInPurge() {
      return this.documentNotInPurge;
    }

    public updatePurge_result setDocumentNotInPurge(ProvenanceDocumentNotInPurgeException documentNotInPurge) {
      this.documentNotInPurge = documentNotInPurge;
      return this;
    }

    public void unsetDocumentNotInPurge() {
      this.documentNotInPurge = null;
    }

    /** Returns true if field documentNotInPurge is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentNotInPurge() {
      return this.documentNotInPurge != null;
    }

    public void setDocumentNotInPurgeIsSet(boolean value) {
      if (!value) {
        this.documentNotInPurge = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case PURGE_NOT_FOUND:
        if (value == null) {
          unsetPurgeNotFound();
        } else {
          setPurgeNotFound((ProvenancePurgeIdNotFoundException)value);
        }
        break;

      case DOCUMENT_NOT_IN_PURGE:
        if (value == null) {
          unsetDocumentNotInPurge();
        } else {
          setDocumentNotInPurge((ProvenanceDocumentNotInPurgeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      case PURGE_NOT_FOUND:
        return getPurgeNotFound();

      case DOCUMENT_NOT_IN_PURGE:
        return getDocumentNotInPurge();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      case PURGE_NOT_FOUND:
        return isSetPurgeNotFound();
      case DOCUMENT_NOT_IN_PURGE:
        return isSetDocumentNotInPurge();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePurge_result)
        return this.equals((updatePurge_result)that);
      return false;
    }

    public boolean equals(updatePurge_result that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_purgeNotFound = true && this.isSetPurgeNotFound();
      boolean that_present_purgeNotFound = true && that.isSetPurgeNotFound();
      if (this_present_purgeNotFound || that_present_purgeNotFound) {
        if (!(this_present_purgeNotFound && that_present_purgeNotFound))
          return false;
        if (!this.purgeNotFound.equals(that.purgeNotFound))
          return false;
      }

      boolean this_present_documentNotInPurge = true && this.isSetDocumentNotInPurge();
      boolean that_present_documentNotInPurge = true && that.isSetDocumentNotInPurge();
      if (this_present_documentNotInPurge || that_present_documentNotInPurge) {
        if (!(this_present_documentNotInPurge && that_present_documentNotInPurge))
          return false;
        if (!this.documentNotInPurge.equals(that.documentNotInPurge))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_purgeNotFound = true && (isSetPurgeNotFound());
      builder.append(present_purgeNotFound);
      if (present_purgeNotFound)
        builder.append(purgeNotFound);

      boolean present_documentNotInPurge = true && (isSetDocumentNotInPurge());
      builder.append(present_documentNotInPurge);
      if (present_documentNotInPurge)
        builder.append(documentNotInPurge);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(updatePurge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurgeNotFound()).compareTo(other.isSetPurgeNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurgeNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeNotFound, other.purgeNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentNotInPurge()).compareTo(other.isSetDocumentNotInPurge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentNotInPurge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentNotInPurge, other.documentNotInPurge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePurge_result(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purgeNotFound:");
      if (this.purgeNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.purgeNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentNotInPurge:");
      if (this.documentNotInPurge == null) {
        sb.append("null");
      } else {
        sb.append(this.documentNotInPurge);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePurge_resultStandardSchemeFactory implements SchemeFactory {
      public updatePurge_resultStandardScheme getScheme() {
        return new updatePurge_resultStandardScheme();
      }
    }

    private static class updatePurge_resultStandardScheme extends StandardScheme<updatePurge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePurge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PURGE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.purgeNotFound = new ProvenancePurgeIdNotFoundException();
                struct.purgeNotFound.read(iprot);
                struct.setPurgeNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOCUMENT_NOT_IN_PURGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.documentNotInPurge = new ProvenanceDocumentNotInPurgeException();
                struct.documentNotInPurge.read(iprot);
                struct.setDocumentNotInPurgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePurge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.purgeNotFound != null) {
          oprot.writeFieldBegin(PURGE_NOT_FOUND_FIELD_DESC);
          struct.purgeNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.documentNotInPurge != null) {
          oprot.writeFieldBegin(DOCUMENT_NOT_IN_PURGE_FIELD_DESC);
          struct.documentNotInPurge.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePurge_resultTupleSchemeFactory implements SchemeFactory {
      public updatePurge_resultTupleScheme getScheme() {
        return new updatePurge_resultTupleScheme();
      }
    }

    private static class updatePurge_resultTupleScheme extends TupleScheme<updatePurge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        if (struct.isSetPurgeNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetDocumentNotInPurge()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetPurgeNotFound()) {
          struct.purgeNotFound.write(oprot);
        }
        if (struct.isSetDocumentNotInPurge()) {
          struct.documentNotInPurge.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.purgeNotFound = new ProvenancePurgeIdNotFoundException();
          struct.purgeNotFound.read(iprot);
          struct.setPurgeNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.documentNotInPurge = new ProvenanceDocumentNotInPurgeException();
          struct.documentNotInPurge.read(iprot);
          struct.setDocumentNotInPurgeIsSet(true);
        }
      }
    }

  }

  public static class removeDocumentAgeOffRuleInheritance_args implements org.apache.thrift.TBase<removeDocumentAgeOffRuleInheritance_args, removeDocumentAgeOffRuleInheritance_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeDocumentAgeOffRuleInheritance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeDocumentAgeOffRuleInheritance_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("documentId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DOCUMENT_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("documentUri", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField PARENT_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("parentUri", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeDocumentAgeOffRuleInheritance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeDocumentAgeOffRuleInheritance_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public long documentId; // required
    public String documentUri; // required
    public long parentId; // required
    public String parentUri; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      DOCUMENT_ID((short)2, "documentId"),
      DOCUMENT_URI((short)3, "documentUri"),
      PARENT_ID((short)4, "parentId"),
      PARENT_URI((short)5, "parentUri");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // DOCUMENT_ID
            return DOCUMENT_ID;
          case 3: // DOCUMENT_URI
            return DOCUMENT_URI;
          case 4: // PARENT_ID
            return PARENT_ID;
          case 5: // PARENT_URI
            return PARENT_URI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DOCUMENTID_ISSET_ID = 0;
    private static final int __PARENTID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("documentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DOCUMENT_URI, new org.apache.thrift.meta_data.FieldMetaData("documentUri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARENT_URI, new org.apache.thrift.meta_data.FieldMetaData("parentUri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeDocumentAgeOffRuleInheritance_args.class, metaDataMap);
    }

    public removeDocumentAgeOffRuleInheritance_args() {
    }

    public removeDocumentAgeOffRuleInheritance_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      long documentId,
      String documentUri,
      long parentId,
      String parentUri)
    {
      this();
      this.securityToken = securityToken;
      this.documentId = documentId;
      setDocumentIdIsSet(true);
      this.documentUri = documentUri;
      this.parentId = parentId;
      setParentIdIsSet(true);
      this.parentUri = parentUri;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeDocumentAgeOffRuleInheritance_args(removeDocumentAgeOffRuleInheritance_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      this.documentId = other.documentId;
      if (other.isSetDocumentUri()) {
        this.documentUri = other.documentUri;
      }
      this.parentId = other.parentId;
      if (other.isSetParentUri()) {
        this.parentUri = other.parentUri;
      }
    }

    public removeDocumentAgeOffRuleInheritance_args deepCopy() {
      return new removeDocumentAgeOffRuleInheritance_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      setDocumentIdIsSet(false);
      this.documentId = 0;
      this.documentUri = null;
      setParentIdIsSet(false);
      this.parentId = 0;
      this.parentUri = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public removeDocumentAgeOffRuleInheritance_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public long getDocumentId() {
      return this.documentId;
    }

    public removeDocumentAgeOffRuleInheritance_args setDocumentId(long documentId) {
      this.documentId = documentId;
      setDocumentIdIsSet(true);
      return this;
    }

    public void unsetDocumentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCUMENTID_ISSET_ID);
    }

    /** Returns true if field documentId is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentId() {
      return EncodingUtils.testBit(__isset_bitfield, __DOCUMENTID_ISSET_ID);
    }

    public void setDocumentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCUMENTID_ISSET_ID, value);
    }

    public String getDocumentUri() {
      return this.documentUri;
    }

    public removeDocumentAgeOffRuleInheritance_args setDocumentUri(String documentUri) {
      this.documentUri = documentUri;
      return this;
    }

    public void unsetDocumentUri() {
      this.documentUri = null;
    }

    /** Returns true if field documentUri is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentUri() {
      return this.documentUri != null;
    }

    public void setDocumentUriIsSet(boolean value) {
      if (!value) {
        this.documentUri = null;
      }
    }

    public long getParentId() {
      return this.parentId;
    }

    public removeDocumentAgeOffRuleInheritance_args setParentId(long parentId) {
      this.parentId = parentId;
      setParentIdIsSet(true);
      return this;
    }

    public void unsetParentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    public void setParentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
    }

    public String getParentUri() {
      return this.parentUri;
    }

    public removeDocumentAgeOffRuleInheritance_args setParentUri(String parentUri) {
      this.parentUri = parentUri;
      return this;
    }

    public void unsetParentUri() {
      this.parentUri = null;
    }

    /** Returns true if field parentUri is set (has been assigned a value) and false otherwise */
    public boolean isSetParentUri() {
      return this.parentUri != null;
    }

    public void setParentUriIsSet(boolean value) {
      if (!value) {
        this.parentUri = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case DOCUMENT_ID:
        if (value == null) {
          unsetDocumentId();
        } else {
          setDocumentId((Long)value);
        }
        break;

      case DOCUMENT_URI:
        if (value == null) {
          unsetDocumentUri();
        } else {
          setDocumentUri((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((Long)value);
        }
        break;

      case PARENT_URI:
        if (value == null) {
          unsetParentUri();
        } else {
          setParentUri((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case DOCUMENT_ID:
        return Long.valueOf(getDocumentId());

      case DOCUMENT_URI:
        return getDocumentUri();

      case PARENT_ID:
        return Long.valueOf(getParentId());

      case PARENT_URI:
        return getParentUri();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case DOCUMENT_ID:
        return isSetDocumentId();
      case DOCUMENT_URI:
        return isSetDocumentUri();
      case PARENT_ID:
        return isSetParentId();
      case PARENT_URI:
        return isSetParentUri();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeDocumentAgeOffRuleInheritance_args)
        return this.equals((removeDocumentAgeOffRuleInheritance_args)that);
      return false;
    }

    public boolean equals(removeDocumentAgeOffRuleInheritance_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_documentId = true;
      boolean that_present_documentId = true;
      if (this_present_documentId || that_present_documentId) {
        if (!(this_present_documentId && that_present_documentId))
          return false;
        if (this.documentId != that.documentId)
          return false;
      }

      boolean this_present_documentUri = true && this.isSetDocumentUri();
      boolean that_present_documentUri = true && that.isSetDocumentUri();
      if (this_present_documentUri || that_present_documentUri) {
        if (!(this_present_documentUri && that_present_documentUri))
          return false;
        if (!this.documentUri.equals(that.documentUri))
          return false;
      }

      boolean this_present_parentId = true;
      boolean that_present_parentId = true;
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (this.parentId != that.parentId)
          return false;
      }

      boolean this_present_parentUri = true && this.isSetParentUri();
      boolean that_present_parentUri = true && that.isSetParentUri();
      if (this_present_parentUri || that_present_parentUri) {
        if (!(this_present_parentUri && that_present_parentUri))
          return false;
        if (!this.parentUri.equals(that.parentUri))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_documentId = true;
      builder.append(present_documentId);
      if (present_documentId)
        builder.append(documentId);

      boolean present_documentUri = true && (isSetDocumentUri());
      builder.append(present_documentUri);
      if (present_documentUri)
        builder.append(documentUri);

      boolean present_parentId = true;
      builder.append(present_parentId);
      if (present_parentId)
        builder.append(parentId);

      boolean present_parentUri = true && (isSetParentUri());
      builder.append(present_parentUri);
      if (present_parentUri)
        builder.append(parentUri);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(removeDocumentAgeOffRuleInheritance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentId()).compareTo(other.isSetDocumentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentId, other.documentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentUri()).compareTo(other.isSetDocumentUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentUri, other.documentUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentUri()).compareTo(other.isSetParentUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentUri, other.parentUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeDocumentAgeOffRuleInheritance_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentId:");
      sb.append(this.documentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentUri:");
      if (this.documentUri == null) {
        sb.append("null");
      } else {
        sb.append(this.documentUri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      sb.append(this.parentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentUri:");
      if (this.parentUri == null) {
        sb.append("null");
      } else {
        sb.append(this.parentUri);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeDocumentAgeOffRuleInheritance_argsStandardSchemeFactory implements SchemeFactory {
      public removeDocumentAgeOffRuleInheritance_argsStandardScheme getScheme() {
        return new removeDocumentAgeOffRuleInheritance_argsStandardScheme();
      }
    }

    private static class removeDocumentAgeOffRuleInheritance_argsStandardScheme extends StandardScheme<removeDocumentAgeOffRuleInheritance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeDocumentAgeOffRuleInheritance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.documentId = iprot.readI64();
                struct.setDocumentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOCUMENT_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.documentUri = iprot.readString();
                struct.setDocumentUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.parentId = iprot.readI64();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PARENT_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentUri = iprot.readString();
                struct.setParentUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeDocumentAgeOffRuleInheritance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DOCUMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.documentId);
        oprot.writeFieldEnd();
        if (struct.documentUri != null) {
          oprot.writeFieldBegin(DOCUMENT_URI_FIELD_DESC);
          oprot.writeString(struct.documentUri);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI64(struct.parentId);
        oprot.writeFieldEnd();
        if (struct.parentUri != null) {
          oprot.writeFieldBegin(PARENT_URI_FIELD_DESC);
          oprot.writeString(struct.parentUri);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeDocumentAgeOffRuleInheritance_argsTupleSchemeFactory implements SchemeFactory {
      public removeDocumentAgeOffRuleInheritance_argsTupleScheme getScheme() {
        return new removeDocumentAgeOffRuleInheritance_argsTupleScheme();
      }
    }

    private static class removeDocumentAgeOffRuleInheritance_argsTupleScheme extends TupleScheme<removeDocumentAgeOffRuleInheritance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeDocumentAgeOffRuleInheritance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        BitSet optionals = new BitSet();
        if (struct.isSetDocumentId()) {
          optionals.set(0);
        }
        if (struct.isSetDocumentUri()) {
          optionals.set(1);
        }
        if (struct.isSetParentId()) {
          optionals.set(2);
        }
        if (struct.isSetParentUri()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDocumentId()) {
          oprot.writeI64(struct.documentId);
        }
        if (struct.isSetDocumentUri()) {
          oprot.writeString(struct.documentUri);
        }
        if (struct.isSetParentId()) {
          oprot.writeI64(struct.parentId);
        }
        if (struct.isSetParentUri()) {
          oprot.writeString(struct.parentUri);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeDocumentAgeOffRuleInheritance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.documentId = iprot.readI64();
          struct.setDocumentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.documentUri = iprot.readString();
          struct.setDocumentUriIsSet(true);
        }
        if (incoming.get(2)) {
          struct.parentId = iprot.readI64();
          struct.setParentIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.parentUri = iprot.readString();
          struct.setParentUriIsSet(true);
        }
      }
    }

  }

  public static class removeDocumentAgeOffRuleInheritance_result implements org.apache.thrift.TBase<removeDocumentAgeOffRuleInheritance_result, removeDocumentAgeOffRuleInheritance_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeDocumentAgeOffRuleInheritance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeDocumentAgeOffRuleInheritance_result");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("documentNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ALREADY_AGED_FIELD_DESC = new org.apache.thrift.protocol.TField("alreadyAged", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeDocumentAgeOffRuleInheritance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeDocumentAgeOffRuleInheritance_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceDocumentNotFoundException documentNotFound; // required
    public ProvenanceAlreadyAgedException alreadyAged; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security"),
      DOCUMENT_NOT_FOUND((short)2, "documentNotFound"),
      ALREADY_AGED((short)3, "alreadyAged");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOCUMENT_NOT_FOUND
            return DOCUMENT_NOT_FOUND;
          case 3: // ALREADY_AGED
            return ALREADY_AGED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOCUMENT_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("documentNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ALREADY_AGED, new org.apache.thrift.meta_data.FieldMetaData("alreadyAged", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeDocumentAgeOffRuleInheritance_result.class, metaDataMap);
    }

    public removeDocumentAgeOffRuleInheritance_result() {
    }

    public removeDocumentAgeOffRuleInheritance_result(
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceDocumentNotFoundException documentNotFound,
      ProvenanceAlreadyAgedException alreadyAged)
    {
      this();
      this.security = security;
      this.documentNotFound = documentNotFound;
      this.alreadyAged = alreadyAged;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeDocumentAgeOffRuleInheritance_result(removeDocumentAgeOffRuleInheritance_result other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDocumentNotFound()) {
        this.documentNotFound = new ProvenanceDocumentNotFoundException(other.documentNotFound);
      }
      if (other.isSetAlreadyAged()) {
        this.alreadyAged = new ProvenanceAlreadyAgedException(other.alreadyAged);
      }
    }

    public removeDocumentAgeOffRuleInheritance_result deepCopy() {
      return new removeDocumentAgeOffRuleInheritance_result(this);
    }

    @Override
    public void clear() {
      this.security = null;
      this.documentNotFound = null;
      this.alreadyAged = null;
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public removeDocumentAgeOffRuleInheritance_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceDocumentNotFoundException getDocumentNotFound() {
      return this.documentNotFound;
    }

    public removeDocumentAgeOffRuleInheritance_result setDocumentNotFound(ProvenanceDocumentNotFoundException documentNotFound) {
      this.documentNotFound = documentNotFound;
      return this;
    }

    public void unsetDocumentNotFound() {
      this.documentNotFound = null;
    }

    /** Returns true if field documentNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentNotFound() {
      return this.documentNotFound != null;
    }

    public void setDocumentNotFoundIsSet(boolean value) {
      if (!value) {
        this.documentNotFound = null;
      }
    }

    public ProvenanceAlreadyAgedException getAlreadyAged() {
      return this.alreadyAged;
    }

    public removeDocumentAgeOffRuleInheritance_result setAlreadyAged(ProvenanceAlreadyAgedException alreadyAged) {
      this.alreadyAged = alreadyAged;
      return this;
    }

    public void unsetAlreadyAged() {
      this.alreadyAged = null;
    }

    /** Returns true if field alreadyAged is set (has been assigned a value) and false otherwise */
    public boolean isSetAlreadyAged() {
      return this.alreadyAged != null;
    }

    public void setAlreadyAgedIsSet(boolean value) {
      if (!value) {
        this.alreadyAged = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOCUMENT_NOT_FOUND:
        if (value == null) {
          unsetDocumentNotFound();
        } else {
          setDocumentNotFound((ProvenanceDocumentNotFoundException)value);
        }
        break;

      case ALREADY_AGED:
        if (value == null) {
          unsetAlreadyAged();
        } else {
          setAlreadyAged((ProvenanceAlreadyAgedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      case DOCUMENT_NOT_FOUND:
        return getDocumentNotFound();

      case ALREADY_AGED:
        return getAlreadyAged();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      case DOCUMENT_NOT_FOUND:
        return isSetDocumentNotFound();
      case ALREADY_AGED:
        return isSetAlreadyAged();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeDocumentAgeOffRuleInheritance_result)
        return this.equals((removeDocumentAgeOffRuleInheritance_result)that);
      return false;
    }

    public boolean equals(removeDocumentAgeOffRuleInheritance_result that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_documentNotFound = true && this.isSetDocumentNotFound();
      boolean that_present_documentNotFound = true && that.isSetDocumentNotFound();
      if (this_present_documentNotFound || that_present_documentNotFound) {
        if (!(this_present_documentNotFound && that_present_documentNotFound))
          return false;
        if (!this.documentNotFound.equals(that.documentNotFound))
          return false;
      }

      boolean this_present_alreadyAged = true && this.isSetAlreadyAged();
      boolean that_present_alreadyAged = true && that.isSetAlreadyAged();
      if (this_present_alreadyAged || that_present_alreadyAged) {
        if (!(this_present_alreadyAged && that_present_alreadyAged))
          return false;
        if (!this.alreadyAged.equals(that.alreadyAged))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_documentNotFound = true && (isSetDocumentNotFound());
      builder.append(present_documentNotFound);
      if (present_documentNotFound)
        builder.append(documentNotFound);

      boolean present_alreadyAged = true && (isSetAlreadyAged());
      builder.append(present_alreadyAged);
      if (present_alreadyAged)
        builder.append(alreadyAged);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(removeDocumentAgeOffRuleInheritance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentNotFound()).compareTo(other.isSetDocumentNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentNotFound, other.documentNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlreadyAged()).compareTo(other.isSetAlreadyAged());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlreadyAged()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alreadyAged, other.alreadyAged);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeDocumentAgeOffRuleInheritance_result(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentNotFound:");
      if (this.documentNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.documentNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("alreadyAged:");
      if (this.alreadyAged == null) {
        sb.append("null");
      } else {
        sb.append(this.alreadyAged);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeDocumentAgeOffRuleInheritance_resultStandardSchemeFactory implements SchemeFactory {
      public removeDocumentAgeOffRuleInheritance_resultStandardScheme getScheme() {
        return new removeDocumentAgeOffRuleInheritance_resultStandardScheme();
      }
    }

    private static class removeDocumentAgeOffRuleInheritance_resultStandardScheme extends StandardScheme<removeDocumentAgeOffRuleInheritance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeDocumentAgeOffRuleInheritance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.documentNotFound = new ProvenanceDocumentNotFoundException();
                struct.documentNotFound.read(iprot);
                struct.setDocumentNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ALREADY_AGED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.alreadyAged = new ProvenanceAlreadyAgedException();
                struct.alreadyAged.read(iprot);
                struct.setAlreadyAgedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeDocumentAgeOffRuleInheritance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.documentNotFound != null) {
          oprot.writeFieldBegin(DOCUMENT_NOT_FOUND_FIELD_DESC);
          struct.documentNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.alreadyAged != null) {
          oprot.writeFieldBegin(ALREADY_AGED_FIELD_DESC);
          struct.alreadyAged.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeDocumentAgeOffRuleInheritance_resultTupleSchemeFactory implements SchemeFactory {
      public removeDocumentAgeOffRuleInheritance_resultTupleScheme getScheme() {
        return new removeDocumentAgeOffRuleInheritance_resultTupleScheme();
      }
    }

    private static class removeDocumentAgeOffRuleInheritance_resultTupleScheme extends TupleScheme<removeDocumentAgeOffRuleInheritance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeDocumentAgeOffRuleInheritance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        if (struct.isSetDocumentNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetAlreadyAged()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDocumentNotFound()) {
          struct.documentNotFound.write(oprot);
        }
        if (struct.isSetAlreadyAged()) {
          struct.alreadyAged.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeDocumentAgeOffRuleInheritance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.documentNotFound = new ProvenanceDocumentNotFoundException();
          struct.documentNotFound.read(iprot);
          struct.setDocumentNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.alreadyAged = new ProvenanceAlreadyAgedException();
          struct.alreadyAged.read(iprot);
          struct.setAlreadyAgedIsSet(true);
        }
      }
    }

  }

  public static class removeDocumentExplicitAgeOffRule_args implements org.apache.thrift.TBase<removeDocumentExplicitAgeOffRule_args, removeDocumentExplicitAgeOffRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeDocumentExplicitAgeOffRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeDocumentExplicitAgeOffRule_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("documentId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DOCUMENT_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("documentUri", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AGE_OFF_RULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ageOffRuleId", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeDocumentExplicitAgeOffRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeDocumentExplicitAgeOffRule_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public long documentId; // required
    public String documentUri; // required
    public long ageOffRuleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      DOCUMENT_ID((short)2, "documentId"),
      DOCUMENT_URI((short)3, "documentUri"),
      AGE_OFF_RULE_ID((short)4, "ageOffRuleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // DOCUMENT_ID
            return DOCUMENT_ID;
          case 3: // DOCUMENT_URI
            return DOCUMENT_URI;
          case 4: // AGE_OFF_RULE_ID
            return AGE_OFF_RULE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DOCUMENTID_ISSET_ID = 0;
    private static final int __AGEOFFRULEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("documentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DOCUMENT_URI, new org.apache.thrift.meta_data.FieldMetaData("documentUri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGE_OFF_RULE_ID, new org.apache.thrift.meta_data.FieldMetaData("ageOffRuleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeDocumentExplicitAgeOffRule_args.class, metaDataMap);
    }

    public removeDocumentExplicitAgeOffRule_args() {
    }

    public removeDocumentExplicitAgeOffRule_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      long documentId,
      String documentUri,
      long ageOffRuleId)
    {
      this();
      this.securityToken = securityToken;
      this.documentId = documentId;
      setDocumentIdIsSet(true);
      this.documentUri = documentUri;
      this.ageOffRuleId = ageOffRuleId;
      setAgeOffRuleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeDocumentExplicitAgeOffRule_args(removeDocumentExplicitAgeOffRule_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      this.documentId = other.documentId;
      if (other.isSetDocumentUri()) {
        this.documentUri = other.documentUri;
      }
      this.ageOffRuleId = other.ageOffRuleId;
    }

    public removeDocumentExplicitAgeOffRule_args deepCopy() {
      return new removeDocumentExplicitAgeOffRule_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      setDocumentIdIsSet(false);
      this.documentId = 0;
      this.documentUri = null;
      setAgeOffRuleIdIsSet(false);
      this.ageOffRuleId = 0;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public removeDocumentExplicitAgeOffRule_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public long getDocumentId() {
      return this.documentId;
    }

    public removeDocumentExplicitAgeOffRule_args setDocumentId(long documentId) {
      this.documentId = documentId;
      setDocumentIdIsSet(true);
      return this;
    }

    public void unsetDocumentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCUMENTID_ISSET_ID);
    }

    /** Returns true if field documentId is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentId() {
      return EncodingUtils.testBit(__isset_bitfield, __DOCUMENTID_ISSET_ID);
    }

    public void setDocumentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCUMENTID_ISSET_ID, value);
    }

    public String getDocumentUri() {
      return this.documentUri;
    }

    public removeDocumentExplicitAgeOffRule_args setDocumentUri(String documentUri) {
      this.documentUri = documentUri;
      return this;
    }

    public void unsetDocumentUri() {
      this.documentUri = null;
    }

    /** Returns true if field documentUri is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentUri() {
      return this.documentUri != null;
    }

    public void setDocumentUriIsSet(boolean value) {
      if (!value) {
        this.documentUri = null;
      }
    }

    public long getAgeOffRuleId() {
      return this.ageOffRuleId;
    }

    public removeDocumentExplicitAgeOffRule_args setAgeOffRuleId(long ageOffRuleId) {
      this.ageOffRuleId = ageOffRuleId;
      setAgeOffRuleIdIsSet(true);
      return this;
    }

    public void unsetAgeOffRuleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGEOFFRULEID_ISSET_ID);
    }

    /** Returns true if field ageOffRuleId is set (has been assigned a value) and false otherwise */
    public boolean isSetAgeOffRuleId() {
      return EncodingUtils.testBit(__isset_bitfield, __AGEOFFRULEID_ISSET_ID);
    }

    public void setAgeOffRuleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGEOFFRULEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case DOCUMENT_ID:
        if (value == null) {
          unsetDocumentId();
        } else {
          setDocumentId((Long)value);
        }
        break;

      case DOCUMENT_URI:
        if (value == null) {
          unsetDocumentUri();
        } else {
          setDocumentUri((String)value);
        }
        break;

      case AGE_OFF_RULE_ID:
        if (value == null) {
          unsetAgeOffRuleId();
        } else {
          setAgeOffRuleId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case DOCUMENT_ID:
        return Long.valueOf(getDocumentId());

      case DOCUMENT_URI:
        return getDocumentUri();

      case AGE_OFF_RULE_ID:
        return Long.valueOf(getAgeOffRuleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case DOCUMENT_ID:
        return isSetDocumentId();
      case DOCUMENT_URI:
        return isSetDocumentUri();
      case AGE_OFF_RULE_ID:
        return isSetAgeOffRuleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeDocumentExplicitAgeOffRule_args)
        return this.equals((removeDocumentExplicitAgeOffRule_args)that);
      return false;
    }

    public boolean equals(removeDocumentExplicitAgeOffRule_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_documentId = true;
      boolean that_present_documentId = true;
      if (this_present_documentId || that_present_documentId) {
        if (!(this_present_documentId && that_present_documentId))
          return false;
        if (this.documentId != that.documentId)
          return false;
      }

      boolean this_present_documentUri = true && this.isSetDocumentUri();
      boolean that_present_documentUri = true && that.isSetDocumentUri();
      if (this_present_documentUri || that_present_documentUri) {
        if (!(this_present_documentUri && that_present_documentUri))
          return false;
        if (!this.documentUri.equals(that.documentUri))
          return false;
      }

      boolean this_present_ageOffRuleId = true;
      boolean that_present_ageOffRuleId = true;
      if (this_present_ageOffRuleId || that_present_ageOffRuleId) {
        if (!(this_present_ageOffRuleId && that_present_ageOffRuleId))
          return false;
        if (this.ageOffRuleId != that.ageOffRuleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_documentId = true;
      builder.append(present_documentId);
      if (present_documentId)
        builder.append(documentId);

      boolean present_documentUri = true && (isSetDocumentUri());
      builder.append(present_documentUri);
      if (present_documentUri)
        builder.append(documentUri);

      boolean present_ageOffRuleId = true;
      builder.append(present_ageOffRuleId);
      if (present_ageOffRuleId)
        builder.append(ageOffRuleId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(removeDocumentExplicitAgeOffRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentId()).compareTo(other.isSetDocumentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentId, other.documentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentUri()).compareTo(other.isSetDocumentUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentUri, other.documentUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAgeOffRuleId()).compareTo(other.isSetAgeOffRuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgeOffRuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageOffRuleId, other.ageOffRuleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeDocumentExplicitAgeOffRule_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentId:");
      sb.append(this.documentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentUri:");
      if (this.documentUri == null) {
        sb.append("null");
      } else {
        sb.append(this.documentUri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ageOffRuleId:");
      sb.append(this.ageOffRuleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'ageOffRuleId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeDocumentExplicitAgeOffRule_argsStandardSchemeFactory implements SchemeFactory {
      public removeDocumentExplicitAgeOffRule_argsStandardScheme getScheme() {
        return new removeDocumentExplicitAgeOffRule_argsStandardScheme();
      }
    }

    private static class removeDocumentExplicitAgeOffRule_argsStandardScheme extends StandardScheme<removeDocumentExplicitAgeOffRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeDocumentExplicitAgeOffRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.documentId = iprot.readI64();
                struct.setDocumentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOCUMENT_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.documentUri = iprot.readString();
                struct.setDocumentUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AGE_OFF_RULE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ageOffRuleId = iprot.readI64();
                struct.setAgeOffRuleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetAgeOffRuleId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'ageOffRuleId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeDocumentExplicitAgeOffRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DOCUMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.documentId);
        oprot.writeFieldEnd();
        if (struct.documentUri != null) {
          oprot.writeFieldBegin(DOCUMENT_URI_FIELD_DESC);
          oprot.writeString(struct.documentUri);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AGE_OFF_RULE_ID_FIELD_DESC);
        oprot.writeI64(struct.ageOffRuleId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeDocumentExplicitAgeOffRule_argsTupleSchemeFactory implements SchemeFactory {
      public removeDocumentExplicitAgeOffRule_argsTupleScheme getScheme() {
        return new removeDocumentExplicitAgeOffRule_argsTupleScheme();
      }
    }

    private static class removeDocumentExplicitAgeOffRule_argsTupleScheme extends TupleScheme<removeDocumentExplicitAgeOffRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeDocumentExplicitAgeOffRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        oprot.writeI64(struct.ageOffRuleId);
        BitSet optionals = new BitSet();
        if (struct.isSetDocumentId()) {
          optionals.set(0);
        }
        if (struct.isSetDocumentUri()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDocumentId()) {
          oprot.writeI64(struct.documentId);
        }
        if (struct.isSetDocumentUri()) {
          oprot.writeString(struct.documentUri);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeDocumentExplicitAgeOffRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        struct.ageOffRuleId = iprot.readI64();
        struct.setAgeOffRuleIdIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.documentId = iprot.readI64();
          struct.setDocumentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.documentUri = iprot.readString();
          struct.setDocumentUriIsSet(true);
        }
      }
    }

  }

  public static class removeDocumentExplicitAgeOffRule_result implements org.apache.thrift.TBase<removeDocumentExplicitAgeOffRule_result, removeDocumentExplicitAgeOffRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeDocumentExplicitAgeOffRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeDocumentExplicitAgeOffRule_result");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("documentNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RULE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ALREADY_AGED_FIELD_DESC = new org.apache.thrift.protocol.TField("alreadyAged", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeDocumentExplicitAgeOffRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeDocumentExplicitAgeOffRule_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceDocumentNotFoundException documentNotFound; // required
    public ProvenanceAgeOffRuleNotFoundException ruleNotFound; // required
    public ProvenanceAlreadyAgedException alreadyAged; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security"),
      DOCUMENT_NOT_FOUND((short)2, "documentNotFound"),
      RULE_NOT_FOUND((short)3, "ruleNotFound"),
      ALREADY_AGED((short)4, "alreadyAged");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOCUMENT_NOT_FOUND
            return DOCUMENT_NOT_FOUND;
          case 3: // RULE_NOT_FOUND
            return RULE_NOT_FOUND;
          case 4: // ALREADY_AGED
            return ALREADY_AGED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOCUMENT_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("documentNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RULE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("ruleNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ALREADY_AGED, new org.apache.thrift.meta_data.FieldMetaData("alreadyAged", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeDocumentExplicitAgeOffRule_result.class, metaDataMap);
    }

    public removeDocumentExplicitAgeOffRule_result() {
    }

    public removeDocumentExplicitAgeOffRule_result(
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceDocumentNotFoundException documentNotFound,
      ProvenanceAgeOffRuleNotFoundException ruleNotFound,
      ProvenanceAlreadyAgedException alreadyAged)
    {
      this();
      this.security = security;
      this.documentNotFound = documentNotFound;
      this.ruleNotFound = ruleNotFound;
      this.alreadyAged = alreadyAged;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeDocumentExplicitAgeOffRule_result(removeDocumentExplicitAgeOffRule_result other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDocumentNotFound()) {
        this.documentNotFound = new ProvenanceDocumentNotFoundException(other.documentNotFound);
      }
      if (other.isSetRuleNotFound()) {
        this.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException(other.ruleNotFound);
      }
      if (other.isSetAlreadyAged()) {
        this.alreadyAged = new ProvenanceAlreadyAgedException(other.alreadyAged);
      }
    }

    public removeDocumentExplicitAgeOffRule_result deepCopy() {
      return new removeDocumentExplicitAgeOffRule_result(this);
    }

    @Override
    public void clear() {
      this.security = null;
      this.documentNotFound = null;
      this.ruleNotFound = null;
      this.alreadyAged = null;
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public removeDocumentExplicitAgeOffRule_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceDocumentNotFoundException getDocumentNotFound() {
      return this.documentNotFound;
    }

    public removeDocumentExplicitAgeOffRule_result setDocumentNotFound(ProvenanceDocumentNotFoundException documentNotFound) {
      this.documentNotFound = documentNotFound;
      return this;
    }

    public void unsetDocumentNotFound() {
      this.documentNotFound = null;
    }

    /** Returns true if field documentNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentNotFound() {
      return this.documentNotFound != null;
    }

    public void setDocumentNotFoundIsSet(boolean value) {
      if (!value) {
        this.documentNotFound = null;
      }
    }

    public ProvenanceAgeOffRuleNotFoundException getRuleNotFound() {
      return this.ruleNotFound;
    }

    public removeDocumentExplicitAgeOffRule_result setRuleNotFound(ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
      this.ruleNotFound = ruleNotFound;
      return this;
    }

    public void unsetRuleNotFound() {
      this.ruleNotFound = null;
    }

    /** Returns true if field ruleNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleNotFound() {
      return this.ruleNotFound != null;
    }

    public void setRuleNotFoundIsSet(boolean value) {
      if (!value) {
        this.ruleNotFound = null;
      }
    }

    public ProvenanceAlreadyAgedException getAlreadyAged() {
      return this.alreadyAged;
    }

    public removeDocumentExplicitAgeOffRule_result setAlreadyAged(ProvenanceAlreadyAgedException alreadyAged) {
      this.alreadyAged = alreadyAged;
      return this;
    }

    public void unsetAlreadyAged() {
      this.alreadyAged = null;
    }

    /** Returns true if field alreadyAged is set (has been assigned a value) and false otherwise */
    public boolean isSetAlreadyAged() {
      return this.alreadyAged != null;
    }

    public void setAlreadyAgedIsSet(boolean value) {
      if (!value) {
        this.alreadyAged = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOCUMENT_NOT_FOUND:
        if (value == null) {
          unsetDocumentNotFound();
        } else {
          setDocumentNotFound((ProvenanceDocumentNotFoundException)value);
        }
        break;

      case RULE_NOT_FOUND:
        if (value == null) {
          unsetRuleNotFound();
        } else {
          setRuleNotFound((ProvenanceAgeOffRuleNotFoundException)value);
        }
        break;

      case ALREADY_AGED:
        if (value == null) {
          unsetAlreadyAged();
        } else {
          setAlreadyAged((ProvenanceAlreadyAgedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      case DOCUMENT_NOT_FOUND:
        return getDocumentNotFound();

      case RULE_NOT_FOUND:
        return getRuleNotFound();

      case ALREADY_AGED:
        return getAlreadyAged();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      case DOCUMENT_NOT_FOUND:
        return isSetDocumentNotFound();
      case RULE_NOT_FOUND:
        return isSetRuleNotFound();
      case ALREADY_AGED:
        return isSetAlreadyAged();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeDocumentExplicitAgeOffRule_result)
        return this.equals((removeDocumentExplicitAgeOffRule_result)that);
      return false;
    }

    public boolean equals(removeDocumentExplicitAgeOffRule_result that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_documentNotFound = true && this.isSetDocumentNotFound();
      boolean that_present_documentNotFound = true && that.isSetDocumentNotFound();
      if (this_present_documentNotFound || that_present_documentNotFound) {
        if (!(this_present_documentNotFound && that_present_documentNotFound))
          return false;
        if (!this.documentNotFound.equals(that.documentNotFound))
          return false;
      }

      boolean this_present_ruleNotFound = true && this.isSetRuleNotFound();
      boolean that_present_ruleNotFound = true && that.isSetRuleNotFound();
      if (this_present_ruleNotFound || that_present_ruleNotFound) {
        if (!(this_present_ruleNotFound && that_present_ruleNotFound))
          return false;
        if (!this.ruleNotFound.equals(that.ruleNotFound))
          return false;
      }

      boolean this_present_alreadyAged = true && this.isSetAlreadyAged();
      boolean that_present_alreadyAged = true && that.isSetAlreadyAged();
      if (this_present_alreadyAged || that_present_alreadyAged) {
        if (!(this_present_alreadyAged && that_present_alreadyAged))
          return false;
        if (!this.alreadyAged.equals(that.alreadyAged))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_documentNotFound = true && (isSetDocumentNotFound());
      builder.append(present_documentNotFound);
      if (present_documentNotFound)
        builder.append(documentNotFound);

      boolean present_ruleNotFound = true && (isSetRuleNotFound());
      builder.append(present_ruleNotFound);
      if (present_ruleNotFound)
        builder.append(ruleNotFound);

      boolean present_alreadyAged = true && (isSetAlreadyAged());
      builder.append(present_alreadyAged);
      if (present_alreadyAged)
        builder.append(alreadyAged);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(removeDocumentExplicitAgeOffRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentNotFound()).compareTo(other.isSetDocumentNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentNotFound, other.documentNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleNotFound()).compareTo(other.isSetRuleNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleNotFound, other.ruleNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlreadyAged()).compareTo(other.isSetAlreadyAged());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlreadyAged()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alreadyAged, other.alreadyAged);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeDocumentExplicitAgeOffRule_result(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentNotFound:");
      if (this.documentNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.documentNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleNotFound:");
      if (this.ruleNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("alreadyAged:");
      if (this.alreadyAged == null) {
        sb.append("null");
      } else {
        sb.append(this.alreadyAged);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeDocumentExplicitAgeOffRule_resultStandardSchemeFactory implements SchemeFactory {
      public removeDocumentExplicitAgeOffRule_resultStandardScheme getScheme() {
        return new removeDocumentExplicitAgeOffRule_resultStandardScheme();
      }
    }

    private static class removeDocumentExplicitAgeOffRule_resultStandardScheme extends StandardScheme<removeDocumentExplicitAgeOffRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeDocumentExplicitAgeOffRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.documentNotFound = new ProvenanceDocumentNotFoundException();
                struct.documentNotFound.read(iprot);
                struct.setDocumentNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RULE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
                struct.ruleNotFound.read(iprot);
                struct.setRuleNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALREADY_AGED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.alreadyAged = new ProvenanceAlreadyAgedException();
                struct.alreadyAged.read(iprot);
                struct.setAlreadyAgedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeDocumentExplicitAgeOffRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.documentNotFound != null) {
          oprot.writeFieldBegin(DOCUMENT_NOT_FOUND_FIELD_DESC);
          struct.documentNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ruleNotFound != null) {
          oprot.writeFieldBegin(RULE_NOT_FOUND_FIELD_DESC);
          struct.ruleNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.alreadyAged != null) {
          oprot.writeFieldBegin(ALREADY_AGED_FIELD_DESC);
          struct.alreadyAged.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeDocumentExplicitAgeOffRule_resultTupleSchemeFactory implements SchemeFactory {
      public removeDocumentExplicitAgeOffRule_resultTupleScheme getScheme() {
        return new removeDocumentExplicitAgeOffRule_resultTupleScheme();
      }
    }

    private static class removeDocumentExplicitAgeOffRule_resultTupleScheme extends TupleScheme<removeDocumentExplicitAgeOffRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeDocumentExplicitAgeOffRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        if (struct.isSetDocumentNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetRuleNotFound()) {
          optionals.set(2);
        }
        if (struct.isSetAlreadyAged()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDocumentNotFound()) {
          struct.documentNotFound.write(oprot);
        }
        if (struct.isSetRuleNotFound()) {
          struct.ruleNotFound.write(oprot);
        }
        if (struct.isSetAlreadyAged()) {
          struct.alreadyAged.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeDocumentExplicitAgeOffRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.documentNotFound = new ProvenanceDocumentNotFoundException();
          struct.documentNotFound.read(iprot);
          struct.setDocumentNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
          struct.ruleNotFound.read(iprot);
          struct.setRuleNotFoundIsSet(true);
        }
        if (incoming.get(3)) {
          struct.alreadyAged = new ProvenanceAlreadyAgedException();
          struct.alreadyAged.read(iprot);
          struct.setAlreadyAgedIsSet(true);
        }
      }
    }

  }

  public static class addDocumentExplicitAgeOffRule_args implements org.apache.thrift.TBase<addDocumentExplicitAgeOffRule_args, addDocumentExplicitAgeOffRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<addDocumentExplicitAgeOffRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDocumentExplicitAgeOffRule_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("documentId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DOCUMENT_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("documentUri", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AGE_OFF_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("ageOffMapping", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDocumentExplicitAgeOffRule_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDocumentExplicitAgeOffRule_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public long documentId; // required
    public String documentUri; // required
    public AgeOffMapping ageOffMapping; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      DOCUMENT_ID((short)2, "documentId"),
      DOCUMENT_URI((short)3, "documentUri"),
      AGE_OFF_MAPPING((short)4, "ageOffMapping");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // DOCUMENT_ID
            return DOCUMENT_ID;
          case 3: // DOCUMENT_URI
            return DOCUMENT_URI;
          case 4: // AGE_OFF_MAPPING
            return AGE_OFF_MAPPING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DOCUMENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("documentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DOCUMENT_URI, new org.apache.thrift.meta_data.FieldMetaData("documentUri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGE_OFF_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("ageOffMapping", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgeOffMapping.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDocumentExplicitAgeOffRule_args.class, metaDataMap);
    }

    public addDocumentExplicitAgeOffRule_args() {
    }

    public addDocumentExplicitAgeOffRule_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      long documentId,
      String documentUri,
      AgeOffMapping ageOffMapping)
    {
      this();
      this.securityToken = securityToken;
      this.documentId = documentId;
      setDocumentIdIsSet(true);
      this.documentUri = documentUri;
      this.ageOffMapping = ageOffMapping;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDocumentExplicitAgeOffRule_args(addDocumentExplicitAgeOffRule_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      this.documentId = other.documentId;
      if (other.isSetDocumentUri()) {
        this.documentUri = other.documentUri;
      }
      if (other.isSetAgeOffMapping()) {
        this.ageOffMapping = new AgeOffMapping(other.ageOffMapping);
      }
    }

    public addDocumentExplicitAgeOffRule_args deepCopy() {
      return new addDocumentExplicitAgeOffRule_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      setDocumentIdIsSet(false);
      this.documentId = 0;
      this.documentUri = null;
      this.ageOffMapping = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public addDocumentExplicitAgeOffRule_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public long getDocumentId() {
      return this.documentId;
    }

    public addDocumentExplicitAgeOffRule_args setDocumentId(long documentId) {
      this.documentId = documentId;
      setDocumentIdIsSet(true);
      return this;
    }

    public void unsetDocumentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCUMENTID_ISSET_ID);
    }

    /** Returns true if field documentId is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentId() {
      return EncodingUtils.testBit(__isset_bitfield, __DOCUMENTID_ISSET_ID);
    }

    public void setDocumentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCUMENTID_ISSET_ID, value);
    }

    public String getDocumentUri() {
      return this.documentUri;
    }

    public addDocumentExplicitAgeOffRule_args setDocumentUri(String documentUri) {
      this.documentUri = documentUri;
      return this;
    }

    public void unsetDocumentUri() {
      this.documentUri = null;
    }

    /** Returns true if field documentUri is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentUri() {
      return this.documentUri != null;
    }

    public void setDocumentUriIsSet(boolean value) {
      if (!value) {
        this.documentUri = null;
      }
    }

    public AgeOffMapping getAgeOffMapping() {
      return this.ageOffMapping;
    }

    public addDocumentExplicitAgeOffRule_args setAgeOffMapping(AgeOffMapping ageOffMapping) {
      this.ageOffMapping = ageOffMapping;
      return this;
    }

    public void unsetAgeOffMapping() {
      this.ageOffMapping = null;
    }

    /** Returns true if field ageOffMapping is set (has been assigned a value) and false otherwise */
    public boolean isSetAgeOffMapping() {
      return this.ageOffMapping != null;
    }

    public void setAgeOffMappingIsSet(boolean value) {
      if (!value) {
        this.ageOffMapping = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case DOCUMENT_ID:
        if (value == null) {
          unsetDocumentId();
        } else {
          setDocumentId((Long)value);
        }
        break;

      case DOCUMENT_URI:
        if (value == null) {
          unsetDocumentUri();
        } else {
          setDocumentUri((String)value);
        }
        break;

      case AGE_OFF_MAPPING:
        if (value == null) {
          unsetAgeOffMapping();
        } else {
          setAgeOffMapping((AgeOffMapping)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case DOCUMENT_ID:
        return Long.valueOf(getDocumentId());

      case DOCUMENT_URI:
        return getDocumentUri();

      case AGE_OFF_MAPPING:
        return getAgeOffMapping();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case DOCUMENT_ID:
        return isSetDocumentId();
      case DOCUMENT_URI:
        return isSetDocumentUri();
      case AGE_OFF_MAPPING:
        return isSetAgeOffMapping();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDocumentExplicitAgeOffRule_args)
        return this.equals((addDocumentExplicitAgeOffRule_args)that);
      return false;
    }

    public boolean equals(addDocumentExplicitAgeOffRule_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_documentId = true;
      boolean that_present_documentId = true;
      if (this_present_documentId || that_present_documentId) {
        if (!(this_present_documentId && that_present_documentId))
          return false;
        if (this.documentId != that.documentId)
          return false;
      }

      boolean this_present_documentUri = true && this.isSetDocumentUri();
      boolean that_present_documentUri = true && that.isSetDocumentUri();
      if (this_present_documentUri || that_present_documentUri) {
        if (!(this_present_documentUri && that_present_documentUri))
          return false;
        if (!this.documentUri.equals(that.documentUri))
          return false;
      }

      boolean this_present_ageOffMapping = true && this.isSetAgeOffMapping();
      boolean that_present_ageOffMapping = true && that.isSetAgeOffMapping();
      if (this_present_ageOffMapping || that_present_ageOffMapping) {
        if (!(this_present_ageOffMapping && that_present_ageOffMapping))
          return false;
        if (!this.ageOffMapping.equals(that.ageOffMapping))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_documentId = true;
      builder.append(present_documentId);
      if (present_documentId)
        builder.append(documentId);

      boolean present_documentUri = true && (isSetDocumentUri());
      builder.append(present_documentUri);
      if (present_documentUri)
        builder.append(documentUri);

      boolean present_ageOffMapping = true && (isSetAgeOffMapping());
      builder.append(present_ageOffMapping);
      if (present_ageOffMapping)
        builder.append(ageOffMapping);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addDocumentExplicitAgeOffRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentId()).compareTo(other.isSetDocumentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentId, other.documentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentUri()).compareTo(other.isSetDocumentUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentUri, other.documentUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAgeOffMapping()).compareTo(other.isSetAgeOffMapping());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgeOffMapping()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageOffMapping, other.ageOffMapping);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDocumentExplicitAgeOffRule_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentId:");
      sb.append(this.documentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentUri:");
      if (this.documentUri == null) {
        sb.append("null");
      } else {
        sb.append(this.documentUri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ageOffMapping:");
      if (this.ageOffMapping == null) {
        sb.append("null");
      } else {
        sb.append(this.ageOffMapping);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (ageOffMapping == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ageOffMapping' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
      if (ageOffMapping != null) {
        ageOffMapping.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDocumentExplicitAgeOffRule_argsStandardSchemeFactory implements SchemeFactory {
      public addDocumentExplicitAgeOffRule_argsStandardScheme getScheme() {
        return new addDocumentExplicitAgeOffRule_argsStandardScheme();
      }
    }

    private static class addDocumentExplicitAgeOffRule_argsStandardScheme extends StandardScheme<addDocumentExplicitAgeOffRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDocumentExplicitAgeOffRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.documentId = iprot.readI64();
                struct.setDocumentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOCUMENT_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.documentUri = iprot.readString();
                struct.setDocumentUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AGE_OFF_MAPPING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ageOffMapping = new AgeOffMapping();
                struct.ageOffMapping.read(iprot);
                struct.setAgeOffMappingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDocumentExplicitAgeOffRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DOCUMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.documentId);
        oprot.writeFieldEnd();
        if (struct.documentUri != null) {
          oprot.writeFieldBegin(DOCUMENT_URI_FIELD_DESC);
          oprot.writeString(struct.documentUri);
          oprot.writeFieldEnd();
        }
        if (struct.ageOffMapping != null) {
          oprot.writeFieldBegin(AGE_OFF_MAPPING_FIELD_DESC);
          struct.ageOffMapping.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDocumentExplicitAgeOffRule_argsTupleSchemeFactory implements SchemeFactory {
      public addDocumentExplicitAgeOffRule_argsTupleScheme getScheme() {
        return new addDocumentExplicitAgeOffRule_argsTupleScheme();
      }
    }

    private static class addDocumentExplicitAgeOffRule_argsTupleScheme extends TupleScheme<addDocumentExplicitAgeOffRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDocumentExplicitAgeOffRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        struct.ageOffMapping.write(oprot);
        BitSet optionals = new BitSet();
        if (struct.isSetDocumentId()) {
          optionals.set(0);
        }
        if (struct.isSetDocumentUri()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDocumentId()) {
          oprot.writeI64(struct.documentId);
        }
        if (struct.isSetDocumentUri()) {
          oprot.writeString(struct.documentUri);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDocumentExplicitAgeOffRule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        struct.ageOffMapping = new AgeOffMapping();
        struct.ageOffMapping.read(iprot);
        struct.setAgeOffMappingIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.documentId = iprot.readI64();
          struct.setDocumentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.documentUri = iprot.readString();
          struct.setDocumentUriIsSet(true);
        }
      }
    }

  }

  public static class addDocumentExplicitAgeOffRule_result implements org.apache.thrift.TBase<addDocumentExplicitAgeOffRule_result, addDocumentExplicitAgeOffRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<addDocumentExplicitAgeOffRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDocumentExplicitAgeOffRule_result");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("documentNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RULE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ALREADY_AGED_FIELD_DESC = new org.apache.thrift.protocol.TField("alreadyAged", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField EDGE_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("edgeExists", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDocumentExplicitAgeOffRule_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDocumentExplicitAgeOffRule_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceDocumentNotFoundException documentNotFound; // required
    public ProvenanceAgeOffRuleNotFoundException ruleNotFound; // required
    public ProvenanceAlreadyAgedException alreadyAged; // required
    public ProvenanceAgeOffExistsException edgeExists; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security"),
      DOCUMENT_NOT_FOUND((short)2, "documentNotFound"),
      RULE_NOT_FOUND((short)3, "ruleNotFound"),
      ALREADY_AGED((short)4, "alreadyAged"),
      EDGE_EXISTS((short)5, "edgeExists");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOCUMENT_NOT_FOUND
            return DOCUMENT_NOT_FOUND;
          case 3: // RULE_NOT_FOUND
            return RULE_NOT_FOUND;
          case 4: // ALREADY_AGED
            return ALREADY_AGED;
          case 5: // EDGE_EXISTS
            return EDGE_EXISTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOCUMENT_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("documentNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RULE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("ruleNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ALREADY_AGED, new org.apache.thrift.meta_data.FieldMetaData("alreadyAged", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EDGE_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("edgeExists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDocumentExplicitAgeOffRule_result.class, metaDataMap);
    }

    public addDocumentExplicitAgeOffRule_result() {
    }

    public addDocumentExplicitAgeOffRule_result(
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceDocumentNotFoundException documentNotFound,
      ProvenanceAgeOffRuleNotFoundException ruleNotFound,
      ProvenanceAlreadyAgedException alreadyAged,
      ProvenanceAgeOffExistsException edgeExists)
    {
      this();
      this.security = security;
      this.documentNotFound = documentNotFound;
      this.ruleNotFound = ruleNotFound;
      this.alreadyAged = alreadyAged;
      this.edgeExists = edgeExists;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDocumentExplicitAgeOffRule_result(addDocumentExplicitAgeOffRule_result other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDocumentNotFound()) {
        this.documentNotFound = new ProvenanceDocumentNotFoundException(other.documentNotFound);
      }
      if (other.isSetRuleNotFound()) {
        this.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException(other.ruleNotFound);
      }
      if (other.isSetAlreadyAged()) {
        this.alreadyAged = new ProvenanceAlreadyAgedException(other.alreadyAged);
      }
      if (other.isSetEdgeExists()) {
        this.edgeExists = new ProvenanceAgeOffExistsException(other.edgeExists);
      }
    }

    public addDocumentExplicitAgeOffRule_result deepCopy() {
      return new addDocumentExplicitAgeOffRule_result(this);
    }

    @Override
    public void clear() {
      this.security = null;
      this.documentNotFound = null;
      this.ruleNotFound = null;
      this.alreadyAged = null;
      this.edgeExists = null;
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public addDocumentExplicitAgeOffRule_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceDocumentNotFoundException getDocumentNotFound() {
      return this.documentNotFound;
    }

    public addDocumentExplicitAgeOffRule_result setDocumentNotFound(ProvenanceDocumentNotFoundException documentNotFound) {
      this.documentNotFound = documentNotFound;
      return this;
    }

    public void unsetDocumentNotFound() {
      this.documentNotFound = null;
    }

    /** Returns true if field documentNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentNotFound() {
      return this.documentNotFound != null;
    }

    public void setDocumentNotFoundIsSet(boolean value) {
      if (!value) {
        this.documentNotFound = null;
      }
    }

    public ProvenanceAgeOffRuleNotFoundException getRuleNotFound() {
      return this.ruleNotFound;
    }

    public addDocumentExplicitAgeOffRule_result setRuleNotFound(ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
      this.ruleNotFound = ruleNotFound;
      return this;
    }

    public void unsetRuleNotFound() {
      this.ruleNotFound = null;
    }

    /** Returns true if field ruleNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleNotFound() {
      return this.ruleNotFound != null;
    }

    public void setRuleNotFoundIsSet(boolean value) {
      if (!value) {
        this.ruleNotFound = null;
      }
    }

    public ProvenanceAlreadyAgedException getAlreadyAged() {
      return this.alreadyAged;
    }

    public addDocumentExplicitAgeOffRule_result setAlreadyAged(ProvenanceAlreadyAgedException alreadyAged) {
      this.alreadyAged = alreadyAged;
      return this;
    }

    public void unsetAlreadyAged() {
      this.alreadyAged = null;
    }

    /** Returns true if field alreadyAged is set (has been assigned a value) and false otherwise */
    public boolean isSetAlreadyAged() {
      return this.alreadyAged != null;
    }

    public void setAlreadyAgedIsSet(boolean value) {
      if (!value) {
        this.alreadyAged = null;
      }
    }

    public ProvenanceAgeOffExistsException getEdgeExists() {
      return this.edgeExists;
    }

    public addDocumentExplicitAgeOffRule_result setEdgeExists(ProvenanceAgeOffExistsException edgeExists) {
      this.edgeExists = edgeExists;
      return this;
    }

    public void unsetEdgeExists() {
      this.edgeExists = null;
    }

    /** Returns true if field edgeExists is set (has been assigned a value) and false otherwise */
    public boolean isSetEdgeExists() {
      return this.edgeExists != null;
    }

    public void setEdgeExistsIsSet(boolean value) {
      if (!value) {
        this.edgeExists = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOCUMENT_NOT_FOUND:
        if (value == null) {
          unsetDocumentNotFound();
        } else {
          setDocumentNotFound((ProvenanceDocumentNotFoundException)value);
        }
        break;

      case RULE_NOT_FOUND:
        if (value == null) {
          unsetRuleNotFound();
        } else {
          setRuleNotFound((ProvenanceAgeOffRuleNotFoundException)value);
        }
        break;

      case ALREADY_AGED:
        if (value == null) {
          unsetAlreadyAged();
        } else {
          setAlreadyAged((ProvenanceAlreadyAgedException)value);
        }
        break;

      case EDGE_EXISTS:
        if (value == null) {
          unsetEdgeExists();
        } else {
          setEdgeExists((ProvenanceAgeOffExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      case DOCUMENT_NOT_FOUND:
        return getDocumentNotFound();

      case RULE_NOT_FOUND:
        return getRuleNotFound();

      case ALREADY_AGED:
        return getAlreadyAged();

      case EDGE_EXISTS:
        return getEdgeExists();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      case DOCUMENT_NOT_FOUND:
        return isSetDocumentNotFound();
      case RULE_NOT_FOUND:
        return isSetRuleNotFound();
      case ALREADY_AGED:
        return isSetAlreadyAged();
      case EDGE_EXISTS:
        return isSetEdgeExists();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDocumentExplicitAgeOffRule_result)
        return this.equals((addDocumentExplicitAgeOffRule_result)that);
      return false;
    }

    public boolean equals(addDocumentExplicitAgeOffRule_result that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_documentNotFound = true && this.isSetDocumentNotFound();
      boolean that_present_documentNotFound = true && that.isSetDocumentNotFound();
      if (this_present_documentNotFound || that_present_documentNotFound) {
        if (!(this_present_documentNotFound && that_present_documentNotFound))
          return false;
        if (!this.documentNotFound.equals(that.documentNotFound))
          return false;
      }

      boolean this_present_ruleNotFound = true && this.isSetRuleNotFound();
      boolean that_present_ruleNotFound = true && that.isSetRuleNotFound();
      if (this_present_ruleNotFound || that_present_ruleNotFound) {
        if (!(this_present_ruleNotFound && that_present_ruleNotFound))
          return false;
        if (!this.ruleNotFound.equals(that.ruleNotFound))
          return false;
      }

      boolean this_present_alreadyAged = true && this.isSetAlreadyAged();
      boolean that_present_alreadyAged = true && that.isSetAlreadyAged();
      if (this_present_alreadyAged || that_present_alreadyAged) {
        if (!(this_present_alreadyAged && that_present_alreadyAged))
          return false;
        if (!this.alreadyAged.equals(that.alreadyAged))
          return false;
      }

      boolean this_present_edgeExists = true && this.isSetEdgeExists();
      boolean that_present_edgeExists = true && that.isSetEdgeExists();
      if (this_present_edgeExists || that_present_edgeExists) {
        if (!(this_present_edgeExists && that_present_edgeExists))
          return false;
        if (!this.edgeExists.equals(that.edgeExists))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_documentNotFound = true && (isSetDocumentNotFound());
      builder.append(present_documentNotFound);
      if (present_documentNotFound)
        builder.append(documentNotFound);

      boolean present_ruleNotFound = true && (isSetRuleNotFound());
      builder.append(present_ruleNotFound);
      if (present_ruleNotFound)
        builder.append(ruleNotFound);

      boolean present_alreadyAged = true && (isSetAlreadyAged());
      builder.append(present_alreadyAged);
      if (present_alreadyAged)
        builder.append(alreadyAged);

      boolean present_edgeExists = true && (isSetEdgeExists());
      builder.append(present_edgeExists);
      if (present_edgeExists)
        builder.append(edgeExists);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addDocumentExplicitAgeOffRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentNotFound()).compareTo(other.isSetDocumentNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentNotFound, other.documentNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleNotFound()).compareTo(other.isSetRuleNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleNotFound, other.ruleNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlreadyAged()).compareTo(other.isSetAlreadyAged());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlreadyAged()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alreadyAged, other.alreadyAged);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEdgeExists()).compareTo(other.isSetEdgeExists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgeExists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edgeExists, other.edgeExists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDocumentExplicitAgeOffRule_result(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentNotFound:");
      if (this.documentNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.documentNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleNotFound:");
      if (this.ruleNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("alreadyAged:");
      if (this.alreadyAged == null) {
        sb.append("null");
      } else {
        sb.append(this.alreadyAged);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("edgeExists:");
      if (this.edgeExists == null) {
        sb.append("null");
      } else {
        sb.append(this.edgeExists);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDocumentExplicitAgeOffRule_resultStandardSchemeFactory implements SchemeFactory {
      public addDocumentExplicitAgeOffRule_resultStandardScheme getScheme() {
        return new addDocumentExplicitAgeOffRule_resultStandardScheme();
      }
    }

    private static class addDocumentExplicitAgeOffRule_resultStandardScheme extends StandardScheme<addDocumentExplicitAgeOffRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDocumentExplicitAgeOffRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.documentNotFound = new ProvenanceDocumentNotFoundException();
                struct.documentNotFound.read(iprot);
                struct.setDocumentNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RULE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
                struct.ruleNotFound.read(iprot);
                struct.setRuleNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALREADY_AGED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.alreadyAged = new ProvenanceAlreadyAgedException();
                struct.alreadyAged.read(iprot);
                struct.setAlreadyAgedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EDGE_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.edgeExists = new ProvenanceAgeOffExistsException();
                struct.edgeExists.read(iprot);
                struct.setEdgeExistsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDocumentExplicitAgeOffRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.documentNotFound != null) {
          oprot.writeFieldBegin(DOCUMENT_NOT_FOUND_FIELD_DESC);
          struct.documentNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ruleNotFound != null) {
          oprot.writeFieldBegin(RULE_NOT_FOUND_FIELD_DESC);
          struct.ruleNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.alreadyAged != null) {
          oprot.writeFieldBegin(ALREADY_AGED_FIELD_DESC);
          struct.alreadyAged.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.edgeExists != null) {
          oprot.writeFieldBegin(EDGE_EXISTS_FIELD_DESC);
          struct.edgeExists.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDocumentExplicitAgeOffRule_resultTupleSchemeFactory implements SchemeFactory {
      public addDocumentExplicitAgeOffRule_resultTupleScheme getScheme() {
        return new addDocumentExplicitAgeOffRule_resultTupleScheme();
      }
    }

    private static class addDocumentExplicitAgeOffRule_resultTupleScheme extends TupleScheme<addDocumentExplicitAgeOffRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDocumentExplicitAgeOffRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        if (struct.isSetDocumentNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetRuleNotFound()) {
          optionals.set(2);
        }
        if (struct.isSetAlreadyAged()) {
          optionals.set(3);
        }
        if (struct.isSetEdgeExists()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDocumentNotFound()) {
          struct.documentNotFound.write(oprot);
        }
        if (struct.isSetRuleNotFound()) {
          struct.ruleNotFound.write(oprot);
        }
        if (struct.isSetAlreadyAged()) {
          struct.alreadyAged.write(oprot);
        }
        if (struct.isSetEdgeExists()) {
          struct.edgeExists.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDocumentExplicitAgeOffRule_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.documentNotFound = new ProvenanceDocumentNotFoundException();
          struct.documentNotFound.read(iprot);
          struct.setDocumentNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ruleNotFound = new ProvenanceAgeOffRuleNotFoundException();
          struct.ruleNotFound.read(iprot);
          struct.setRuleNotFoundIsSet(true);
        }
        if (incoming.get(3)) {
          struct.alreadyAged = new ProvenanceAlreadyAgedException();
          struct.alreadyAged.read(iprot);
          struct.setAlreadyAgedIsSet(true);
        }
        if (incoming.get(4)) {
          struct.edgeExists = new ProvenanceAgeOffExistsException();
          struct.edgeExists.read(iprot);
          struct.setEdgeExistsIsSet(true);
        }
      }
    }

  }

  public static class addDocumentInheritanceInfo_args implements org.apache.thrift.TBase<addDocumentInheritanceInfo_args, addDocumentInheritanceInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addDocumentInheritanceInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDocumentInheritanceInfo_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("documentId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DOCUMENT_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("documentUri", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField INHERITANCE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("inheritanceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDocumentInheritanceInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDocumentInheritanceInfo_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public long documentId; // required
    public String documentUri; // required
    public InheritanceInfo inheritanceInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      DOCUMENT_ID((short)2, "documentId"),
      DOCUMENT_URI((short)3, "documentUri"),
      INHERITANCE_INFO((short)4, "inheritanceInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // DOCUMENT_ID
            return DOCUMENT_ID;
          case 3: // DOCUMENT_URI
            return DOCUMENT_URI;
          case 4: // INHERITANCE_INFO
            return INHERITANCE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DOCUMENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("documentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DOCUMENT_URI, new org.apache.thrift.meta_data.FieldMetaData("documentUri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INHERITANCE_INFO, new org.apache.thrift.meta_data.FieldMetaData("inheritanceInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InheritanceInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDocumentInheritanceInfo_args.class, metaDataMap);
    }

    public addDocumentInheritanceInfo_args() {
    }

    public addDocumentInheritanceInfo_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      long documentId,
      String documentUri,
      InheritanceInfo inheritanceInfo)
    {
      this();
      this.securityToken = securityToken;
      this.documentId = documentId;
      setDocumentIdIsSet(true);
      this.documentUri = documentUri;
      this.inheritanceInfo = inheritanceInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDocumentInheritanceInfo_args(addDocumentInheritanceInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      this.documentId = other.documentId;
      if (other.isSetDocumentUri()) {
        this.documentUri = other.documentUri;
      }
      if (other.isSetInheritanceInfo()) {
        this.inheritanceInfo = new InheritanceInfo(other.inheritanceInfo);
      }
    }

    public addDocumentInheritanceInfo_args deepCopy() {
      return new addDocumentInheritanceInfo_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      setDocumentIdIsSet(false);
      this.documentId = 0;
      this.documentUri = null;
      this.inheritanceInfo = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public addDocumentInheritanceInfo_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public long getDocumentId() {
      return this.documentId;
    }

    public addDocumentInheritanceInfo_args setDocumentId(long documentId) {
      this.documentId = documentId;
      setDocumentIdIsSet(true);
      return this;
    }

    public void unsetDocumentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCUMENTID_ISSET_ID);
    }

    /** Returns true if field documentId is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentId() {
      return EncodingUtils.testBit(__isset_bitfield, __DOCUMENTID_ISSET_ID);
    }

    public void setDocumentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCUMENTID_ISSET_ID, value);
    }

    public String getDocumentUri() {
      return this.documentUri;
    }

    public addDocumentInheritanceInfo_args setDocumentUri(String documentUri) {
      this.documentUri = documentUri;
      return this;
    }

    public void unsetDocumentUri() {
      this.documentUri = null;
    }

    /** Returns true if field documentUri is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentUri() {
      return this.documentUri != null;
    }

    public void setDocumentUriIsSet(boolean value) {
      if (!value) {
        this.documentUri = null;
      }
    }

    public InheritanceInfo getInheritanceInfo() {
      return this.inheritanceInfo;
    }

    public addDocumentInheritanceInfo_args setInheritanceInfo(InheritanceInfo inheritanceInfo) {
      this.inheritanceInfo = inheritanceInfo;
      return this;
    }

    public void unsetInheritanceInfo() {
      this.inheritanceInfo = null;
    }

    /** Returns true if field inheritanceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetInheritanceInfo() {
      return this.inheritanceInfo != null;
    }

    public void setInheritanceInfoIsSet(boolean value) {
      if (!value) {
        this.inheritanceInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case DOCUMENT_ID:
        if (value == null) {
          unsetDocumentId();
        } else {
          setDocumentId((Long)value);
        }
        break;

      case DOCUMENT_URI:
        if (value == null) {
          unsetDocumentUri();
        } else {
          setDocumentUri((String)value);
        }
        break;

      case INHERITANCE_INFO:
        if (value == null) {
          unsetInheritanceInfo();
        } else {
          setInheritanceInfo((InheritanceInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case DOCUMENT_ID:
        return Long.valueOf(getDocumentId());

      case DOCUMENT_URI:
        return getDocumentUri();

      case INHERITANCE_INFO:
        return getInheritanceInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case DOCUMENT_ID:
        return isSetDocumentId();
      case DOCUMENT_URI:
        return isSetDocumentUri();
      case INHERITANCE_INFO:
        return isSetInheritanceInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDocumentInheritanceInfo_args)
        return this.equals((addDocumentInheritanceInfo_args)that);
      return false;
    }

    public boolean equals(addDocumentInheritanceInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_documentId = true;
      boolean that_present_documentId = true;
      if (this_present_documentId || that_present_documentId) {
        if (!(this_present_documentId && that_present_documentId))
          return false;
        if (this.documentId != that.documentId)
          return false;
      }

      boolean this_present_documentUri = true && this.isSetDocumentUri();
      boolean that_present_documentUri = true && that.isSetDocumentUri();
      if (this_present_documentUri || that_present_documentUri) {
        if (!(this_present_documentUri && that_present_documentUri))
          return false;
        if (!this.documentUri.equals(that.documentUri))
          return false;
      }

      boolean this_present_inheritanceInfo = true && this.isSetInheritanceInfo();
      boolean that_present_inheritanceInfo = true && that.isSetInheritanceInfo();
      if (this_present_inheritanceInfo || that_present_inheritanceInfo) {
        if (!(this_present_inheritanceInfo && that_present_inheritanceInfo))
          return false;
        if (!this.inheritanceInfo.equals(that.inheritanceInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_documentId = true;
      builder.append(present_documentId);
      if (present_documentId)
        builder.append(documentId);

      boolean present_documentUri = true && (isSetDocumentUri());
      builder.append(present_documentUri);
      if (present_documentUri)
        builder.append(documentUri);

      boolean present_inheritanceInfo = true && (isSetInheritanceInfo());
      builder.append(present_inheritanceInfo);
      if (present_inheritanceInfo)
        builder.append(inheritanceInfo);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addDocumentInheritanceInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentId()).compareTo(other.isSetDocumentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentId, other.documentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentUri()).compareTo(other.isSetDocumentUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentUri, other.documentUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInheritanceInfo()).compareTo(other.isSetInheritanceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInheritanceInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inheritanceInfo, other.inheritanceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDocumentInheritanceInfo_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentId:");
      sb.append(this.documentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentUri:");
      if (this.documentUri == null) {
        sb.append("null");
      } else {
        sb.append(this.documentUri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inheritanceInfo:");
      if (this.inheritanceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.inheritanceInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (inheritanceInfo == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inheritanceInfo' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
      if (inheritanceInfo != null) {
        inheritanceInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDocumentInheritanceInfo_argsStandardSchemeFactory implements SchemeFactory {
      public addDocumentInheritanceInfo_argsStandardScheme getScheme() {
        return new addDocumentInheritanceInfo_argsStandardScheme();
      }
    }

    private static class addDocumentInheritanceInfo_argsStandardScheme extends StandardScheme<addDocumentInheritanceInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDocumentInheritanceInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.documentId = iprot.readI64();
                struct.setDocumentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOCUMENT_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.documentUri = iprot.readString();
                struct.setDocumentUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INHERITANCE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.inheritanceInfo = new InheritanceInfo();
                struct.inheritanceInfo.read(iprot);
                struct.setInheritanceInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDocumentInheritanceInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DOCUMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.documentId);
        oprot.writeFieldEnd();
        if (struct.documentUri != null) {
          oprot.writeFieldBegin(DOCUMENT_URI_FIELD_DESC);
          oprot.writeString(struct.documentUri);
          oprot.writeFieldEnd();
        }
        if (struct.inheritanceInfo != null) {
          oprot.writeFieldBegin(INHERITANCE_INFO_FIELD_DESC);
          struct.inheritanceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDocumentInheritanceInfo_argsTupleSchemeFactory implements SchemeFactory {
      public addDocumentInheritanceInfo_argsTupleScheme getScheme() {
        return new addDocumentInheritanceInfo_argsTupleScheme();
      }
    }

    private static class addDocumentInheritanceInfo_argsTupleScheme extends TupleScheme<addDocumentInheritanceInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDocumentInheritanceInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        struct.inheritanceInfo.write(oprot);
        BitSet optionals = new BitSet();
        if (struct.isSetDocumentId()) {
          optionals.set(0);
        }
        if (struct.isSetDocumentUri()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDocumentId()) {
          oprot.writeI64(struct.documentId);
        }
        if (struct.isSetDocumentUri()) {
          oprot.writeString(struct.documentUri);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDocumentInheritanceInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        struct.inheritanceInfo = new InheritanceInfo();
        struct.inheritanceInfo.read(iprot);
        struct.setInheritanceInfoIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.documentId = iprot.readI64();
          struct.setDocumentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.documentUri = iprot.readString();
          struct.setDocumentUriIsSet(true);
        }
      }
    }

  }

  public static class addDocumentInheritanceInfo_result implements org.apache.thrift.TBase<addDocumentInheritanceInfo_result, addDocumentInheritanceInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addDocumentInheritanceInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDocumentInheritanceInfo_result");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("documentNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CIRCULAR_INHERITANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("circularInheritance", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ALREADY_AGED_FIELD_DESC = new org.apache.thrift.protocol.TField("alreadyAged", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField INHERITANCE_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("inheritanceExists", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDocumentInheritanceInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDocumentInheritanceInfo_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ProvenanceDocumentNotFoundException documentNotFound; // required
    public ProvenanceCircularInheritanceNotAllowedException circularInheritance; // required
    public ProvenanceAlreadyAgedException alreadyAged; // required
    public ProvenanceAgeOffInheritanceExistsException inheritanceExists; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security"),
      DOCUMENT_NOT_FOUND((short)2, "documentNotFound"),
      CIRCULAR_INHERITANCE((short)3, "circularInheritance"),
      ALREADY_AGED((short)4, "alreadyAged"),
      INHERITANCE_EXISTS((short)5, "inheritanceExists");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOCUMENT_NOT_FOUND
            return DOCUMENT_NOT_FOUND;
          case 3: // CIRCULAR_INHERITANCE
            return CIRCULAR_INHERITANCE;
          case 4: // ALREADY_AGED
            return ALREADY_AGED;
          case 5: // INHERITANCE_EXISTS
            return INHERITANCE_EXISTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOCUMENT_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("documentNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CIRCULAR_INHERITANCE, new org.apache.thrift.meta_data.FieldMetaData("circularInheritance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ALREADY_AGED, new org.apache.thrift.meta_data.FieldMetaData("alreadyAged", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.INHERITANCE_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("inheritanceExists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDocumentInheritanceInfo_result.class, metaDataMap);
    }

    public addDocumentInheritanceInfo_result() {
    }

    public addDocumentInheritanceInfo_result(
      ezbake.base.thrift.EzSecurityTokenException security,
      ProvenanceDocumentNotFoundException documentNotFound,
      ProvenanceCircularInheritanceNotAllowedException circularInheritance,
      ProvenanceAlreadyAgedException alreadyAged,
      ProvenanceAgeOffInheritanceExistsException inheritanceExists)
    {
      this();
      this.security = security;
      this.documentNotFound = documentNotFound;
      this.circularInheritance = circularInheritance;
      this.alreadyAged = alreadyAged;
      this.inheritanceExists = inheritanceExists;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDocumentInheritanceInfo_result(addDocumentInheritanceInfo_result other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDocumentNotFound()) {
        this.documentNotFound = new ProvenanceDocumentNotFoundException(other.documentNotFound);
      }
      if (other.isSetCircularInheritance()) {
        this.circularInheritance = new ProvenanceCircularInheritanceNotAllowedException(other.circularInheritance);
      }
      if (other.isSetAlreadyAged()) {
        this.alreadyAged = new ProvenanceAlreadyAgedException(other.alreadyAged);
      }
      if (other.isSetInheritanceExists()) {
        this.inheritanceExists = new ProvenanceAgeOffInheritanceExistsException(other.inheritanceExists);
      }
    }

    public addDocumentInheritanceInfo_result deepCopy() {
      return new addDocumentInheritanceInfo_result(this);
    }

    @Override
    public void clear() {
      this.security = null;
      this.documentNotFound = null;
      this.circularInheritance = null;
      this.alreadyAged = null;
      this.inheritanceExists = null;
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public addDocumentInheritanceInfo_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ProvenanceDocumentNotFoundException getDocumentNotFound() {
      return this.documentNotFound;
    }

    public addDocumentInheritanceInfo_result setDocumentNotFound(ProvenanceDocumentNotFoundException documentNotFound) {
      this.documentNotFound = documentNotFound;
      return this;
    }

    public void unsetDocumentNotFound() {
      this.documentNotFound = null;
    }

    /** Returns true if field documentNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentNotFound() {
      return this.documentNotFound != null;
    }

    public void setDocumentNotFoundIsSet(boolean value) {
      if (!value) {
        this.documentNotFound = null;
      }
    }

    public ProvenanceCircularInheritanceNotAllowedException getCircularInheritance() {
      return this.circularInheritance;
    }

    public addDocumentInheritanceInfo_result setCircularInheritance(ProvenanceCircularInheritanceNotAllowedException circularInheritance) {
      this.circularInheritance = circularInheritance;
      return this;
    }

    public void unsetCircularInheritance() {
      this.circularInheritance = null;
    }

    /** Returns true if field circularInheritance is set (has been assigned a value) and false otherwise */
    public boolean isSetCircularInheritance() {
      return this.circularInheritance != null;
    }

    public void setCircularInheritanceIsSet(boolean value) {
      if (!value) {
        this.circularInheritance = null;
      }
    }

    public ProvenanceAlreadyAgedException getAlreadyAged() {
      return this.alreadyAged;
    }

    public addDocumentInheritanceInfo_result setAlreadyAged(ProvenanceAlreadyAgedException alreadyAged) {
      this.alreadyAged = alreadyAged;
      return this;
    }

    public void unsetAlreadyAged() {
      this.alreadyAged = null;
    }

    /** Returns true if field alreadyAged is set (has been assigned a value) and false otherwise */
    public boolean isSetAlreadyAged() {
      return this.alreadyAged != null;
    }

    public void setAlreadyAgedIsSet(boolean value) {
      if (!value) {
        this.alreadyAged = null;
      }
    }

    public ProvenanceAgeOffInheritanceExistsException getInheritanceExists() {
      return this.inheritanceExists;
    }

    public addDocumentInheritanceInfo_result setInheritanceExists(ProvenanceAgeOffInheritanceExistsException inheritanceExists) {
      this.inheritanceExists = inheritanceExists;
      return this;
    }

    public void unsetInheritanceExists() {
      this.inheritanceExists = null;
    }

    /** Returns true if field inheritanceExists is set (has been assigned a value) and false otherwise */
    public boolean isSetInheritanceExists() {
      return this.inheritanceExists != null;
    }

    public void setInheritanceExistsIsSet(boolean value) {
      if (!value) {
        this.inheritanceExists = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOCUMENT_NOT_FOUND:
        if (value == null) {
          unsetDocumentNotFound();
        } else {
          setDocumentNotFound((ProvenanceDocumentNotFoundException)value);
        }
        break;

      case CIRCULAR_INHERITANCE:
        if (value == null) {
          unsetCircularInheritance();
        } else {
          setCircularInheritance((ProvenanceCircularInheritanceNotAllowedException)value);
        }
        break;

      case ALREADY_AGED:
        if (value == null) {
          unsetAlreadyAged();
        } else {
          setAlreadyAged((ProvenanceAlreadyAgedException)value);
        }
        break;

      case INHERITANCE_EXISTS:
        if (value == null) {
          unsetInheritanceExists();
        } else {
          setInheritanceExists((ProvenanceAgeOffInheritanceExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      case DOCUMENT_NOT_FOUND:
        return getDocumentNotFound();

      case CIRCULAR_INHERITANCE:
        return getCircularInheritance();

      case ALREADY_AGED:
        return getAlreadyAged();

      case INHERITANCE_EXISTS:
        return getInheritanceExists();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      case DOCUMENT_NOT_FOUND:
        return isSetDocumentNotFound();
      case CIRCULAR_INHERITANCE:
        return isSetCircularInheritance();
      case ALREADY_AGED:
        return isSetAlreadyAged();
      case INHERITANCE_EXISTS:
        return isSetInheritanceExists();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDocumentInheritanceInfo_result)
        return this.equals((addDocumentInheritanceInfo_result)that);
      return false;
    }

    public boolean equals(addDocumentInheritanceInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_documentNotFound = true && this.isSetDocumentNotFound();
      boolean that_present_documentNotFound = true && that.isSetDocumentNotFound();
      if (this_present_documentNotFound || that_present_documentNotFound) {
        if (!(this_present_documentNotFound && that_present_documentNotFound))
          return false;
        if (!this.documentNotFound.equals(that.documentNotFound))
          return false;
      }

      boolean this_present_circularInheritance = true && this.isSetCircularInheritance();
      boolean that_present_circularInheritance = true && that.isSetCircularInheritance();
      if (this_present_circularInheritance || that_present_circularInheritance) {
        if (!(this_present_circularInheritance && that_present_circularInheritance))
          return false;
        if (!this.circularInheritance.equals(that.circularInheritance))
          return false;
      }

      boolean this_present_alreadyAged = true && this.isSetAlreadyAged();
      boolean that_present_alreadyAged = true && that.isSetAlreadyAged();
      if (this_present_alreadyAged || that_present_alreadyAged) {
        if (!(this_present_alreadyAged && that_present_alreadyAged))
          return false;
        if (!this.alreadyAged.equals(that.alreadyAged))
          return false;
      }

      boolean this_present_inheritanceExists = true && this.isSetInheritanceExists();
      boolean that_present_inheritanceExists = true && that.isSetInheritanceExists();
      if (this_present_inheritanceExists || that_present_inheritanceExists) {
        if (!(this_present_inheritanceExists && that_present_inheritanceExists))
          return false;
        if (!this.inheritanceExists.equals(that.inheritanceExists))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_documentNotFound = true && (isSetDocumentNotFound());
      builder.append(present_documentNotFound);
      if (present_documentNotFound)
        builder.append(documentNotFound);

      boolean present_circularInheritance = true && (isSetCircularInheritance());
      builder.append(present_circularInheritance);
      if (present_circularInheritance)
        builder.append(circularInheritance);

      boolean present_alreadyAged = true && (isSetAlreadyAged());
      builder.append(present_alreadyAged);
      if (present_alreadyAged)
        builder.append(alreadyAged);

      boolean present_inheritanceExists = true && (isSetInheritanceExists());
      builder.append(present_inheritanceExists);
      if (present_inheritanceExists)
        builder.append(inheritanceExists);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addDocumentInheritanceInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentNotFound()).compareTo(other.isSetDocumentNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentNotFound, other.documentNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCircularInheritance()).compareTo(other.isSetCircularInheritance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCircularInheritance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circularInheritance, other.circularInheritance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlreadyAged()).compareTo(other.isSetAlreadyAged());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlreadyAged()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alreadyAged, other.alreadyAged);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInheritanceExists()).compareTo(other.isSetInheritanceExists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInheritanceExists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inheritanceExists, other.inheritanceExists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDocumentInheritanceInfo_result(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentNotFound:");
      if (this.documentNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.documentNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("circularInheritance:");
      if (this.circularInheritance == null) {
        sb.append("null");
      } else {
        sb.append(this.circularInheritance);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("alreadyAged:");
      if (this.alreadyAged == null) {
        sb.append("null");
      } else {
        sb.append(this.alreadyAged);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inheritanceExists:");
      if (this.inheritanceExists == null) {
        sb.append("null");
      } else {
        sb.append(this.inheritanceExists);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDocumentInheritanceInfo_resultStandardSchemeFactory implements SchemeFactory {
      public addDocumentInheritanceInfo_resultStandardScheme getScheme() {
        return new addDocumentInheritanceInfo_resultStandardScheme();
      }
    }

    private static class addDocumentInheritanceInfo_resultStandardScheme extends StandardScheme<addDocumentInheritanceInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDocumentInheritanceInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.documentNotFound = new ProvenanceDocumentNotFoundException();
                struct.documentNotFound.read(iprot);
                struct.setDocumentNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CIRCULAR_INHERITANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.circularInheritance = new ProvenanceCircularInheritanceNotAllowedException();
                struct.circularInheritance.read(iprot);
                struct.setCircularInheritanceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALREADY_AGED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.alreadyAged = new ProvenanceAlreadyAgedException();
                struct.alreadyAged.read(iprot);
                struct.setAlreadyAgedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // INHERITANCE_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.inheritanceExists = new ProvenanceAgeOffInheritanceExistsException();
                struct.inheritanceExists.read(iprot);
                struct.setInheritanceExistsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDocumentInheritanceInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.documentNotFound != null) {
          oprot.writeFieldBegin(DOCUMENT_NOT_FOUND_FIELD_DESC);
          struct.documentNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.circularInheritance != null) {
          oprot.writeFieldBegin(CIRCULAR_INHERITANCE_FIELD_DESC);
          struct.circularInheritance.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.alreadyAged != null) {
          oprot.writeFieldBegin(ALREADY_AGED_FIELD_DESC);
          struct.alreadyAged.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.inheritanceExists != null) {
          oprot.writeFieldBegin(INHERITANCE_EXISTS_FIELD_DESC);
          struct.inheritanceExists.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDocumentInheritanceInfo_resultTupleSchemeFactory implements SchemeFactory {
      public addDocumentInheritanceInfo_resultTupleScheme getScheme() {
        return new addDocumentInheritanceInfo_resultTupleScheme();
      }
    }

    private static class addDocumentInheritanceInfo_resultTupleScheme extends TupleScheme<addDocumentInheritanceInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDocumentInheritanceInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        if (struct.isSetDocumentNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetCircularInheritance()) {
          optionals.set(2);
        }
        if (struct.isSetAlreadyAged()) {
          optionals.set(3);
        }
        if (struct.isSetInheritanceExists()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDocumentNotFound()) {
          struct.documentNotFound.write(oprot);
        }
        if (struct.isSetCircularInheritance()) {
          struct.circularInheritance.write(oprot);
        }
        if (struct.isSetAlreadyAged()) {
          struct.alreadyAged.write(oprot);
        }
        if (struct.isSetInheritanceExists()) {
          struct.inheritanceExists.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDocumentInheritanceInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.documentNotFound = new ProvenanceDocumentNotFoundException();
          struct.documentNotFound.read(iprot);
          struct.setDocumentNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.circularInheritance = new ProvenanceCircularInheritanceNotAllowedException();
          struct.circularInheritance.read(iprot);
          struct.setCircularInheritanceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.alreadyAged = new ProvenanceAlreadyAgedException();
          struct.alreadyAged.read(iprot);
          struct.setAlreadyAgedIsSet(true);
        }
        if (incoming.get(4)) {
          struct.inheritanceExists = new ProvenanceAgeOffInheritanceExistsException();
          struct.inheritanceExists.read(iprot);
          struct.setInheritanceExistsIsSet(true);
        }
      }
    }

  }

  public static class recordObjectAccess_args implements org.apache.thrift.TBase<recordObjectAccess_args, recordObjectAccess_args._Fields>, java.io.Serializable, Cloneable, Comparable<recordObjectAccess_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recordObjectAccess_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("documentUri", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accessType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recordObjectAccess_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recordObjectAccess_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public String documentUri; // required
    /**
     * 
     * @see ObjectAccessType
     */
    public ObjectAccessType accessType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      DOCUMENT_URI((short)2, "documentUri"),
      /**
       * 
       * @see ObjectAccessType
       */
      ACCESS_TYPE((short)3, "accessType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // DOCUMENT_URI
            return DOCUMENT_URI;
          case 3: // ACCESS_TYPE
            return ACCESS_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.DOCUMENT_URI, new org.apache.thrift.meta_data.FieldMetaData("documentUri", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accessType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ObjectAccessType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recordObjectAccess_args.class, metaDataMap);
    }

    public recordObjectAccess_args() {
    }

    public recordObjectAccess_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      String documentUri,
      ObjectAccessType accessType)
    {
      this();
      this.securityToken = securityToken;
      this.documentUri = documentUri;
      this.accessType = accessType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recordObjectAccess_args(recordObjectAccess_args other) {
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetDocumentUri()) {
        this.documentUri = other.documentUri;
      }
      if (other.isSetAccessType()) {
        this.accessType = other.accessType;
      }
    }

    public recordObjectAccess_args deepCopy() {
      return new recordObjectAccess_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.documentUri = null;
      this.accessType = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public recordObjectAccess_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public String getDocumentUri() {
      return this.documentUri;
    }

    public recordObjectAccess_args setDocumentUri(String documentUri) {
      this.documentUri = documentUri;
      return this;
    }

    public void unsetDocumentUri() {
      this.documentUri = null;
    }

    /** Returns true if field documentUri is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentUri() {
      return this.documentUri != null;
    }

    public void setDocumentUriIsSet(boolean value) {
      if (!value) {
        this.documentUri = null;
      }
    }

    /**
     * 
     * @see ObjectAccessType
     */
    public ObjectAccessType getAccessType() {
      return this.accessType;
    }

    /**
     * 
     * @see ObjectAccessType
     */
    public recordObjectAccess_args setAccessType(ObjectAccessType accessType) {
      this.accessType = accessType;
      return this;
    }

    public void unsetAccessType() {
      this.accessType = null;
    }

    /** Returns true if field accessType is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessType() {
      return this.accessType != null;
    }

    public void setAccessTypeIsSet(boolean value) {
      if (!value) {
        this.accessType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case DOCUMENT_URI:
        if (value == null) {
          unsetDocumentUri();
        } else {
          setDocumentUri((String)value);
        }
        break;

      case ACCESS_TYPE:
        if (value == null) {
          unsetAccessType();
        } else {
          setAccessType((ObjectAccessType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case DOCUMENT_URI:
        return getDocumentUri();

      case ACCESS_TYPE:
        return getAccessType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case DOCUMENT_URI:
        return isSetDocumentUri();
      case ACCESS_TYPE:
        return isSetAccessType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recordObjectAccess_args)
        return this.equals((recordObjectAccess_args)that);
      return false;
    }

    public boolean equals(recordObjectAccess_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_documentUri = true && this.isSetDocumentUri();
      boolean that_present_documentUri = true && that.isSetDocumentUri();
      if (this_present_documentUri || that_present_documentUri) {
        if (!(this_present_documentUri && that_present_documentUri))
          return false;
        if (!this.documentUri.equals(that.documentUri))
          return false;
      }

      boolean this_present_accessType = true && this.isSetAccessType();
      boolean that_present_accessType = true && that.isSetAccessType();
      if (this_present_accessType || that_present_accessType) {
        if (!(this_present_accessType && that_present_accessType))
          return false;
        if (!this.accessType.equals(that.accessType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_documentUri = true && (isSetDocumentUri());
      builder.append(present_documentUri);
      if (present_documentUri)
        builder.append(documentUri);

      boolean present_accessType = true && (isSetAccessType());
      builder.append(present_accessType);
      if (present_accessType)
        builder.append(accessType.getValue());

      return builder.toHashCode();
    }

    @Override
    public int compareTo(recordObjectAccess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentUri()).compareTo(other.isSetDocumentUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentUri, other.documentUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessType()).compareTo(other.isSetAccessType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessType, other.accessType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recordObjectAccess_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentUri:");
      if (this.documentUri == null) {
        sb.append("null");
      } else {
        sb.append(this.documentUri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessType:");
      if (this.accessType == null) {
        sb.append("null");
      } else {
        sb.append(this.accessType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (securityToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'securityToken' was not present! Struct: " + toString());
      }
      if (documentUri == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'documentUri' was not present! Struct: " + toString());
      }
      if (accessType == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessType' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recordObjectAccess_argsStandardSchemeFactory implements SchemeFactory {
      public recordObjectAccess_argsStandardScheme getScheme() {
        return new recordObjectAccess_argsStandardScheme();
      }
    }

    private static class recordObjectAccess_argsStandardScheme extends StandardScheme<recordObjectAccess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recordObjectAccess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.documentUri = iprot.readString();
                struct.setDocumentUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.accessType = ObjectAccessType.findByValue(iprot.readI32());
                struct.setAccessTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recordObjectAccess_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.documentUri != null) {
          oprot.writeFieldBegin(DOCUMENT_URI_FIELD_DESC);
          oprot.writeString(struct.documentUri);
          oprot.writeFieldEnd();
        }
        if (struct.accessType != null) {
          oprot.writeFieldBegin(ACCESS_TYPE_FIELD_DESC);
          oprot.writeI32(struct.accessType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recordObjectAccess_argsTupleSchemeFactory implements SchemeFactory {
      public recordObjectAccess_argsTupleScheme getScheme() {
        return new recordObjectAccess_argsTupleScheme();
      }
    }

    private static class recordObjectAccess_argsTupleScheme extends TupleScheme<recordObjectAccess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recordObjectAccess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.securityToken.write(oprot);
        oprot.writeString(struct.documentUri);
        oprot.writeI32(struct.accessType.getValue());
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recordObjectAccess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
        struct.securityToken.read(iprot);
        struct.setSecurityTokenIsSet(true);
        struct.documentUri = iprot.readString();
        struct.setDocumentUriIsSet(true);
        struct.accessType = ObjectAccessType.findByValue(iprot.readI32());
        struct.setAccessTypeIsSet(true);
      }
    }

  }

  public static class recordObjectAccess_result implements org.apache.thrift.TBase<recordObjectAccess_result, recordObjectAccess_result._Fields>, java.io.Serializable, Cloneable, Comparable<recordObjectAccess_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recordObjectAccess_result");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recordObjectAccess_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recordObjectAccess_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recordObjectAccess_result.class, metaDataMap);
    }

    public recordObjectAccess_result() {
    }

    public recordObjectAccess_result(
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recordObjectAccess_result(recordObjectAccess_result other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public recordObjectAccess_result deepCopy() {
      return new recordObjectAccess_result(this);
    }

    @Override
    public void clear() {
      this.security = null;
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public recordObjectAccess_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recordObjectAccess_result)
        return this.equals((recordObjectAccess_result)that);
      return false;
    }

    public boolean equals(recordObjectAccess_result that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(recordObjectAccess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recordObjectAccess_result(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recordObjectAccess_resultStandardSchemeFactory implements SchemeFactory {
      public recordObjectAccess_resultStandardScheme getScheme() {
        return new recordObjectAccess_resultStandardScheme();
      }
    }

    private static class recordObjectAccess_resultStandardScheme extends StandardScheme<recordObjectAccess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recordObjectAccess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recordObjectAccess_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recordObjectAccess_resultTupleSchemeFactory implements SchemeFactory {
      public recordObjectAccess_resultTupleScheme getScheme() {
        return new recordObjectAccess_resultTupleScheme();
      }
    }

    private static class recordObjectAccess_resultTupleScheme extends TupleScheme<recordObjectAccess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recordObjectAccess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recordObjectAccess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class fetchUsersDocuments_args implements org.apache.thrift.TBase<fetchUsersDocuments_args, fetchUsersDocuments_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchUsersDocuments_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchUsersDocuments_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("userPrincipal", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startDateTime", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField STOP_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("stopDateTime", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField NUM_TO_FETCH_FIELD_DESC = new org.apache.thrift.protocol.TField("numToFetch", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField CONTINUATION_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("continuationPoint", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchUsersDocuments_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchUsersDocuments_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public String userPrincipal; // required
    public ezbake.base.thrift.DateTime startDateTime; // required
    public ezbake.base.thrift.DateTime stopDateTime; // required
    public int numToFetch; // required
    public AccumuloContinuationPoint continuationPoint; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      USER_PRINCIPAL((short)2, "userPrincipal"),
      START_DATE_TIME((short)3, "startDateTime"),
      STOP_DATE_TIME((short)4, "stopDateTime"),
      NUM_TO_FETCH((short)5, "numToFetch"),
      CONTINUATION_POINT((short)6, "continuationPoint");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // USER_PRINCIPAL
            return USER_PRINCIPAL;
          case 3: // START_DATE_TIME
            return START_DATE_TIME;
          case 4: // STOP_DATE_TIME
            return STOP_DATE_TIME;
          case 5: // NUM_TO_FETCH
            return NUM_TO_FETCH;
          case 6: // CONTINUATION_POINT
            return CONTINUATION_POINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMTOFETCH_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.USER_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("userPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("startDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
      tmpMap.put(_Fields.STOP_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("stopDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
      tmpMap.put(_Fields.NUM_TO_FETCH, new org.apache.thrift.meta_data.FieldMetaData("numToFetch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONTINUATION_POINT, new org.apache.thrift.meta_data.FieldMetaData("continuationPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccumuloContinuationPoint.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchUsersDocuments_args.class, metaDataMap);
    }

    public fetchUsersDocuments_args() {
    }

    public fetchUsersDocuments_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      String userPrincipal,
      ezbake.base.thrift.DateTime startDateTime,
      ezbake.base.thrift.DateTime stopDateTime,
      int numToFetch,
      AccumuloContinuationPoint continuationPoint)
    {
      this();
      this.securityToken = securityToken;
      this.userPrincipal = userPrincipal;
      this.startDateTime = startDateTime;
      this.stopDateTime = stopDateTime;
      this.numToFetch = numToFetch;
      setNumToFetchIsSet(true);
      this.continuationPoint = continuationPoint;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchUsersDocuments_args(fetchUsersDocuments_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetUserPrincipal()) {
        this.userPrincipal = other.userPrincipal;
      }
      if (other.isSetStartDateTime()) {
        this.startDateTime = new ezbake.base.thrift.DateTime(other.startDateTime);
      }
      if (other.isSetStopDateTime()) {
        this.stopDateTime = new ezbake.base.thrift.DateTime(other.stopDateTime);
      }
      this.numToFetch = other.numToFetch;
      if (other.isSetContinuationPoint()) {
        this.continuationPoint = new AccumuloContinuationPoint(other.continuationPoint);
      }
    }

    public fetchUsersDocuments_args deepCopy() {
      return new fetchUsersDocuments_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.userPrincipal = null;
      this.startDateTime = null;
      this.stopDateTime = null;
      setNumToFetchIsSet(false);
      this.numToFetch = 0;
      this.continuationPoint = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public fetchUsersDocuments_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public String getUserPrincipal() {
      return this.userPrincipal;
    }

    public fetchUsersDocuments_args setUserPrincipal(String userPrincipal) {
      this.userPrincipal = userPrincipal;
      return this;
    }

    public void unsetUserPrincipal() {
      this.userPrincipal = null;
    }

    /** Returns true if field userPrincipal is set (has been assigned a value) and false otherwise */
    public boolean isSetUserPrincipal() {
      return this.userPrincipal != null;
    }

    public void setUserPrincipalIsSet(boolean value) {
      if (!value) {
        this.userPrincipal = null;
      }
    }

    public ezbake.base.thrift.DateTime getStartDateTime() {
      return this.startDateTime;
    }

    public fetchUsersDocuments_args setStartDateTime(ezbake.base.thrift.DateTime startDateTime) {
      this.startDateTime = startDateTime;
      return this;
    }

    public void unsetStartDateTime() {
      this.startDateTime = null;
    }

    /** Returns true if field startDateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDateTime() {
      return this.startDateTime != null;
    }

    public void setStartDateTimeIsSet(boolean value) {
      if (!value) {
        this.startDateTime = null;
      }
    }

    public ezbake.base.thrift.DateTime getStopDateTime() {
      return this.stopDateTime;
    }

    public fetchUsersDocuments_args setStopDateTime(ezbake.base.thrift.DateTime stopDateTime) {
      this.stopDateTime = stopDateTime;
      return this;
    }

    public void unsetStopDateTime() {
      this.stopDateTime = null;
    }

    /** Returns true if field stopDateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStopDateTime() {
      return this.stopDateTime != null;
    }

    public void setStopDateTimeIsSet(boolean value) {
      if (!value) {
        this.stopDateTime = null;
      }
    }

    public int getNumToFetch() {
      return this.numToFetch;
    }

    public fetchUsersDocuments_args setNumToFetch(int numToFetch) {
      this.numToFetch = numToFetch;
      setNumToFetchIsSet(true);
      return this;
    }

    public void unsetNumToFetch() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMTOFETCH_ISSET_ID);
    }

    /** Returns true if field numToFetch is set (has been assigned a value) and false otherwise */
    public boolean isSetNumToFetch() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMTOFETCH_ISSET_ID);
    }

    public void setNumToFetchIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMTOFETCH_ISSET_ID, value);
    }

    public AccumuloContinuationPoint getContinuationPoint() {
      return this.continuationPoint;
    }

    public fetchUsersDocuments_args setContinuationPoint(AccumuloContinuationPoint continuationPoint) {
      this.continuationPoint = continuationPoint;
      return this;
    }

    public void unsetContinuationPoint() {
      this.continuationPoint = null;
    }

    /** Returns true if field continuationPoint is set (has been assigned a value) and false otherwise */
    public boolean isSetContinuationPoint() {
      return this.continuationPoint != null;
    }

    public void setContinuationPointIsSet(boolean value) {
      if (!value) {
        this.continuationPoint = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case USER_PRINCIPAL:
        if (value == null) {
          unsetUserPrincipal();
        } else {
          setUserPrincipal((String)value);
        }
        break;

      case START_DATE_TIME:
        if (value == null) {
          unsetStartDateTime();
        } else {
          setStartDateTime((ezbake.base.thrift.DateTime)value);
        }
        break;

      case STOP_DATE_TIME:
        if (value == null) {
          unsetStopDateTime();
        } else {
          setStopDateTime((ezbake.base.thrift.DateTime)value);
        }
        break;

      case NUM_TO_FETCH:
        if (value == null) {
          unsetNumToFetch();
        } else {
          setNumToFetch((Integer)value);
        }
        break;

      case CONTINUATION_POINT:
        if (value == null) {
          unsetContinuationPoint();
        } else {
          setContinuationPoint((AccumuloContinuationPoint)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case USER_PRINCIPAL:
        return getUserPrincipal();

      case START_DATE_TIME:
        return getStartDateTime();

      case STOP_DATE_TIME:
        return getStopDateTime();

      case NUM_TO_FETCH:
        return Integer.valueOf(getNumToFetch());

      case CONTINUATION_POINT:
        return getContinuationPoint();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case USER_PRINCIPAL:
        return isSetUserPrincipal();
      case START_DATE_TIME:
        return isSetStartDateTime();
      case STOP_DATE_TIME:
        return isSetStopDateTime();
      case NUM_TO_FETCH:
        return isSetNumToFetch();
      case CONTINUATION_POINT:
        return isSetContinuationPoint();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchUsersDocuments_args)
        return this.equals((fetchUsersDocuments_args)that);
      return false;
    }

    public boolean equals(fetchUsersDocuments_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_userPrincipal = true && this.isSetUserPrincipal();
      boolean that_present_userPrincipal = true && that.isSetUserPrincipal();
      if (this_present_userPrincipal || that_present_userPrincipal) {
        if (!(this_present_userPrincipal && that_present_userPrincipal))
          return false;
        if (!this.userPrincipal.equals(that.userPrincipal))
          return false;
      }

      boolean this_present_startDateTime = true && this.isSetStartDateTime();
      boolean that_present_startDateTime = true && that.isSetStartDateTime();
      if (this_present_startDateTime || that_present_startDateTime) {
        if (!(this_present_startDateTime && that_present_startDateTime))
          return false;
        if (!this.startDateTime.equals(that.startDateTime))
          return false;
      }

      boolean this_present_stopDateTime = true && this.isSetStopDateTime();
      boolean that_present_stopDateTime = true && that.isSetStopDateTime();
      if (this_present_stopDateTime || that_present_stopDateTime) {
        if (!(this_present_stopDateTime && that_present_stopDateTime))
          return false;
        if (!this.stopDateTime.equals(that.stopDateTime))
          return false;
      }

      boolean this_present_numToFetch = true;
      boolean that_present_numToFetch = true;
      if (this_present_numToFetch || that_present_numToFetch) {
        if (!(this_present_numToFetch && that_present_numToFetch))
          return false;
        if (this.numToFetch != that.numToFetch)
          return false;
      }

      boolean this_present_continuationPoint = true && this.isSetContinuationPoint();
      boolean that_present_continuationPoint = true && that.isSetContinuationPoint();
      if (this_present_continuationPoint || that_present_continuationPoint) {
        if (!(this_present_continuationPoint && that_present_continuationPoint))
          return false;
        if (!this.continuationPoint.equals(that.continuationPoint))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_userPrincipal = true && (isSetUserPrincipal());
      builder.append(present_userPrincipal);
      if (present_userPrincipal)
        builder.append(userPrincipal);

      boolean present_startDateTime = true && (isSetStartDateTime());
      builder.append(present_startDateTime);
      if (present_startDateTime)
        builder.append(startDateTime);

      boolean present_stopDateTime = true && (isSetStopDateTime());
      builder.append(present_stopDateTime);
      if (present_stopDateTime)
        builder.append(stopDateTime);

      boolean present_numToFetch = true;
      builder.append(present_numToFetch);
      if (present_numToFetch)
        builder.append(numToFetch);

      boolean present_continuationPoint = true && (isSetContinuationPoint());
      builder.append(present_continuationPoint);
      if (present_continuationPoint)
        builder.append(continuationPoint);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(fetchUsersDocuments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserPrincipal()).compareTo(other.isSetUserPrincipal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserPrincipal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPrincipal, other.userPrincipal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartDateTime()).compareTo(other.isSetStartDateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDateTime, other.startDateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStopDateTime()).compareTo(other.isSetStopDateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStopDateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopDateTime, other.stopDateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumToFetch()).compareTo(other.isSetNumToFetch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumToFetch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numToFetch, other.numToFetch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContinuationPoint()).compareTo(other.isSetContinuationPoint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContinuationPoint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.continuationPoint, other.continuationPoint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchUsersDocuments_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userPrincipal:");
      if (this.userPrincipal == null) {
        sb.append("null");
      } else {
        sb.append(this.userPrincipal);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDateTime:");
      if (this.startDateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startDateTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stopDateTime:");
      if (this.stopDateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.stopDateTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numToFetch:");
      sb.append(this.numToFetch);
      first = false;
      if (!first) sb.append(", ");
      sb.append("continuationPoint:");
      if (this.continuationPoint == null) {
        sb.append("null");
      } else {
        sb.append(this.continuationPoint);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
      if (startDateTime != null) {
        startDateTime.validate();
      }
      if (stopDateTime != null) {
        stopDateTime.validate();
      }
      if (continuationPoint != null) {
        continuationPoint.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchUsersDocuments_argsStandardSchemeFactory implements SchemeFactory {
      public fetchUsersDocuments_argsStandardScheme getScheme() {
        return new fetchUsersDocuments_argsStandardScheme();
      }
    }

    private static class fetchUsersDocuments_argsStandardScheme extends StandardScheme<fetchUsersDocuments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchUsersDocuments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_PRINCIPAL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userPrincipal = iprot.readString();
                struct.setUserPrincipalIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_DATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.startDateTime = new ezbake.base.thrift.DateTime();
                struct.startDateTime.read(iprot);
                struct.setStartDateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STOP_DATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stopDateTime = new ezbake.base.thrift.DateTime();
                struct.stopDateTime.read(iprot);
                struct.setStopDateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NUM_TO_FETCH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numToFetch = iprot.readI32();
                struct.setNumToFetchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONTINUATION_POINT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.continuationPoint = new AccumuloContinuationPoint();
                struct.continuationPoint.read(iprot);
                struct.setContinuationPointIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchUsersDocuments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userPrincipal != null) {
          oprot.writeFieldBegin(USER_PRINCIPAL_FIELD_DESC);
          oprot.writeString(struct.userPrincipal);
          oprot.writeFieldEnd();
        }
        if (struct.startDateTime != null) {
          oprot.writeFieldBegin(START_DATE_TIME_FIELD_DESC);
          struct.startDateTime.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.stopDateTime != null) {
          oprot.writeFieldBegin(STOP_DATE_TIME_FIELD_DESC);
          struct.stopDateTime.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_TO_FETCH_FIELD_DESC);
        oprot.writeI32(struct.numToFetch);
        oprot.writeFieldEnd();
        if (struct.continuationPoint != null) {
          oprot.writeFieldBegin(CONTINUATION_POINT_FIELD_DESC);
          struct.continuationPoint.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchUsersDocuments_argsTupleSchemeFactory implements SchemeFactory {
      public fetchUsersDocuments_argsTupleScheme getScheme() {
        return new fetchUsersDocuments_argsTupleScheme();
      }
    }

    private static class fetchUsersDocuments_argsTupleScheme extends TupleScheme<fetchUsersDocuments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchUsersDocuments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurityToken()) {
          optionals.set(0);
        }
        if (struct.isSetUserPrincipal()) {
          optionals.set(1);
        }
        if (struct.isSetStartDateTime()) {
          optionals.set(2);
        }
        if (struct.isSetStopDateTime()) {
          optionals.set(3);
        }
        if (struct.isSetNumToFetch()) {
          optionals.set(4);
        }
        if (struct.isSetContinuationPoint()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSecurityToken()) {
          struct.securityToken.write(oprot);
        }
        if (struct.isSetUserPrincipal()) {
          oprot.writeString(struct.userPrincipal);
        }
        if (struct.isSetStartDateTime()) {
          struct.startDateTime.write(oprot);
        }
        if (struct.isSetStopDateTime()) {
          struct.stopDateTime.write(oprot);
        }
        if (struct.isSetNumToFetch()) {
          oprot.writeI32(struct.numToFetch);
        }
        if (struct.isSetContinuationPoint()) {
          struct.continuationPoint.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchUsersDocuments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
          struct.securityToken.read(iprot);
          struct.setSecurityTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userPrincipal = iprot.readString();
          struct.setUserPrincipalIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startDateTime = new ezbake.base.thrift.DateTime();
          struct.startDateTime.read(iprot);
          struct.setStartDateTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.stopDateTime = new ezbake.base.thrift.DateTime();
          struct.stopDateTime.read(iprot);
          struct.setStopDateTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.numToFetch = iprot.readI32();
          struct.setNumToFetchIsSet(true);
        }
        if (incoming.get(5)) {
          struct.continuationPoint = new AccumuloContinuationPoint();
          struct.continuationPoint.read(iprot);
          struct.setContinuationPointIsSet(true);
        }
      }
    }

  }

  public static class fetchUsersDocuments_result implements org.apache.thrift.TBase<fetchUsersDocuments_result, fetchUsersDocuments_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchUsersDocuments_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchUsersDocuments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchUsersDocuments_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchUsersDocuments_resultTupleSchemeFactory());
    }

    public ResultsAndContinuation success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultsAndContinuation.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchUsersDocuments_result.class, metaDataMap);
    }

    public fetchUsersDocuments_result() {
    }

    public fetchUsersDocuments_result(
      ResultsAndContinuation success,
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.success = success;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchUsersDocuments_result(fetchUsersDocuments_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultsAndContinuation(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public fetchUsersDocuments_result deepCopy() {
      return new fetchUsersDocuments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
    }

    public ResultsAndContinuation getSuccess() {
      return this.success;
    }

    public fetchUsersDocuments_result setSuccess(ResultsAndContinuation success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public fetchUsersDocuments_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultsAndContinuation)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchUsersDocuments_result)
        return this.equals((fetchUsersDocuments_result)that);
      return false;
    }

    public boolean equals(fetchUsersDocuments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(fetchUsersDocuments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchUsersDocuments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchUsersDocuments_resultStandardSchemeFactory implements SchemeFactory {
      public fetchUsersDocuments_resultStandardScheme getScheme() {
        return new fetchUsersDocuments_resultStandardScheme();
      }
    }

    private static class fetchUsersDocuments_resultStandardScheme extends StandardScheme<fetchUsersDocuments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchUsersDocuments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultsAndContinuation();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchUsersDocuments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchUsersDocuments_resultTupleSchemeFactory implements SchemeFactory {
      public fetchUsersDocuments_resultTupleScheme getScheme() {
        return new fetchUsersDocuments_resultTupleScheme();
      }
    }

    private static class fetchUsersDocuments_resultTupleScheme extends TupleScheme<fetchUsersDocuments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchUsersDocuments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchUsersDocuments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResultsAndContinuation();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class fetchDocumentUsers_args implements org.apache.thrift.TBase<fetchDocumentUsers_args, fetchDocumentUsers_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchDocumentUsers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchDocumentUsers_args");

    private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOCUMENT_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("documentUri", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startDateTime", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField STOP_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("stopDateTime", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField NUM_TO_FETCH_FIELD_DESC = new org.apache.thrift.protocol.TField("numToFetch", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField CONTINUATION_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("continuationPoint", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchDocumentUsers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchDocumentUsers_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken securityToken; // required
    public String documentUri; // required
    public ezbake.base.thrift.DateTime startDateTime; // required
    public ezbake.base.thrift.DateTime stopDateTime; // required
    public int numToFetch; // required
    public AccumuloContinuationPoint continuationPoint; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY_TOKEN((short)1, "securityToken"),
      DOCUMENT_URI((short)2, "documentUri"),
      START_DATE_TIME((short)3, "startDateTime"),
      STOP_DATE_TIME((short)4, "stopDateTime"),
      NUM_TO_FETCH((short)5, "numToFetch"),
      CONTINUATION_POINT((short)6, "continuationPoint");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY_TOKEN
            return SECURITY_TOKEN;
          case 2: // DOCUMENT_URI
            return DOCUMENT_URI;
          case 3: // START_DATE_TIME
            return START_DATE_TIME;
          case 4: // STOP_DATE_TIME
            return STOP_DATE_TIME;
          case 5: // NUM_TO_FETCH
            return NUM_TO_FETCH;
          case 6: // CONTINUATION_POINT
            return CONTINUATION_POINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMTOFETCH_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.DOCUMENT_URI, new org.apache.thrift.meta_data.FieldMetaData("documentUri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("startDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
      tmpMap.put(_Fields.STOP_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("stopDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
      tmpMap.put(_Fields.NUM_TO_FETCH, new org.apache.thrift.meta_data.FieldMetaData("numToFetch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONTINUATION_POINT, new org.apache.thrift.meta_data.FieldMetaData("continuationPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccumuloContinuationPoint.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchDocumentUsers_args.class, metaDataMap);
    }

    public fetchDocumentUsers_args() {
    }

    public fetchDocumentUsers_args(
      ezbake.base.thrift.EzSecurityToken securityToken,
      String documentUri,
      ezbake.base.thrift.DateTime startDateTime,
      ezbake.base.thrift.DateTime stopDateTime,
      int numToFetch,
      AccumuloContinuationPoint continuationPoint)
    {
      this();
      this.securityToken = securityToken;
      this.documentUri = documentUri;
      this.startDateTime = startDateTime;
      this.stopDateTime = stopDateTime;
      this.numToFetch = numToFetch;
      setNumToFetchIsSet(true);
      this.continuationPoint = continuationPoint;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchDocumentUsers_args(fetchDocumentUsers_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSecurityToken()) {
        this.securityToken = new ezbake.base.thrift.EzSecurityToken(other.securityToken);
      }
      if (other.isSetDocumentUri()) {
        this.documentUri = other.documentUri;
      }
      if (other.isSetStartDateTime()) {
        this.startDateTime = new ezbake.base.thrift.DateTime(other.startDateTime);
      }
      if (other.isSetStopDateTime()) {
        this.stopDateTime = new ezbake.base.thrift.DateTime(other.stopDateTime);
      }
      this.numToFetch = other.numToFetch;
      if (other.isSetContinuationPoint()) {
        this.continuationPoint = new AccumuloContinuationPoint(other.continuationPoint);
      }
    }

    public fetchDocumentUsers_args deepCopy() {
      return new fetchDocumentUsers_args(this);
    }

    @Override
    public void clear() {
      this.securityToken = null;
      this.documentUri = null;
      this.startDateTime = null;
      this.stopDateTime = null;
      setNumToFetchIsSet(false);
      this.numToFetch = 0;
      this.continuationPoint = null;
    }

    public ezbake.base.thrift.EzSecurityToken getSecurityToken() {
      return this.securityToken;
    }

    public fetchDocumentUsers_args setSecurityToken(ezbake.base.thrift.EzSecurityToken securityToken) {
      this.securityToken = securityToken;
      return this;
    }

    public void unsetSecurityToken() {
      this.securityToken = null;
    }

    /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurityToken() {
      return this.securityToken != null;
    }

    public void setSecurityTokenIsSet(boolean value) {
      if (!value) {
        this.securityToken = null;
      }
    }

    public String getDocumentUri() {
      return this.documentUri;
    }

    public fetchDocumentUsers_args setDocumentUri(String documentUri) {
      this.documentUri = documentUri;
      return this;
    }

    public void unsetDocumentUri() {
      this.documentUri = null;
    }

    /** Returns true if field documentUri is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentUri() {
      return this.documentUri != null;
    }

    public void setDocumentUriIsSet(boolean value) {
      if (!value) {
        this.documentUri = null;
      }
    }

    public ezbake.base.thrift.DateTime getStartDateTime() {
      return this.startDateTime;
    }

    public fetchDocumentUsers_args setStartDateTime(ezbake.base.thrift.DateTime startDateTime) {
      this.startDateTime = startDateTime;
      return this;
    }

    public void unsetStartDateTime() {
      this.startDateTime = null;
    }

    /** Returns true if field startDateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDateTime() {
      return this.startDateTime != null;
    }

    public void setStartDateTimeIsSet(boolean value) {
      if (!value) {
        this.startDateTime = null;
      }
    }

    public ezbake.base.thrift.DateTime getStopDateTime() {
      return this.stopDateTime;
    }

    public fetchDocumentUsers_args setStopDateTime(ezbake.base.thrift.DateTime stopDateTime) {
      this.stopDateTime = stopDateTime;
      return this;
    }

    public void unsetStopDateTime() {
      this.stopDateTime = null;
    }

    /** Returns true if field stopDateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStopDateTime() {
      return this.stopDateTime != null;
    }

    public void setStopDateTimeIsSet(boolean value) {
      if (!value) {
        this.stopDateTime = null;
      }
    }

    public int getNumToFetch() {
      return this.numToFetch;
    }

    public fetchDocumentUsers_args setNumToFetch(int numToFetch) {
      this.numToFetch = numToFetch;
      setNumToFetchIsSet(true);
      return this;
    }

    public void unsetNumToFetch() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMTOFETCH_ISSET_ID);
    }

    /** Returns true if field numToFetch is set (has been assigned a value) and false otherwise */
    public boolean isSetNumToFetch() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMTOFETCH_ISSET_ID);
    }

    public void setNumToFetchIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMTOFETCH_ISSET_ID, value);
    }

    public AccumuloContinuationPoint getContinuationPoint() {
      return this.continuationPoint;
    }

    public fetchDocumentUsers_args setContinuationPoint(AccumuloContinuationPoint continuationPoint) {
      this.continuationPoint = continuationPoint;
      return this;
    }

    public void unsetContinuationPoint() {
      this.continuationPoint = null;
    }

    /** Returns true if field continuationPoint is set (has been assigned a value) and false otherwise */
    public boolean isSetContinuationPoint() {
      return this.continuationPoint != null;
    }

    public void setContinuationPointIsSet(boolean value) {
      if (!value) {
        this.continuationPoint = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY_TOKEN:
        if (value == null) {
          unsetSecurityToken();
        } else {
          setSecurityToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case DOCUMENT_URI:
        if (value == null) {
          unsetDocumentUri();
        } else {
          setDocumentUri((String)value);
        }
        break;

      case START_DATE_TIME:
        if (value == null) {
          unsetStartDateTime();
        } else {
          setStartDateTime((ezbake.base.thrift.DateTime)value);
        }
        break;

      case STOP_DATE_TIME:
        if (value == null) {
          unsetStopDateTime();
        } else {
          setStopDateTime((ezbake.base.thrift.DateTime)value);
        }
        break;

      case NUM_TO_FETCH:
        if (value == null) {
          unsetNumToFetch();
        } else {
          setNumToFetch((Integer)value);
        }
        break;

      case CONTINUATION_POINT:
        if (value == null) {
          unsetContinuationPoint();
        } else {
          setContinuationPoint((AccumuloContinuationPoint)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY_TOKEN:
        return getSecurityToken();

      case DOCUMENT_URI:
        return getDocumentUri();

      case START_DATE_TIME:
        return getStartDateTime();

      case STOP_DATE_TIME:
        return getStopDateTime();

      case NUM_TO_FETCH:
        return Integer.valueOf(getNumToFetch());

      case CONTINUATION_POINT:
        return getContinuationPoint();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY_TOKEN:
        return isSetSecurityToken();
      case DOCUMENT_URI:
        return isSetDocumentUri();
      case START_DATE_TIME:
        return isSetStartDateTime();
      case STOP_DATE_TIME:
        return isSetStopDateTime();
      case NUM_TO_FETCH:
        return isSetNumToFetch();
      case CONTINUATION_POINT:
        return isSetContinuationPoint();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchDocumentUsers_args)
        return this.equals((fetchDocumentUsers_args)that);
      return false;
    }

    public boolean equals(fetchDocumentUsers_args that) {
      if (that == null)
        return false;

      boolean this_present_securityToken = true && this.isSetSecurityToken();
      boolean that_present_securityToken = true && that.isSetSecurityToken();
      if (this_present_securityToken || that_present_securityToken) {
        if (!(this_present_securityToken && that_present_securityToken))
          return false;
        if (!this.securityToken.equals(that.securityToken))
          return false;
      }

      boolean this_present_documentUri = true && this.isSetDocumentUri();
      boolean that_present_documentUri = true && that.isSetDocumentUri();
      if (this_present_documentUri || that_present_documentUri) {
        if (!(this_present_documentUri && that_present_documentUri))
          return false;
        if (!this.documentUri.equals(that.documentUri))
          return false;
      }

      boolean this_present_startDateTime = true && this.isSetStartDateTime();
      boolean that_present_startDateTime = true && that.isSetStartDateTime();
      if (this_present_startDateTime || that_present_startDateTime) {
        if (!(this_present_startDateTime && that_present_startDateTime))
          return false;
        if (!this.startDateTime.equals(that.startDateTime))
          return false;
      }

      boolean this_present_stopDateTime = true && this.isSetStopDateTime();
      boolean that_present_stopDateTime = true && that.isSetStopDateTime();
      if (this_present_stopDateTime || that_present_stopDateTime) {
        if (!(this_present_stopDateTime && that_present_stopDateTime))
          return false;
        if (!this.stopDateTime.equals(that.stopDateTime))
          return false;
      }

      boolean this_present_numToFetch = true;
      boolean that_present_numToFetch = true;
      if (this_present_numToFetch || that_present_numToFetch) {
        if (!(this_present_numToFetch && that_present_numToFetch))
          return false;
        if (this.numToFetch != that.numToFetch)
          return false;
      }

      boolean this_present_continuationPoint = true && this.isSetContinuationPoint();
      boolean that_present_continuationPoint = true && that.isSetContinuationPoint();
      if (this_present_continuationPoint || that_present_continuationPoint) {
        if (!(this_present_continuationPoint && that_present_continuationPoint))
          return false;
        if (!this.continuationPoint.equals(that.continuationPoint))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_securityToken = true && (isSetSecurityToken());
      builder.append(present_securityToken);
      if (present_securityToken)
        builder.append(securityToken);

      boolean present_documentUri = true && (isSetDocumentUri());
      builder.append(present_documentUri);
      if (present_documentUri)
        builder.append(documentUri);

      boolean present_startDateTime = true && (isSetStartDateTime());
      builder.append(present_startDateTime);
      if (present_startDateTime)
        builder.append(startDateTime);

      boolean present_stopDateTime = true && (isSetStopDateTime());
      builder.append(present_stopDateTime);
      if (present_stopDateTime)
        builder.append(stopDateTime);

      boolean present_numToFetch = true;
      builder.append(present_numToFetch);
      if (present_numToFetch)
        builder.append(numToFetch);

      boolean present_continuationPoint = true && (isSetContinuationPoint());
      builder.append(present_continuationPoint);
      if (present_continuationPoint)
        builder.append(continuationPoint);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(fetchDocumentUsers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurityToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDocumentUri()).compareTo(other.isSetDocumentUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.documentUri, other.documentUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartDateTime()).compareTo(other.isSetStartDateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDateTime, other.startDateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStopDateTime()).compareTo(other.isSetStopDateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStopDateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopDateTime, other.stopDateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumToFetch()).compareTo(other.isSetNumToFetch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumToFetch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numToFetch, other.numToFetch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContinuationPoint()).compareTo(other.isSetContinuationPoint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContinuationPoint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.continuationPoint, other.continuationPoint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchDocumentUsers_args(");
      boolean first = true;

      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("documentUri:");
      if (this.documentUri == null) {
        sb.append("null");
      } else {
        sb.append(this.documentUri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDateTime:");
      if (this.startDateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startDateTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stopDateTime:");
      if (this.stopDateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.stopDateTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numToFetch:");
      sb.append(this.numToFetch);
      first = false;
      if (!first) sb.append(", ");
      sb.append("continuationPoint:");
      if (this.continuationPoint == null) {
        sb.append("null");
      } else {
        sb.append(this.continuationPoint);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (securityToken != null) {
        securityToken.validate();
      }
      if (startDateTime != null) {
        startDateTime.validate();
      }
      if (stopDateTime != null) {
        stopDateTime.validate();
      }
      if (continuationPoint != null) {
        continuationPoint.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchDocumentUsers_argsStandardSchemeFactory implements SchemeFactory {
      public fetchDocumentUsers_argsStandardScheme getScheme() {
        return new fetchDocumentUsers_argsStandardScheme();
      }
    }

    private static class fetchDocumentUsers_argsStandardScheme extends StandardScheme<fetchDocumentUsers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchDocumentUsers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
                struct.securityToken.read(iprot);
                struct.setSecurityTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOCUMENT_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.documentUri = iprot.readString();
                struct.setDocumentUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_DATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.startDateTime = new ezbake.base.thrift.DateTime();
                struct.startDateTime.read(iprot);
                struct.setStartDateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STOP_DATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stopDateTime = new ezbake.base.thrift.DateTime();
                struct.stopDateTime.read(iprot);
                struct.setStopDateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NUM_TO_FETCH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numToFetch = iprot.readI32();
                struct.setNumToFetchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONTINUATION_POINT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.continuationPoint = new AccumuloContinuationPoint();
                struct.continuationPoint.read(iprot);
                struct.setContinuationPointIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchDocumentUsers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.securityToken != null) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          struct.securityToken.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.documentUri != null) {
          oprot.writeFieldBegin(DOCUMENT_URI_FIELD_DESC);
          oprot.writeString(struct.documentUri);
          oprot.writeFieldEnd();
        }
        if (struct.startDateTime != null) {
          oprot.writeFieldBegin(START_DATE_TIME_FIELD_DESC);
          struct.startDateTime.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.stopDateTime != null) {
          oprot.writeFieldBegin(STOP_DATE_TIME_FIELD_DESC);
          struct.stopDateTime.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_TO_FETCH_FIELD_DESC);
        oprot.writeI32(struct.numToFetch);
        oprot.writeFieldEnd();
        if (struct.continuationPoint != null) {
          oprot.writeFieldBegin(CONTINUATION_POINT_FIELD_DESC);
          struct.continuationPoint.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchDocumentUsers_argsTupleSchemeFactory implements SchemeFactory {
      public fetchDocumentUsers_argsTupleScheme getScheme() {
        return new fetchDocumentUsers_argsTupleScheme();
      }
    }

    private static class fetchDocumentUsers_argsTupleScheme extends TupleScheme<fetchDocumentUsers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchDocumentUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurityToken()) {
          optionals.set(0);
        }
        if (struct.isSetDocumentUri()) {
          optionals.set(1);
        }
        if (struct.isSetStartDateTime()) {
          optionals.set(2);
        }
        if (struct.isSetStopDateTime()) {
          optionals.set(3);
        }
        if (struct.isSetNumToFetch()) {
          optionals.set(4);
        }
        if (struct.isSetContinuationPoint()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSecurityToken()) {
          struct.securityToken.write(oprot);
        }
        if (struct.isSetDocumentUri()) {
          oprot.writeString(struct.documentUri);
        }
        if (struct.isSetStartDateTime()) {
          struct.startDateTime.write(oprot);
        }
        if (struct.isSetStopDateTime()) {
          struct.stopDateTime.write(oprot);
        }
        if (struct.isSetNumToFetch()) {
          oprot.writeI32(struct.numToFetch);
        }
        if (struct.isSetContinuationPoint()) {
          struct.continuationPoint.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchDocumentUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.securityToken = new ezbake.base.thrift.EzSecurityToken();
          struct.securityToken.read(iprot);
          struct.setSecurityTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.documentUri = iprot.readString();
          struct.setDocumentUriIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startDateTime = new ezbake.base.thrift.DateTime();
          struct.startDateTime.read(iprot);
          struct.setStartDateTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.stopDateTime = new ezbake.base.thrift.DateTime();
          struct.stopDateTime.read(iprot);
          struct.setStopDateTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.numToFetch = iprot.readI32();
          struct.setNumToFetchIsSet(true);
        }
        if (incoming.get(5)) {
          struct.continuationPoint = new AccumuloContinuationPoint();
          struct.continuationPoint.read(iprot);
          struct.setContinuationPointIsSet(true);
        }
      }
    }

  }

  public static class fetchDocumentUsers_result implements org.apache.thrift.TBase<fetchDocumentUsers_result, fetchDocumentUsers_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchDocumentUsers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchDocumentUsers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchDocumentUsers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchDocumentUsers_resultTupleSchemeFactory());
    }

    public ResultsAndContinuation success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultsAndContinuation.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchDocumentUsers_result.class, metaDataMap);
    }

    public fetchDocumentUsers_result() {
    }

    public fetchDocumentUsers_result(
      ResultsAndContinuation success,
      ezbake.base.thrift.EzSecurityTokenException security)
    {
      this();
      this.success = success;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchDocumentUsers_result(fetchDocumentUsers_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultsAndContinuation(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
    }

    public fetchDocumentUsers_result deepCopy() {
      return new fetchDocumentUsers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
    }

    public ResultsAndContinuation getSuccess() {
      return this.success;
    }

    public fetchDocumentUsers_result setSuccess(ResultsAndContinuation success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public fetchDocumentUsers_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultsAndContinuation)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchDocumentUsers_result)
        return this.equals((fetchDocumentUsers_result)that);
      return false;
    }

    public boolean equals(fetchDocumentUsers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(fetchDocumentUsers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchDocumentUsers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchDocumentUsers_resultStandardSchemeFactory implements SchemeFactory {
      public fetchDocumentUsers_resultStandardScheme getScheme() {
        return new fetchDocumentUsers_resultStandardScheme();
      }
    }

    private static class fetchDocumentUsers_resultStandardScheme extends StandardScheme<fetchDocumentUsers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchDocumentUsers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultsAndContinuation();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchDocumentUsers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchDocumentUsers_resultTupleSchemeFactory implements SchemeFactory {
      public fetchDocumentUsers_resultTupleScheme getScheme() {
        return new fetchDocumentUsers_resultTupleScheme();
      }
    }

    private static class fetchDocumentUsers_resultTupleScheme extends TupleScheme<fetchDocumentUsers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchDocumentUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchDocumentUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ResultsAndContinuation();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

}
