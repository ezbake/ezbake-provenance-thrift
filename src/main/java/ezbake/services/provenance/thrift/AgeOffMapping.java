/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.provenance.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AgeOffMapping implements org.apache.thrift.TBase<AgeOffMapping, AgeOffMapping._Fields>, java.io.Serializable, Cloneable, Comparable<AgeOffMapping> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AgeOffMapping");

  private static final org.apache.thrift.protocol.TField RULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField AGE_OFF_RELEVANT_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ageOffRelevantDateTime", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AgeOffMappingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AgeOffMappingTupleSchemeFactory());
  }

  public long ruleId; // required
  public ezbake.base.thrift.DateTime ageOffRelevantDateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RULE_ID((short)1, "ruleId"),
    AGE_OFF_RELEVANT_DATE_TIME((short)2, "ageOffRelevantDateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RULE_ID
          return RULE_ID;
        case 2: // AGE_OFF_RELEVANT_DATE_TIME
          return AGE_OFF_RELEVANT_DATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RULEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RULE_ID, new org.apache.thrift.meta_data.FieldMetaData("ruleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AGE_OFF_RELEVANT_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("ageOffRelevantDateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AgeOffMapping.class, metaDataMap);
  }

  public AgeOffMapping() {
  }

  public AgeOffMapping(
    long ruleId,
    ezbake.base.thrift.DateTime ageOffRelevantDateTime)
  {
    this();
    this.ruleId = ruleId;
    setRuleIdIsSet(true);
    this.ageOffRelevantDateTime = ageOffRelevantDateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AgeOffMapping(AgeOffMapping other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ruleId = other.ruleId;
    if (other.isSetAgeOffRelevantDateTime()) {
      this.ageOffRelevantDateTime = new ezbake.base.thrift.DateTime(other.ageOffRelevantDateTime);
    }
  }

  public AgeOffMapping deepCopy() {
    return new AgeOffMapping(this);
  }

  @Override
  public void clear() {
    setRuleIdIsSet(false);
    this.ruleId = 0;
    this.ageOffRelevantDateTime = null;
  }

  public long getRuleId() {
    return this.ruleId;
  }

  public AgeOffMapping setRuleId(long ruleId) {
    this.ruleId = ruleId;
    setRuleIdIsSet(true);
    return this;
  }

  public void unsetRuleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RULEID_ISSET_ID);
  }

  /** Returns true if field ruleId is set (has been assigned a value) and false otherwise */
  public boolean isSetRuleId() {
    return EncodingUtils.testBit(__isset_bitfield, __RULEID_ISSET_ID);
  }

  public void setRuleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RULEID_ISSET_ID, value);
  }

  public ezbake.base.thrift.DateTime getAgeOffRelevantDateTime() {
    return this.ageOffRelevantDateTime;
  }

  public AgeOffMapping setAgeOffRelevantDateTime(ezbake.base.thrift.DateTime ageOffRelevantDateTime) {
    this.ageOffRelevantDateTime = ageOffRelevantDateTime;
    return this;
  }

  public void unsetAgeOffRelevantDateTime() {
    this.ageOffRelevantDateTime = null;
  }

  /** Returns true if field ageOffRelevantDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAgeOffRelevantDateTime() {
    return this.ageOffRelevantDateTime != null;
  }

  public void setAgeOffRelevantDateTimeIsSet(boolean value) {
    if (!value) {
      this.ageOffRelevantDateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RULE_ID:
      if (value == null) {
        unsetRuleId();
      } else {
        setRuleId((Long)value);
      }
      break;

    case AGE_OFF_RELEVANT_DATE_TIME:
      if (value == null) {
        unsetAgeOffRelevantDateTime();
      } else {
        setAgeOffRelevantDateTime((ezbake.base.thrift.DateTime)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RULE_ID:
      return Long.valueOf(getRuleId());

    case AGE_OFF_RELEVANT_DATE_TIME:
      return getAgeOffRelevantDateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RULE_ID:
      return isSetRuleId();
    case AGE_OFF_RELEVANT_DATE_TIME:
      return isSetAgeOffRelevantDateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AgeOffMapping)
      return this.equals((AgeOffMapping)that);
    return false;
  }

  public boolean equals(AgeOffMapping that) {
    if (that == null)
      return false;

    boolean this_present_ruleId = true;
    boolean that_present_ruleId = true;
    if (this_present_ruleId || that_present_ruleId) {
      if (!(this_present_ruleId && that_present_ruleId))
        return false;
      if (this.ruleId != that.ruleId)
        return false;
    }

    boolean this_present_ageOffRelevantDateTime = true && this.isSetAgeOffRelevantDateTime();
    boolean that_present_ageOffRelevantDateTime = true && that.isSetAgeOffRelevantDateTime();
    if (this_present_ageOffRelevantDateTime || that_present_ageOffRelevantDateTime) {
      if (!(this_present_ageOffRelevantDateTime && that_present_ageOffRelevantDateTime))
        return false;
      if (!this.ageOffRelevantDateTime.equals(that.ageOffRelevantDateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_ruleId = true;
    builder.append(present_ruleId);
    if (present_ruleId)
      builder.append(ruleId);

    boolean present_ageOffRelevantDateTime = true && (isSetAgeOffRelevantDateTime());
    builder.append(present_ageOffRelevantDateTime);
    if (present_ageOffRelevantDateTime)
      builder.append(ageOffRelevantDateTime);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(AgeOffMapping other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRuleId()).compareTo(other.isSetRuleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleId, other.ruleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgeOffRelevantDateTime()).compareTo(other.isSetAgeOffRelevantDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgeOffRelevantDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageOffRelevantDateTime, other.ageOffRelevantDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AgeOffMapping(");
    boolean first = true;

    sb.append("ruleId:");
    sb.append(this.ruleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ageOffRelevantDateTime:");
    if (this.ageOffRelevantDateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.ageOffRelevantDateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'ruleId' because it's a primitive and you chose the non-beans generator.
    if (ageOffRelevantDateTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ageOffRelevantDateTime' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (ageOffRelevantDateTime != null) {
      ageOffRelevantDateTime.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AgeOffMappingStandardSchemeFactory implements SchemeFactory {
    public AgeOffMappingStandardScheme getScheme() {
      return new AgeOffMappingStandardScheme();
    }
  }

  private static class AgeOffMappingStandardScheme extends StandardScheme<AgeOffMapping> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AgeOffMapping struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RULE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ruleId = iprot.readI64();
              struct.setRuleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGE_OFF_RELEVANT_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ageOffRelevantDateTime = new ezbake.base.thrift.DateTime();
              struct.ageOffRelevantDateTime.read(iprot);
              struct.setAgeOffRelevantDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRuleId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ruleId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AgeOffMapping struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RULE_ID_FIELD_DESC);
      oprot.writeI64(struct.ruleId);
      oprot.writeFieldEnd();
      if (struct.ageOffRelevantDateTime != null) {
        oprot.writeFieldBegin(AGE_OFF_RELEVANT_DATE_TIME_FIELD_DESC);
        struct.ageOffRelevantDateTime.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AgeOffMappingTupleSchemeFactory implements SchemeFactory {
    public AgeOffMappingTupleScheme getScheme() {
      return new AgeOffMappingTupleScheme();
    }
  }

  private static class AgeOffMappingTupleScheme extends TupleScheme<AgeOffMapping> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AgeOffMapping struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.ruleId);
      struct.ageOffRelevantDateTime.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AgeOffMapping struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ruleId = iprot.readI64();
      struct.setRuleIdIsSet(true);
      struct.ageOffRelevantDateTime = new ezbake.base.thrift.DateTime();
      struct.ageOffRelevantDateTime.read(iprot);
      struct.setAgeOffRelevantDateTimeIsSet(true);
    }
  }

}

