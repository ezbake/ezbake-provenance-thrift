/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.provenance.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AccumuloContinuationPoint implements org.apache.thrift.TBase<AccumuloContinuationPoint, AccumuloContinuationPoint._Fields>, java.io.Serializable, Cloneable, Comparable<AccumuloContinuationPoint> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccumuloContinuationPoint");

  private static final org.apache.thrift.protocol.TField START_AT_BEGINNING_FIELD_DESC = new org.apache.thrift.protocol.TField("startAtBeginning", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ROW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rowId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COL_FAM_FIELD_DESC = new org.apache.thrift.protocol.TField("colFam", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COL_QUAL_FIELD_DESC = new org.apache.thrift.protocol.TField("colQual", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AccumuloContinuationPointStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AccumuloContinuationPointTupleSchemeFactory());
  }

  public boolean startAtBeginning; // required
  public String rowId; // optional
  public String colFam; // optional
  public String colQual; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_AT_BEGINNING((short)1, "startAtBeginning"),
    ROW_ID((short)2, "rowId"),
    COL_FAM((short)3, "colFam"),
    COL_QUAL((short)4, "colQual");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_AT_BEGINNING
          return START_AT_BEGINNING;
        case 2: // ROW_ID
          return ROW_ID;
        case 3: // COL_FAM
          return COL_FAM;
        case 4: // COL_QUAL
          return COL_QUAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTATBEGINNING_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ROW_ID,_Fields.COL_FAM,_Fields.COL_QUAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_AT_BEGINNING, new org.apache.thrift.meta_data.FieldMetaData("startAtBeginning", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ROW_ID, new org.apache.thrift.meta_data.FieldMetaData("rowId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL_FAM, new org.apache.thrift.meta_data.FieldMetaData("colFam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL_QUAL, new org.apache.thrift.meta_data.FieldMetaData("colQual", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccumuloContinuationPoint.class, metaDataMap);
  }

  public AccumuloContinuationPoint() {
  }

  public AccumuloContinuationPoint(
    boolean startAtBeginning)
  {
    this();
    this.startAtBeginning = startAtBeginning;
    setStartAtBeginningIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccumuloContinuationPoint(AccumuloContinuationPoint other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startAtBeginning = other.startAtBeginning;
    if (other.isSetRowId()) {
      this.rowId = other.rowId;
    }
    if (other.isSetColFam()) {
      this.colFam = other.colFam;
    }
    if (other.isSetColQual()) {
      this.colQual = other.colQual;
    }
  }

  public AccumuloContinuationPoint deepCopy() {
    return new AccumuloContinuationPoint(this);
  }

  @Override
  public void clear() {
    setStartAtBeginningIsSet(false);
    this.startAtBeginning = false;
    this.rowId = null;
    this.colFam = null;
    this.colQual = null;
  }

  public boolean isStartAtBeginning() {
    return this.startAtBeginning;
  }

  public AccumuloContinuationPoint setStartAtBeginning(boolean startAtBeginning) {
    this.startAtBeginning = startAtBeginning;
    setStartAtBeginningIsSet(true);
    return this;
  }

  public void unsetStartAtBeginning() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTATBEGINNING_ISSET_ID);
  }

  /** Returns true if field startAtBeginning is set (has been assigned a value) and false otherwise */
  public boolean isSetStartAtBeginning() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTATBEGINNING_ISSET_ID);
  }

  public void setStartAtBeginningIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTATBEGINNING_ISSET_ID, value);
  }

  public String getRowId() {
    return this.rowId;
  }

  public AccumuloContinuationPoint setRowId(String rowId) {
    this.rowId = rowId;
    return this;
  }

  public void unsetRowId() {
    this.rowId = null;
  }

  /** Returns true if field rowId is set (has been assigned a value) and false otherwise */
  public boolean isSetRowId() {
    return this.rowId != null;
  }

  public void setRowIdIsSet(boolean value) {
    if (!value) {
      this.rowId = null;
    }
  }

  public String getColFam() {
    return this.colFam;
  }

  public AccumuloContinuationPoint setColFam(String colFam) {
    this.colFam = colFam;
    return this;
  }

  public void unsetColFam() {
    this.colFam = null;
  }

  /** Returns true if field colFam is set (has been assigned a value) and false otherwise */
  public boolean isSetColFam() {
    return this.colFam != null;
  }

  public void setColFamIsSet(boolean value) {
    if (!value) {
      this.colFam = null;
    }
  }

  public String getColQual() {
    return this.colQual;
  }

  public AccumuloContinuationPoint setColQual(String colQual) {
    this.colQual = colQual;
    return this;
  }

  public void unsetColQual() {
    this.colQual = null;
  }

  /** Returns true if field colQual is set (has been assigned a value) and false otherwise */
  public boolean isSetColQual() {
    return this.colQual != null;
  }

  public void setColQualIsSet(boolean value) {
    if (!value) {
      this.colQual = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_AT_BEGINNING:
      if (value == null) {
        unsetStartAtBeginning();
      } else {
        setStartAtBeginning((Boolean)value);
      }
      break;

    case ROW_ID:
      if (value == null) {
        unsetRowId();
      } else {
        setRowId((String)value);
      }
      break;

    case COL_FAM:
      if (value == null) {
        unsetColFam();
      } else {
        setColFam((String)value);
      }
      break;

    case COL_QUAL:
      if (value == null) {
        unsetColQual();
      } else {
        setColQual((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_AT_BEGINNING:
      return Boolean.valueOf(isStartAtBeginning());

    case ROW_ID:
      return getRowId();

    case COL_FAM:
      return getColFam();

    case COL_QUAL:
      return getColQual();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_AT_BEGINNING:
      return isSetStartAtBeginning();
    case ROW_ID:
      return isSetRowId();
    case COL_FAM:
      return isSetColFam();
    case COL_QUAL:
      return isSetColQual();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AccumuloContinuationPoint)
      return this.equals((AccumuloContinuationPoint)that);
    return false;
  }

  public boolean equals(AccumuloContinuationPoint that) {
    if (that == null)
      return false;

    boolean this_present_startAtBeginning = true;
    boolean that_present_startAtBeginning = true;
    if (this_present_startAtBeginning || that_present_startAtBeginning) {
      if (!(this_present_startAtBeginning && that_present_startAtBeginning))
        return false;
      if (this.startAtBeginning != that.startAtBeginning)
        return false;
    }

    boolean this_present_rowId = true && this.isSetRowId();
    boolean that_present_rowId = true && that.isSetRowId();
    if (this_present_rowId || that_present_rowId) {
      if (!(this_present_rowId && that_present_rowId))
        return false;
      if (!this.rowId.equals(that.rowId))
        return false;
    }

    boolean this_present_colFam = true && this.isSetColFam();
    boolean that_present_colFam = true && that.isSetColFam();
    if (this_present_colFam || that_present_colFam) {
      if (!(this_present_colFam && that_present_colFam))
        return false;
      if (!this.colFam.equals(that.colFam))
        return false;
    }

    boolean this_present_colQual = true && this.isSetColQual();
    boolean that_present_colQual = true && that.isSetColQual();
    if (this_present_colQual || that_present_colQual) {
      if (!(this_present_colQual && that_present_colQual))
        return false;
      if (!this.colQual.equals(that.colQual))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_startAtBeginning = true;
    builder.append(present_startAtBeginning);
    if (present_startAtBeginning)
      builder.append(startAtBeginning);

    boolean present_rowId = true && (isSetRowId());
    builder.append(present_rowId);
    if (present_rowId)
      builder.append(rowId);

    boolean present_colFam = true && (isSetColFam());
    builder.append(present_colFam);
    if (present_colFam)
      builder.append(colFam);

    boolean present_colQual = true && (isSetColQual());
    builder.append(present_colQual);
    if (present_colQual)
      builder.append(colQual);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(AccumuloContinuationPoint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStartAtBeginning()).compareTo(other.isSetStartAtBeginning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartAtBeginning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startAtBeginning, other.startAtBeginning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowId()).compareTo(other.isSetRowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowId, other.rowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColFam()).compareTo(other.isSetColFam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColFam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colFam, other.colFam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColQual()).compareTo(other.isSetColQual());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColQual()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colQual, other.colQual);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AccumuloContinuationPoint(");
    boolean first = true;

    sb.append("startAtBeginning:");
    sb.append(this.startAtBeginning);
    first = false;
    if (isSetRowId()) {
      if (!first) sb.append(", ");
      sb.append("rowId:");
      if (this.rowId == null) {
        sb.append("null");
      } else {
        sb.append(this.rowId);
      }
      first = false;
    }
    if (isSetColFam()) {
      if (!first) sb.append(", ");
      sb.append("colFam:");
      if (this.colFam == null) {
        sb.append("null");
      } else {
        sb.append(this.colFam);
      }
      first = false;
    }
    if (isSetColQual()) {
      if (!first) sb.append(", ");
      sb.append("colQual:");
      if (this.colQual == null) {
        sb.append("null");
      } else {
        sb.append(this.colQual);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'startAtBeginning' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccumuloContinuationPointStandardSchemeFactory implements SchemeFactory {
    public AccumuloContinuationPointStandardScheme getScheme() {
      return new AccumuloContinuationPointStandardScheme();
    }
  }

  private static class AccumuloContinuationPointStandardScheme extends StandardScheme<AccumuloContinuationPoint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AccumuloContinuationPoint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_AT_BEGINNING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.startAtBeginning = iprot.readBool();
              struct.setStartAtBeginningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rowId = iprot.readString();
              struct.setRowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COL_FAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.colFam = iprot.readString();
              struct.setColFamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COL_QUAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.colQual = iprot.readString();
              struct.setColQualIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStartAtBeginning()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startAtBeginning' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AccumuloContinuationPoint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_AT_BEGINNING_FIELD_DESC);
      oprot.writeBool(struct.startAtBeginning);
      oprot.writeFieldEnd();
      if (struct.rowId != null) {
        if (struct.isSetRowId()) {
          oprot.writeFieldBegin(ROW_ID_FIELD_DESC);
          oprot.writeString(struct.rowId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.colFam != null) {
        if (struct.isSetColFam()) {
          oprot.writeFieldBegin(COL_FAM_FIELD_DESC);
          oprot.writeString(struct.colFam);
          oprot.writeFieldEnd();
        }
      }
      if (struct.colQual != null) {
        if (struct.isSetColQual()) {
          oprot.writeFieldBegin(COL_QUAL_FIELD_DESC);
          oprot.writeString(struct.colQual);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccumuloContinuationPointTupleSchemeFactory implements SchemeFactory {
    public AccumuloContinuationPointTupleScheme getScheme() {
      return new AccumuloContinuationPointTupleScheme();
    }
  }

  private static class AccumuloContinuationPointTupleScheme extends TupleScheme<AccumuloContinuationPoint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AccumuloContinuationPoint struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.startAtBeginning);
      BitSet optionals = new BitSet();
      if (struct.isSetRowId()) {
        optionals.set(0);
      }
      if (struct.isSetColFam()) {
        optionals.set(1);
      }
      if (struct.isSetColQual()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRowId()) {
        oprot.writeString(struct.rowId);
      }
      if (struct.isSetColFam()) {
        oprot.writeString(struct.colFam);
      }
      if (struct.isSetColQual()) {
        oprot.writeString(struct.colQual);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AccumuloContinuationPoint struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.startAtBeginning = iprot.readBool();
      struct.setStartAtBeginningIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.rowId = iprot.readString();
        struct.setRowIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.colFam = iprot.readString();
        struct.setColFamIsSet(true);
      }
      if (incoming.get(2)) {
        struct.colQual = iprot.readString();
        struct.setColQualIsSet(true);
      }
    }
  }

}

