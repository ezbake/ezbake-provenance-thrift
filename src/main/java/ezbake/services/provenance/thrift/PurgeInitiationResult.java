/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.provenance.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PurgeInitiationResult implements org.apache.thrift.TBase<PurgeInitiationResult, PurgeInitiationResult._Fields>, java.io.Serializable, Cloneable, Comparable<PurgeInitiationResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PurgeInitiationResult");

  private static final org.apache.thrift.protocol.TField TO_BE_PURGED_FIELD_DESC = new org.apache.thrift.protocol.TField("toBePurged", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField URIS_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("urisNotFound", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PURGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeId", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PurgeInitiationResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PurgeInitiationResultTupleSchemeFactory());
  }

  public Set<Long> toBePurged; // required
  public List<String> urisNotFound; // required
  public long purgeId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TO_BE_PURGED((short)1, "toBePurged"),
    URIS_NOT_FOUND((short)2, "urisNotFound"),
    PURGE_ID((short)3, "purgeId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TO_BE_PURGED
          return TO_BE_PURGED;
        case 2: // URIS_NOT_FOUND
          return URIS_NOT_FOUND;
        case 3: // PURGE_ID
          return PURGE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PURGEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TO_BE_PURGED, new org.apache.thrift.meta_data.FieldMetaData("toBePurged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.URIS_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("urisNotFound", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PURGE_ID, new org.apache.thrift.meta_data.FieldMetaData("purgeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PurgeInitiationResult.class, metaDataMap);
  }

  public PurgeInitiationResult() {
  }

  public PurgeInitiationResult(
    Set<Long> toBePurged,
    List<String> urisNotFound,
    long purgeId)
  {
    this();
    this.toBePurged = toBePurged;
    this.urisNotFound = urisNotFound;
    this.purgeId = purgeId;
    setPurgeIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PurgeInitiationResult(PurgeInitiationResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetToBePurged()) {
      Set<Long> __this__toBePurged = new HashSet<Long>(other.toBePurged);
      this.toBePurged = __this__toBePurged;
    }
    if (other.isSetUrisNotFound()) {
      List<String> __this__urisNotFound = new ArrayList<String>(other.urisNotFound);
      this.urisNotFound = __this__urisNotFound;
    }
    this.purgeId = other.purgeId;
  }

  public PurgeInitiationResult deepCopy() {
    return new PurgeInitiationResult(this);
  }

  @Override
  public void clear() {
    this.toBePurged = null;
    this.urisNotFound = null;
    setPurgeIdIsSet(false);
    this.purgeId = 0;
  }

  public int getToBePurgedSize() {
    return (this.toBePurged == null) ? 0 : this.toBePurged.size();
  }

  public java.util.Iterator<Long> getToBePurgedIterator() {
    return (this.toBePurged == null) ? null : this.toBePurged.iterator();
  }

  public void addToToBePurged(long elem) {
    if (this.toBePurged == null) {
      this.toBePurged = new HashSet<Long>();
    }
    this.toBePurged.add(elem);
  }

  public Set<Long> getToBePurged() {
    return this.toBePurged;
  }

  public PurgeInitiationResult setToBePurged(Set<Long> toBePurged) {
    this.toBePurged = toBePurged;
    return this;
  }

  public void unsetToBePurged() {
    this.toBePurged = null;
  }

  /** Returns true if field toBePurged is set (has been assigned a value) and false otherwise */
  public boolean isSetToBePurged() {
    return this.toBePurged != null;
  }

  public void setToBePurgedIsSet(boolean value) {
    if (!value) {
      this.toBePurged = null;
    }
  }

  public int getUrisNotFoundSize() {
    return (this.urisNotFound == null) ? 0 : this.urisNotFound.size();
  }

  public java.util.Iterator<String> getUrisNotFoundIterator() {
    return (this.urisNotFound == null) ? null : this.urisNotFound.iterator();
  }

  public void addToUrisNotFound(String elem) {
    if (this.urisNotFound == null) {
      this.urisNotFound = new ArrayList<String>();
    }
    this.urisNotFound.add(elem);
  }

  public List<String> getUrisNotFound() {
    return this.urisNotFound;
  }

  public PurgeInitiationResult setUrisNotFound(List<String> urisNotFound) {
    this.urisNotFound = urisNotFound;
    return this;
  }

  public void unsetUrisNotFound() {
    this.urisNotFound = null;
  }

  /** Returns true if field urisNotFound is set (has been assigned a value) and false otherwise */
  public boolean isSetUrisNotFound() {
    return this.urisNotFound != null;
  }

  public void setUrisNotFoundIsSet(boolean value) {
    if (!value) {
      this.urisNotFound = null;
    }
  }

  public long getPurgeId() {
    return this.purgeId;
  }

  public PurgeInitiationResult setPurgeId(long purgeId) {
    this.purgeId = purgeId;
    setPurgeIdIsSet(true);
    return this;
  }

  public void unsetPurgeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURGEID_ISSET_ID);
  }

  /** Returns true if field purgeId is set (has been assigned a value) and false otherwise */
  public boolean isSetPurgeId() {
    return EncodingUtils.testBit(__isset_bitfield, __PURGEID_ISSET_ID);
  }

  public void setPurgeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURGEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TO_BE_PURGED:
      if (value == null) {
        unsetToBePurged();
      } else {
        setToBePurged((Set<Long>)value);
      }
      break;

    case URIS_NOT_FOUND:
      if (value == null) {
        unsetUrisNotFound();
      } else {
        setUrisNotFound((List<String>)value);
      }
      break;

    case PURGE_ID:
      if (value == null) {
        unsetPurgeId();
      } else {
        setPurgeId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TO_BE_PURGED:
      return getToBePurged();

    case URIS_NOT_FOUND:
      return getUrisNotFound();

    case PURGE_ID:
      return Long.valueOf(getPurgeId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TO_BE_PURGED:
      return isSetToBePurged();
    case URIS_NOT_FOUND:
      return isSetUrisNotFound();
    case PURGE_ID:
      return isSetPurgeId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PurgeInitiationResult)
      return this.equals((PurgeInitiationResult)that);
    return false;
  }

  public boolean equals(PurgeInitiationResult that) {
    if (that == null)
      return false;

    boolean this_present_toBePurged = true && this.isSetToBePurged();
    boolean that_present_toBePurged = true && that.isSetToBePurged();
    if (this_present_toBePurged || that_present_toBePurged) {
      if (!(this_present_toBePurged && that_present_toBePurged))
        return false;
      if (!this.toBePurged.equals(that.toBePurged))
        return false;
    }

    boolean this_present_urisNotFound = true && this.isSetUrisNotFound();
    boolean that_present_urisNotFound = true && that.isSetUrisNotFound();
    if (this_present_urisNotFound || that_present_urisNotFound) {
      if (!(this_present_urisNotFound && that_present_urisNotFound))
        return false;
      if (!this.urisNotFound.equals(that.urisNotFound))
        return false;
    }

    boolean this_present_purgeId = true;
    boolean that_present_purgeId = true;
    if (this_present_purgeId || that_present_purgeId) {
      if (!(this_present_purgeId && that_present_purgeId))
        return false;
      if (this.purgeId != that.purgeId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_toBePurged = true && (isSetToBePurged());
    builder.append(present_toBePurged);
    if (present_toBePurged)
      builder.append(toBePurged);

    boolean present_urisNotFound = true && (isSetUrisNotFound());
    builder.append(present_urisNotFound);
    if (present_urisNotFound)
      builder.append(urisNotFound);

    boolean present_purgeId = true;
    builder.append(present_purgeId);
    if (present_purgeId)
      builder.append(purgeId);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(PurgeInitiationResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetToBePurged()).compareTo(other.isSetToBePurged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToBePurged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toBePurged, other.toBePurged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrisNotFound()).compareTo(other.isSetUrisNotFound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrisNotFound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urisNotFound, other.urisNotFound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurgeId()).compareTo(other.isSetPurgeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurgeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeId, other.purgeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PurgeInitiationResult(");
    boolean first = true;

    sb.append("toBePurged:");
    if (this.toBePurged == null) {
      sb.append("null");
    } else {
      sb.append(this.toBePurged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("urisNotFound:");
    if (this.urisNotFound == null) {
      sb.append("null");
    } else {
      sb.append(this.urisNotFound);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("purgeId:");
    sb.append(this.purgeId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (toBePurged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toBePurged' was not present! Struct: " + toString());
    }
    if (urisNotFound == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'urisNotFound' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'purgeId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PurgeInitiationResultStandardSchemeFactory implements SchemeFactory {
    public PurgeInitiationResultStandardScheme getScheme() {
      return new PurgeInitiationResultStandardScheme();
    }
  }

  private static class PurgeInitiationResultStandardScheme extends StandardScheme<PurgeInitiationResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PurgeInitiationResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TO_BE_PURGED
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set108 = iprot.readSetBegin();
                struct.toBePurged = new HashSet<Long>(2*_set108.size);
                for (int _i109 = 0; _i109 < _set108.size; ++_i109)
                {
                  long _elem110;
                  _elem110 = iprot.readI64();
                  struct.toBePurged.add(_elem110);
                }
                iprot.readSetEnd();
              }
              struct.setToBePurgedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // URIS_NOT_FOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list111 = iprot.readListBegin();
                struct.urisNotFound = new ArrayList<String>(_list111.size);
                for (int _i112 = 0; _i112 < _list111.size; ++_i112)
                {
                  String _elem113;
                  _elem113 = iprot.readString();
                  struct.urisNotFound.add(_elem113);
                }
                iprot.readListEnd();
              }
              struct.setUrisNotFoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PURGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.purgeId = iprot.readI64();
              struct.setPurgeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPurgeId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'purgeId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PurgeInitiationResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.toBePurged != null) {
        oprot.writeFieldBegin(TO_BE_PURGED_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.toBePurged.size()));
          for (long _iter114 : struct.toBePurged)
          {
            oprot.writeI64(_iter114);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.urisNotFound != null) {
        oprot.writeFieldBegin(URIS_NOT_FOUND_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.urisNotFound.size()));
          for (String _iter115 : struct.urisNotFound)
          {
            oprot.writeString(_iter115);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PURGE_ID_FIELD_DESC);
      oprot.writeI64(struct.purgeId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PurgeInitiationResultTupleSchemeFactory implements SchemeFactory {
    public PurgeInitiationResultTupleScheme getScheme() {
      return new PurgeInitiationResultTupleScheme();
    }
  }

  private static class PurgeInitiationResultTupleScheme extends TupleScheme<PurgeInitiationResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PurgeInitiationResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.toBePurged.size());
        for (long _iter116 : struct.toBePurged)
        {
          oprot.writeI64(_iter116);
        }
      }
      {
        oprot.writeI32(struct.urisNotFound.size());
        for (String _iter117 : struct.urisNotFound)
        {
          oprot.writeString(_iter117);
        }
      }
      oprot.writeI64(struct.purgeId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PurgeInitiationResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TSet _set118 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.toBePurged = new HashSet<Long>(2*_set118.size);
        for (int _i119 = 0; _i119 < _set118.size; ++_i119)
        {
          long _elem120;
          _elem120 = iprot.readI64();
          struct.toBePurged.add(_elem120);
        }
      }
      struct.setToBePurgedIsSet(true);
      {
        org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.urisNotFound = new ArrayList<String>(_list121.size);
        for (int _i122 = 0; _i122 < _list121.size; ++_i122)
        {
          String _elem123;
          _elem123 = iprot.readString();
          struct.urisNotFound.add(_elem123);
        }
      }
      struct.setUrisNotFoundIsSet(true);
      struct.purgeId = iprot.readI64();
      struct.setPurgeIdIsSet(true);
    }
  }

}

