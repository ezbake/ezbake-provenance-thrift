/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.provenance.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AgeOffInitiationResult implements org.apache.thrift.TBase<AgeOffInitiationResult, AgeOffInitiationResult._Fields>, java.io.Serializable, Cloneable, Comparable<AgeOffInitiationResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AgeOffInitiationResult");

  private static final org.apache.thrift.protocol.TField AGE_OFF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ageOffId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField AGE_OFF_DOCUMENT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ageOffDocumentIds", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AgeOffInitiationResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AgeOffInitiationResultTupleSchemeFactory());
  }

  public long ageOffId; // required
  public Set<Long> ageOffDocumentIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGE_OFF_ID((short)1, "ageOffId"),
    AGE_OFF_DOCUMENT_IDS((short)2, "ageOffDocumentIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGE_OFF_ID
          return AGE_OFF_ID;
        case 2: // AGE_OFF_DOCUMENT_IDS
          return AGE_OFF_DOCUMENT_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AGEOFFID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGE_OFF_ID, new org.apache.thrift.meta_data.FieldMetaData("ageOffId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AGE_OFF_DOCUMENT_IDS, new org.apache.thrift.meta_data.FieldMetaData("ageOffDocumentIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AgeOffInitiationResult.class, metaDataMap);
  }

  public AgeOffInitiationResult() {
  }

  public AgeOffInitiationResult(
    long ageOffId,
    Set<Long> ageOffDocumentIds)
  {
    this();
    this.ageOffId = ageOffId;
    setAgeOffIdIsSet(true);
    this.ageOffDocumentIds = ageOffDocumentIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AgeOffInitiationResult(AgeOffInitiationResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ageOffId = other.ageOffId;
    if (other.isSetAgeOffDocumentIds()) {
      Set<Long> __this__ageOffDocumentIds = new HashSet<Long>(other.ageOffDocumentIds);
      this.ageOffDocumentIds = __this__ageOffDocumentIds;
    }
  }

  public AgeOffInitiationResult deepCopy() {
    return new AgeOffInitiationResult(this);
  }

  @Override
  public void clear() {
    setAgeOffIdIsSet(false);
    this.ageOffId = 0;
    this.ageOffDocumentIds = null;
  }

  public long getAgeOffId() {
    return this.ageOffId;
  }

  public AgeOffInitiationResult setAgeOffId(long ageOffId) {
    this.ageOffId = ageOffId;
    setAgeOffIdIsSet(true);
    return this;
  }

  public void unsetAgeOffId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGEOFFID_ISSET_ID);
  }

  /** Returns true if field ageOffId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgeOffId() {
    return EncodingUtils.testBit(__isset_bitfield, __AGEOFFID_ISSET_ID);
  }

  public void setAgeOffIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGEOFFID_ISSET_ID, value);
  }

  public int getAgeOffDocumentIdsSize() {
    return (this.ageOffDocumentIds == null) ? 0 : this.ageOffDocumentIds.size();
  }

  public java.util.Iterator<Long> getAgeOffDocumentIdsIterator() {
    return (this.ageOffDocumentIds == null) ? null : this.ageOffDocumentIds.iterator();
  }

  public void addToAgeOffDocumentIds(long elem) {
    if (this.ageOffDocumentIds == null) {
      this.ageOffDocumentIds = new HashSet<Long>();
    }
    this.ageOffDocumentIds.add(elem);
  }

  public Set<Long> getAgeOffDocumentIds() {
    return this.ageOffDocumentIds;
  }

  public AgeOffInitiationResult setAgeOffDocumentIds(Set<Long> ageOffDocumentIds) {
    this.ageOffDocumentIds = ageOffDocumentIds;
    return this;
  }

  public void unsetAgeOffDocumentIds() {
    this.ageOffDocumentIds = null;
  }

  /** Returns true if field ageOffDocumentIds is set (has been assigned a value) and false otherwise */
  public boolean isSetAgeOffDocumentIds() {
    return this.ageOffDocumentIds != null;
  }

  public void setAgeOffDocumentIdsIsSet(boolean value) {
    if (!value) {
      this.ageOffDocumentIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGE_OFF_ID:
      if (value == null) {
        unsetAgeOffId();
      } else {
        setAgeOffId((Long)value);
      }
      break;

    case AGE_OFF_DOCUMENT_IDS:
      if (value == null) {
        unsetAgeOffDocumentIds();
      } else {
        setAgeOffDocumentIds((Set<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGE_OFF_ID:
      return Long.valueOf(getAgeOffId());

    case AGE_OFF_DOCUMENT_IDS:
      return getAgeOffDocumentIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGE_OFF_ID:
      return isSetAgeOffId();
    case AGE_OFF_DOCUMENT_IDS:
      return isSetAgeOffDocumentIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AgeOffInitiationResult)
      return this.equals((AgeOffInitiationResult)that);
    return false;
  }

  public boolean equals(AgeOffInitiationResult that) {
    if (that == null)
      return false;

    boolean this_present_ageOffId = true;
    boolean that_present_ageOffId = true;
    if (this_present_ageOffId || that_present_ageOffId) {
      if (!(this_present_ageOffId && that_present_ageOffId))
        return false;
      if (this.ageOffId != that.ageOffId)
        return false;
    }

    boolean this_present_ageOffDocumentIds = true && this.isSetAgeOffDocumentIds();
    boolean that_present_ageOffDocumentIds = true && that.isSetAgeOffDocumentIds();
    if (this_present_ageOffDocumentIds || that_present_ageOffDocumentIds) {
      if (!(this_present_ageOffDocumentIds && that_present_ageOffDocumentIds))
        return false;
      if (!this.ageOffDocumentIds.equals(that.ageOffDocumentIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_ageOffId = true;
    builder.append(present_ageOffId);
    if (present_ageOffId)
      builder.append(ageOffId);

    boolean present_ageOffDocumentIds = true && (isSetAgeOffDocumentIds());
    builder.append(present_ageOffDocumentIds);
    if (present_ageOffDocumentIds)
      builder.append(ageOffDocumentIds);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(AgeOffInitiationResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAgeOffId()).compareTo(other.isSetAgeOffId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgeOffId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageOffId, other.ageOffId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgeOffDocumentIds()).compareTo(other.isSetAgeOffDocumentIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgeOffDocumentIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageOffDocumentIds, other.ageOffDocumentIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AgeOffInitiationResult(");
    boolean first = true;

    sb.append("ageOffId:");
    sb.append(this.ageOffId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ageOffDocumentIds:");
    if (this.ageOffDocumentIds == null) {
      sb.append("null");
    } else {
      sb.append(this.ageOffDocumentIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'ageOffId' because it's a primitive and you chose the non-beans generator.
    if (ageOffDocumentIds == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ageOffDocumentIds' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AgeOffInitiationResultStandardSchemeFactory implements SchemeFactory {
    public AgeOffInitiationResultStandardScheme getScheme() {
      return new AgeOffInitiationResultStandardScheme();
    }
  }

  private static class AgeOffInitiationResultStandardScheme extends StandardScheme<AgeOffInitiationResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AgeOffInitiationResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGE_OFF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ageOffId = iprot.readI64();
              struct.setAgeOffIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGE_OFF_DOCUMENT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set100 = iprot.readSetBegin();
                struct.ageOffDocumentIds = new HashSet<Long>(2*_set100.size);
                for (int _i101 = 0; _i101 < _set100.size; ++_i101)
                {
                  long _elem102;
                  _elem102 = iprot.readI64();
                  struct.ageOffDocumentIds.add(_elem102);
                }
                iprot.readSetEnd();
              }
              struct.setAgeOffDocumentIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAgeOffId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ageOffId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AgeOffInitiationResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AGE_OFF_ID_FIELD_DESC);
      oprot.writeI64(struct.ageOffId);
      oprot.writeFieldEnd();
      if (struct.ageOffDocumentIds != null) {
        oprot.writeFieldBegin(AGE_OFF_DOCUMENT_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.ageOffDocumentIds.size()));
          for (long _iter103 : struct.ageOffDocumentIds)
          {
            oprot.writeI64(_iter103);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AgeOffInitiationResultTupleSchemeFactory implements SchemeFactory {
    public AgeOffInitiationResultTupleScheme getScheme() {
      return new AgeOffInitiationResultTupleScheme();
    }
  }

  private static class AgeOffInitiationResultTupleScheme extends TupleScheme<AgeOffInitiationResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AgeOffInitiationResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.ageOffId);
      {
        oprot.writeI32(struct.ageOffDocumentIds.size());
        for (long _iter104 : struct.ageOffDocumentIds)
        {
          oprot.writeI64(_iter104);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AgeOffInitiationResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ageOffId = iprot.readI64();
      struct.setAgeOffIdIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set105 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.ageOffDocumentIds = new HashSet<Long>(2*_set105.size);
        for (int _i106 = 0; _i106 < _set105.size; ++_i106)
        {
          long _elem107;
          _elem107 = iprot.readI64();
          struct.ageOffDocumentIds.add(_elem107);
        }
      }
      struct.setAgeOffDocumentIdsIsSet(true);
    }
  }

}

