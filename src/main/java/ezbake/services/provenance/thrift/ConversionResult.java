/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.provenance.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ConversionResult implements org.apache.thrift.TBase<ConversionResult, ConversionResult._Fields>, java.io.Serializable, Cloneable, Comparable<ConversionResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConversionResult");

  private static final org.apache.thrift.protocol.TField CONVERTED_URIS_FIELD_DESC = new org.apache.thrift.protocol.TField("convertedUris", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField URIS_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("urisNotFound", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField IDS_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("idsNotFound", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ConversionResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ConversionResultTupleSchemeFactory());
  }

  public List<Long> convertedUris; // required
  public List<String> urisNotFound; // optional
  public List<Long> idsNotFound; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONVERTED_URIS((short)1, "convertedUris"),
    URIS_NOT_FOUND((short)2, "urisNotFound"),
    IDS_NOT_FOUND((short)3, "idsNotFound");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONVERTED_URIS
          return CONVERTED_URIS;
        case 2: // URIS_NOT_FOUND
          return URIS_NOT_FOUND;
        case 3: // IDS_NOT_FOUND
          return IDS_NOT_FOUND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.URIS_NOT_FOUND,_Fields.IDS_NOT_FOUND};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONVERTED_URIS, new org.apache.thrift.meta_data.FieldMetaData("convertedUris", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.URIS_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("urisNotFound", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IDS_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("idsNotFound", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConversionResult.class, metaDataMap);
  }

  public ConversionResult() {
  }

  public ConversionResult(
    List<Long> convertedUris)
  {
    this();
    this.convertedUris = convertedUris;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConversionResult(ConversionResult other) {
    if (other.isSetConvertedUris()) {
      List<Long> __this__convertedUris = new ArrayList<Long>(other.convertedUris);
      this.convertedUris = __this__convertedUris;
    }
    if (other.isSetUrisNotFound()) {
      List<String> __this__urisNotFound = new ArrayList<String>(other.urisNotFound);
      this.urisNotFound = __this__urisNotFound;
    }
    if (other.isSetIdsNotFound()) {
      List<Long> __this__idsNotFound = new ArrayList<Long>(other.idsNotFound);
      this.idsNotFound = __this__idsNotFound;
    }
  }

  public ConversionResult deepCopy() {
    return new ConversionResult(this);
  }

  @Override
  public void clear() {
    this.convertedUris = null;
    this.urisNotFound = null;
    this.idsNotFound = null;
  }

  public int getConvertedUrisSize() {
    return (this.convertedUris == null) ? 0 : this.convertedUris.size();
  }

  public java.util.Iterator<Long> getConvertedUrisIterator() {
    return (this.convertedUris == null) ? null : this.convertedUris.iterator();
  }

  public void addToConvertedUris(long elem) {
    if (this.convertedUris == null) {
      this.convertedUris = new ArrayList<Long>();
    }
    this.convertedUris.add(elem);
  }

  public List<Long> getConvertedUris() {
    return this.convertedUris;
  }

  public ConversionResult setConvertedUris(List<Long> convertedUris) {
    this.convertedUris = convertedUris;
    return this;
  }

  public void unsetConvertedUris() {
    this.convertedUris = null;
  }

  /** Returns true if field convertedUris is set (has been assigned a value) and false otherwise */
  public boolean isSetConvertedUris() {
    return this.convertedUris != null;
  }

  public void setConvertedUrisIsSet(boolean value) {
    if (!value) {
      this.convertedUris = null;
    }
  }

  public int getUrisNotFoundSize() {
    return (this.urisNotFound == null) ? 0 : this.urisNotFound.size();
  }

  public java.util.Iterator<String> getUrisNotFoundIterator() {
    return (this.urisNotFound == null) ? null : this.urisNotFound.iterator();
  }

  public void addToUrisNotFound(String elem) {
    if (this.urisNotFound == null) {
      this.urisNotFound = new ArrayList<String>();
    }
    this.urisNotFound.add(elem);
  }

  public List<String> getUrisNotFound() {
    return this.urisNotFound;
  }

  public ConversionResult setUrisNotFound(List<String> urisNotFound) {
    this.urisNotFound = urisNotFound;
    return this;
  }

  public void unsetUrisNotFound() {
    this.urisNotFound = null;
  }

  /** Returns true if field urisNotFound is set (has been assigned a value) and false otherwise */
  public boolean isSetUrisNotFound() {
    return this.urisNotFound != null;
  }

  public void setUrisNotFoundIsSet(boolean value) {
    if (!value) {
      this.urisNotFound = null;
    }
  }

  public int getIdsNotFoundSize() {
    return (this.idsNotFound == null) ? 0 : this.idsNotFound.size();
  }

  public java.util.Iterator<Long> getIdsNotFoundIterator() {
    return (this.idsNotFound == null) ? null : this.idsNotFound.iterator();
  }

  public void addToIdsNotFound(long elem) {
    if (this.idsNotFound == null) {
      this.idsNotFound = new ArrayList<Long>();
    }
    this.idsNotFound.add(elem);
  }

  public List<Long> getIdsNotFound() {
    return this.idsNotFound;
  }

  public ConversionResult setIdsNotFound(List<Long> idsNotFound) {
    this.idsNotFound = idsNotFound;
    return this;
  }

  public void unsetIdsNotFound() {
    this.idsNotFound = null;
  }

  /** Returns true if field idsNotFound is set (has been assigned a value) and false otherwise */
  public boolean isSetIdsNotFound() {
    return this.idsNotFound != null;
  }

  public void setIdsNotFoundIsSet(boolean value) {
    if (!value) {
      this.idsNotFound = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONVERTED_URIS:
      if (value == null) {
        unsetConvertedUris();
      } else {
        setConvertedUris((List<Long>)value);
      }
      break;

    case URIS_NOT_FOUND:
      if (value == null) {
        unsetUrisNotFound();
      } else {
        setUrisNotFound((List<String>)value);
      }
      break;

    case IDS_NOT_FOUND:
      if (value == null) {
        unsetIdsNotFound();
      } else {
        setIdsNotFound((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONVERTED_URIS:
      return getConvertedUris();

    case URIS_NOT_FOUND:
      return getUrisNotFound();

    case IDS_NOT_FOUND:
      return getIdsNotFound();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONVERTED_URIS:
      return isSetConvertedUris();
    case URIS_NOT_FOUND:
      return isSetUrisNotFound();
    case IDS_NOT_FOUND:
      return isSetIdsNotFound();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConversionResult)
      return this.equals((ConversionResult)that);
    return false;
  }

  public boolean equals(ConversionResult that) {
    if (that == null)
      return false;

    boolean this_present_convertedUris = true && this.isSetConvertedUris();
    boolean that_present_convertedUris = true && that.isSetConvertedUris();
    if (this_present_convertedUris || that_present_convertedUris) {
      if (!(this_present_convertedUris && that_present_convertedUris))
        return false;
      if (!this.convertedUris.equals(that.convertedUris))
        return false;
    }

    boolean this_present_urisNotFound = true && this.isSetUrisNotFound();
    boolean that_present_urisNotFound = true && that.isSetUrisNotFound();
    if (this_present_urisNotFound || that_present_urisNotFound) {
      if (!(this_present_urisNotFound && that_present_urisNotFound))
        return false;
      if (!this.urisNotFound.equals(that.urisNotFound))
        return false;
    }

    boolean this_present_idsNotFound = true && this.isSetIdsNotFound();
    boolean that_present_idsNotFound = true && that.isSetIdsNotFound();
    if (this_present_idsNotFound || that_present_idsNotFound) {
      if (!(this_present_idsNotFound && that_present_idsNotFound))
        return false;
      if (!this.idsNotFound.equals(that.idsNotFound))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_convertedUris = true && (isSetConvertedUris());
    builder.append(present_convertedUris);
    if (present_convertedUris)
      builder.append(convertedUris);

    boolean present_urisNotFound = true && (isSetUrisNotFound());
    builder.append(present_urisNotFound);
    if (present_urisNotFound)
      builder.append(urisNotFound);

    boolean present_idsNotFound = true && (isSetIdsNotFound());
    builder.append(present_idsNotFound);
    if (present_idsNotFound)
      builder.append(idsNotFound);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(ConversionResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConvertedUris()).compareTo(other.isSetConvertedUris());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConvertedUris()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.convertedUris, other.convertedUris);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrisNotFound()).compareTo(other.isSetUrisNotFound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrisNotFound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urisNotFound, other.urisNotFound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdsNotFound()).compareTo(other.isSetIdsNotFound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdsNotFound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idsNotFound, other.idsNotFound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConversionResult(");
    boolean first = true;

    sb.append("convertedUris:");
    if (this.convertedUris == null) {
      sb.append("null");
    } else {
      sb.append(this.convertedUris);
    }
    first = false;
    if (isSetUrisNotFound()) {
      if (!first) sb.append(", ");
      sb.append("urisNotFound:");
      if (this.urisNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.urisNotFound);
      }
      first = false;
    }
    if (isSetIdsNotFound()) {
      if (!first) sb.append(", ");
      sb.append("idsNotFound:");
      if (this.idsNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.idsNotFound);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (convertedUris == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'convertedUris' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConversionResultStandardSchemeFactory implements SchemeFactory {
    public ConversionResultStandardScheme getScheme() {
      return new ConversionResultStandardScheme();
    }
  }

  private static class ConversionResultStandardScheme extends StandardScheme<ConversionResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConversionResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONVERTED_URIS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                struct.convertedUris = new ArrayList<Long>(_list76.size);
                for (int _i77 = 0; _i77 < _list76.size; ++_i77)
                {
                  long _elem78;
                  _elem78 = iprot.readI64();
                  struct.convertedUris.add(_elem78);
                }
                iprot.readListEnd();
              }
              struct.setConvertedUrisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // URIS_NOT_FOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list79 = iprot.readListBegin();
                struct.urisNotFound = new ArrayList<String>(_list79.size);
                for (int _i80 = 0; _i80 < _list79.size; ++_i80)
                {
                  String _elem81;
                  _elem81 = iprot.readString();
                  struct.urisNotFound.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setUrisNotFoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IDS_NOT_FOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                struct.idsNotFound = new ArrayList<Long>(_list82.size);
                for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                {
                  long _elem84;
                  _elem84 = iprot.readI64();
                  struct.idsNotFound.add(_elem84);
                }
                iprot.readListEnd();
              }
              struct.setIdsNotFoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConversionResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.convertedUris != null) {
        oprot.writeFieldBegin(CONVERTED_URIS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.convertedUris.size()));
          for (long _iter85 : struct.convertedUris)
          {
            oprot.writeI64(_iter85);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.urisNotFound != null) {
        if (struct.isSetUrisNotFound()) {
          oprot.writeFieldBegin(URIS_NOT_FOUND_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.urisNotFound.size()));
            for (String _iter86 : struct.urisNotFound)
            {
              oprot.writeString(_iter86);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.idsNotFound != null) {
        if (struct.isSetIdsNotFound()) {
          oprot.writeFieldBegin(IDS_NOT_FOUND_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.idsNotFound.size()));
            for (long _iter87 : struct.idsNotFound)
            {
              oprot.writeI64(_iter87);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConversionResultTupleSchemeFactory implements SchemeFactory {
    public ConversionResultTupleScheme getScheme() {
      return new ConversionResultTupleScheme();
    }
  }

  private static class ConversionResultTupleScheme extends TupleScheme<ConversionResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConversionResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.convertedUris.size());
        for (long _iter88 : struct.convertedUris)
        {
          oprot.writeI64(_iter88);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetUrisNotFound()) {
        optionals.set(0);
      }
      if (struct.isSetIdsNotFound()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUrisNotFound()) {
        {
          oprot.writeI32(struct.urisNotFound.size());
          for (String _iter89 : struct.urisNotFound)
          {
            oprot.writeString(_iter89);
          }
        }
      }
      if (struct.isSetIdsNotFound()) {
        {
          oprot.writeI32(struct.idsNotFound.size());
          for (long _iter90 : struct.idsNotFound)
          {
            oprot.writeI64(_iter90);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConversionResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list91 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.convertedUris = new ArrayList<Long>(_list91.size);
        for (int _i92 = 0; _i92 < _list91.size; ++_i92)
        {
          long _elem93;
          _elem93 = iprot.readI64();
          struct.convertedUris.add(_elem93);
        }
      }
      struct.setConvertedUrisIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list94 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.urisNotFound = new ArrayList<String>(_list94.size);
          for (int _i95 = 0; _i95 < _list94.size; ++_i95)
          {
            String _elem96;
            _elem96 = iprot.readString();
            struct.urisNotFound.add(_elem96);
          }
        }
        struct.setUrisNotFoundIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.idsNotFound = new ArrayList<Long>(_list97.size);
          for (int _i98 = 0; _i98 < _list97.size; ++_i98)
          {
            long _elem99;
            _elem99 = iprot.readI64();
            struct.idsNotFound.add(_elem99);
          }
        }
        struct.setIdsNotFoundIsSet(true);
      }
    }
  }

}

