/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.provenance.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DocumentAgeOffInfo implements org.apache.thrift.TBase<DocumentAgeOffInfo, DocumentAgeOffInfo._Fields>, java.io.Serializable, Cloneable, Comparable<DocumentAgeOffInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DocumentAgeOffInfo");

  private static final org.apache.thrift.protocol.TField RULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField AGE_OFF_RELEVANT_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ageOffRelevantDateTime", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MAXIMUM_EXECUTION_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("maximumExecutionPeriod", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timeStamp", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField APPLICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("application", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField INHERITED_FIELD_DESC = new org.apache.thrift.protocol.TField("inherited", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField INHERITED_FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inheritedFromId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField INHERITED_FROM_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("inheritedFromUri", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DocumentAgeOffInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DocumentAgeOffInfoTupleSchemeFactory());
  }

  public long ruleId; // required
  public ezbake.base.thrift.DateTime ageOffRelevantDateTime; // required
  public int maximumExecutionPeriod; // required
  public ezbake.base.thrift.DateTime timeStamp; // required
  public String application; // required
  public String user; // required
  public boolean inherited; // required
  public long inheritedFromId; // optional
  public String inheritedFromUri; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RULE_ID((short)1, "ruleId"),
    AGE_OFF_RELEVANT_DATE_TIME((short)2, "ageOffRelevantDateTime"),
    MAXIMUM_EXECUTION_PERIOD((short)3, "maximumExecutionPeriod"),
    TIME_STAMP((short)4, "timeStamp"),
    APPLICATION((short)5, "application"),
    USER((short)6, "user"),
    INHERITED((short)7, "inherited"),
    INHERITED_FROM_ID((short)8, "inheritedFromId"),
    INHERITED_FROM_URI((short)9, "inheritedFromUri");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RULE_ID
          return RULE_ID;
        case 2: // AGE_OFF_RELEVANT_DATE_TIME
          return AGE_OFF_RELEVANT_DATE_TIME;
        case 3: // MAXIMUM_EXECUTION_PERIOD
          return MAXIMUM_EXECUTION_PERIOD;
        case 4: // TIME_STAMP
          return TIME_STAMP;
        case 5: // APPLICATION
          return APPLICATION;
        case 6: // USER
          return USER;
        case 7: // INHERITED
          return INHERITED;
        case 8: // INHERITED_FROM_ID
          return INHERITED_FROM_ID;
        case 9: // INHERITED_FROM_URI
          return INHERITED_FROM_URI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RULEID_ISSET_ID = 0;
  private static final int __MAXIMUMEXECUTIONPERIOD_ISSET_ID = 1;
  private static final int __INHERITED_ISSET_ID = 2;
  private static final int __INHERITEDFROMID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INHERITED_FROM_ID,_Fields.INHERITED_FROM_URI};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RULE_ID, new org.apache.thrift.meta_data.FieldMetaData("ruleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AGE_OFF_RELEVANT_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("ageOffRelevantDateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
    tmpMap.put(_Fields.MAXIMUM_EXECUTION_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("maximumExecutionPeriod", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("timeStamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
    tmpMap.put(_Fields.APPLICATION, new org.apache.thrift.meta_data.FieldMetaData("application", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INHERITED, new org.apache.thrift.meta_data.FieldMetaData("inherited", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INHERITED_FROM_ID, new org.apache.thrift.meta_data.FieldMetaData("inheritedFromId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INHERITED_FROM_URI, new org.apache.thrift.meta_data.FieldMetaData("inheritedFromUri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DocumentAgeOffInfo.class, metaDataMap);
  }

  public DocumentAgeOffInfo() {
  }

  public DocumentAgeOffInfo(
    long ruleId,
    ezbake.base.thrift.DateTime ageOffRelevantDateTime,
    int maximumExecutionPeriod,
    ezbake.base.thrift.DateTime timeStamp,
    String application,
    String user,
    boolean inherited)
  {
    this();
    this.ruleId = ruleId;
    setRuleIdIsSet(true);
    this.ageOffRelevantDateTime = ageOffRelevantDateTime;
    this.maximumExecutionPeriod = maximumExecutionPeriod;
    setMaximumExecutionPeriodIsSet(true);
    this.timeStamp = timeStamp;
    this.application = application;
    this.user = user;
    this.inherited = inherited;
    setInheritedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DocumentAgeOffInfo(DocumentAgeOffInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ruleId = other.ruleId;
    if (other.isSetAgeOffRelevantDateTime()) {
      this.ageOffRelevantDateTime = new ezbake.base.thrift.DateTime(other.ageOffRelevantDateTime);
    }
    this.maximumExecutionPeriod = other.maximumExecutionPeriod;
    if (other.isSetTimeStamp()) {
      this.timeStamp = new ezbake.base.thrift.DateTime(other.timeStamp);
    }
    if (other.isSetApplication()) {
      this.application = other.application;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    this.inherited = other.inherited;
    this.inheritedFromId = other.inheritedFromId;
    if (other.isSetInheritedFromUri()) {
      this.inheritedFromUri = other.inheritedFromUri;
    }
  }

  public DocumentAgeOffInfo deepCopy() {
    return new DocumentAgeOffInfo(this);
  }

  @Override
  public void clear() {
    setRuleIdIsSet(false);
    this.ruleId = 0;
    this.ageOffRelevantDateTime = null;
    setMaximumExecutionPeriodIsSet(false);
    this.maximumExecutionPeriod = 0;
    this.timeStamp = null;
    this.application = null;
    this.user = null;
    setInheritedIsSet(false);
    this.inherited = false;
    setInheritedFromIdIsSet(false);
    this.inheritedFromId = 0;
    this.inheritedFromUri = null;
  }

  public long getRuleId() {
    return this.ruleId;
  }

  public DocumentAgeOffInfo setRuleId(long ruleId) {
    this.ruleId = ruleId;
    setRuleIdIsSet(true);
    return this;
  }

  public void unsetRuleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RULEID_ISSET_ID);
  }

  /** Returns true if field ruleId is set (has been assigned a value) and false otherwise */
  public boolean isSetRuleId() {
    return EncodingUtils.testBit(__isset_bitfield, __RULEID_ISSET_ID);
  }

  public void setRuleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RULEID_ISSET_ID, value);
  }

  public ezbake.base.thrift.DateTime getAgeOffRelevantDateTime() {
    return this.ageOffRelevantDateTime;
  }

  public DocumentAgeOffInfo setAgeOffRelevantDateTime(ezbake.base.thrift.DateTime ageOffRelevantDateTime) {
    this.ageOffRelevantDateTime = ageOffRelevantDateTime;
    return this;
  }

  public void unsetAgeOffRelevantDateTime() {
    this.ageOffRelevantDateTime = null;
  }

  /** Returns true if field ageOffRelevantDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAgeOffRelevantDateTime() {
    return this.ageOffRelevantDateTime != null;
  }

  public void setAgeOffRelevantDateTimeIsSet(boolean value) {
    if (!value) {
      this.ageOffRelevantDateTime = null;
    }
  }

  public int getMaximumExecutionPeriod() {
    return this.maximumExecutionPeriod;
  }

  public DocumentAgeOffInfo setMaximumExecutionPeriod(int maximumExecutionPeriod) {
    this.maximumExecutionPeriod = maximumExecutionPeriod;
    setMaximumExecutionPeriodIsSet(true);
    return this;
  }

  public void unsetMaximumExecutionPeriod() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXIMUMEXECUTIONPERIOD_ISSET_ID);
  }

  /** Returns true if field maximumExecutionPeriod is set (has been assigned a value) and false otherwise */
  public boolean isSetMaximumExecutionPeriod() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXIMUMEXECUTIONPERIOD_ISSET_ID);
  }

  public void setMaximumExecutionPeriodIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXIMUMEXECUTIONPERIOD_ISSET_ID, value);
  }

  public ezbake.base.thrift.DateTime getTimeStamp() {
    return this.timeStamp;
  }

  public DocumentAgeOffInfo setTimeStamp(ezbake.base.thrift.DateTime timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  public void unsetTimeStamp() {
    this.timeStamp = null;
  }

  /** Returns true if field timeStamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeStamp() {
    return this.timeStamp != null;
  }

  public void setTimeStampIsSet(boolean value) {
    if (!value) {
      this.timeStamp = null;
    }
  }

  public String getApplication() {
    return this.application;
  }

  public DocumentAgeOffInfo setApplication(String application) {
    this.application = application;
    return this;
  }

  public void unsetApplication() {
    this.application = null;
  }

  /** Returns true if field application is set (has been assigned a value) and false otherwise */
  public boolean isSetApplication() {
    return this.application != null;
  }

  public void setApplicationIsSet(boolean value) {
    if (!value) {
      this.application = null;
    }
  }

  public String getUser() {
    return this.user;
  }

  public DocumentAgeOffInfo setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public boolean isInherited() {
    return this.inherited;
  }

  public DocumentAgeOffInfo setInherited(boolean inherited) {
    this.inherited = inherited;
    setInheritedIsSet(true);
    return this;
  }

  public void unsetInherited() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INHERITED_ISSET_ID);
  }

  /** Returns true if field inherited is set (has been assigned a value) and false otherwise */
  public boolean isSetInherited() {
    return EncodingUtils.testBit(__isset_bitfield, __INHERITED_ISSET_ID);
  }

  public void setInheritedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INHERITED_ISSET_ID, value);
  }

  public long getInheritedFromId() {
    return this.inheritedFromId;
  }

  public DocumentAgeOffInfo setInheritedFromId(long inheritedFromId) {
    this.inheritedFromId = inheritedFromId;
    setInheritedFromIdIsSet(true);
    return this;
  }

  public void unsetInheritedFromId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INHERITEDFROMID_ISSET_ID);
  }

  /** Returns true if field inheritedFromId is set (has been assigned a value) and false otherwise */
  public boolean isSetInheritedFromId() {
    return EncodingUtils.testBit(__isset_bitfield, __INHERITEDFROMID_ISSET_ID);
  }

  public void setInheritedFromIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INHERITEDFROMID_ISSET_ID, value);
  }

  public String getInheritedFromUri() {
    return this.inheritedFromUri;
  }

  public DocumentAgeOffInfo setInheritedFromUri(String inheritedFromUri) {
    this.inheritedFromUri = inheritedFromUri;
    return this;
  }

  public void unsetInheritedFromUri() {
    this.inheritedFromUri = null;
  }

  /** Returns true if field inheritedFromUri is set (has been assigned a value) and false otherwise */
  public boolean isSetInheritedFromUri() {
    return this.inheritedFromUri != null;
  }

  public void setInheritedFromUriIsSet(boolean value) {
    if (!value) {
      this.inheritedFromUri = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RULE_ID:
      if (value == null) {
        unsetRuleId();
      } else {
        setRuleId((Long)value);
      }
      break;

    case AGE_OFF_RELEVANT_DATE_TIME:
      if (value == null) {
        unsetAgeOffRelevantDateTime();
      } else {
        setAgeOffRelevantDateTime((ezbake.base.thrift.DateTime)value);
      }
      break;

    case MAXIMUM_EXECUTION_PERIOD:
      if (value == null) {
        unsetMaximumExecutionPeriod();
      } else {
        setMaximumExecutionPeriod((Integer)value);
      }
      break;

    case TIME_STAMP:
      if (value == null) {
        unsetTimeStamp();
      } else {
        setTimeStamp((ezbake.base.thrift.DateTime)value);
      }
      break;

    case APPLICATION:
      if (value == null) {
        unsetApplication();
      } else {
        setApplication((String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case INHERITED:
      if (value == null) {
        unsetInherited();
      } else {
        setInherited((Boolean)value);
      }
      break;

    case INHERITED_FROM_ID:
      if (value == null) {
        unsetInheritedFromId();
      } else {
        setInheritedFromId((Long)value);
      }
      break;

    case INHERITED_FROM_URI:
      if (value == null) {
        unsetInheritedFromUri();
      } else {
        setInheritedFromUri((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RULE_ID:
      return Long.valueOf(getRuleId());

    case AGE_OFF_RELEVANT_DATE_TIME:
      return getAgeOffRelevantDateTime();

    case MAXIMUM_EXECUTION_PERIOD:
      return Integer.valueOf(getMaximumExecutionPeriod());

    case TIME_STAMP:
      return getTimeStamp();

    case APPLICATION:
      return getApplication();

    case USER:
      return getUser();

    case INHERITED:
      return Boolean.valueOf(isInherited());

    case INHERITED_FROM_ID:
      return Long.valueOf(getInheritedFromId());

    case INHERITED_FROM_URI:
      return getInheritedFromUri();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RULE_ID:
      return isSetRuleId();
    case AGE_OFF_RELEVANT_DATE_TIME:
      return isSetAgeOffRelevantDateTime();
    case MAXIMUM_EXECUTION_PERIOD:
      return isSetMaximumExecutionPeriod();
    case TIME_STAMP:
      return isSetTimeStamp();
    case APPLICATION:
      return isSetApplication();
    case USER:
      return isSetUser();
    case INHERITED:
      return isSetInherited();
    case INHERITED_FROM_ID:
      return isSetInheritedFromId();
    case INHERITED_FROM_URI:
      return isSetInheritedFromUri();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DocumentAgeOffInfo)
      return this.equals((DocumentAgeOffInfo)that);
    return false;
  }

  public boolean equals(DocumentAgeOffInfo that) {
    if (that == null)
      return false;

    boolean this_present_ruleId = true;
    boolean that_present_ruleId = true;
    if (this_present_ruleId || that_present_ruleId) {
      if (!(this_present_ruleId && that_present_ruleId))
        return false;
      if (this.ruleId != that.ruleId)
        return false;
    }

    boolean this_present_ageOffRelevantDateTime = true && this.isSetAgeOffRelevantDateTime();
    boolean that_present_ageOffRelevantDateTime = true && that.isSetAgeOffRelevantDateTime();
    if (this_present_ageOffRelevantDateTime || that_present_ageOffRelevantDateTime) {
      if (!(this_present_ageOffRelevantDateTime && that_present_ageOffRelevantDateTime))
        return false;
      if (!this.ageOffRelevantDateTime.equals(that.ageOffRelevantDateTime))
        return false;
    }

    boolean this_present_maximumExecutionPeriod = true;
    boolean that_present_maximumExecutionPeriod = true;
    if (this_present_maximumExecutionPeriod || that_present_maximumExecutionPeriod) {
      if (!(this_present_maximumExecutionPeriod && that_present_maximumExecutionPeriod))
        return false;
      if (this.maximumExecutionPeriod != that.maximumExecutionPeriod)
        return false;
    }

    boolean this_present_timeStamp = true && this.isSetTimeStamp();
    boolean that_present_timeStamp = true && that.isSetTimeStamp();
    if (this_present_timeStamp || that_present_timeStamp) {
      if (!(this_present_timeStamp && that_present_timeStamp))
        return false;
      if (!this.timeStamp.equals(that.timeStamp))
        return false;
    }

    boolean this_present_application = true && this.isSetApplication();
    boolean that_present_application = true && that.isSetApplication();
    if (this_present_application || that_present_application) {
      if (!(this_present_application && that_present_application))
        return false;
      if (!this.application.equals(that.application))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_inherited = true;
    boolean that_present_inherited = true;
    if (this_present_inherited || that_present_inherited) {
      if (!(this_present_inherited && that_present_inherited))
        return false;
      if (this.inherited != that.inherited)
        return false;
    }

    boolean this_present_inheritedFromId = true && this.isSetInheritedFromId();
    boolean that_present_inheritedFromId = true && that.isSetInheritedFromId();
    if (this_present_inheritedFromId || that_present_inheritedFromId) {
      if (!(this_present_inheritedFromId && that_present_inheritedFromId))
        return false;
      if (this.inheritedFromId != that.inheritedFromId)
        return false;
    }

    boolean this_present_inheritedFromUri = true && this.isSetInheritedFromUri();
    boolean that_present_inheritedFromUri = true && that.isSetInheritedFromUri();
    if (this_present_inheritedFromUri || that_present_inheritedFromUri) {
      if (!(this_present_inheritedFromUri && that_present_inheritedFromUri))
        return false;
      if (!this.inheritedFromUri.equals(that.inheritedFromUri))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_ruleId = true;
    builder.append(present_ruleId);
    if (present_ruleId)
      builder.append(ruleId);

    boolean present_ageOffRelevantDateTime = true && (isSetAgeOffRelevantDateTime());
    builder.append(present_ageOffRelevantDateTime);
    if (present_ageOffRelevantDateTime)
      builder.append(ageOffRelevantDateTime);

    boolean present_maximumExecutionPeriod = true;
    builder.append(present_maximumExecutionPeriod);
    if (present_maximumExecutionPeriod)
      builder.append(maximumExecutionPeriod);

    boolean present_timeStamp = true && (isSetTimeStamp());
    builder.append(present_timeStamp);
    if (present_timeStamp)
      builder.append(timeStamp);

    boolean present_application = true && (isSetApplication());
    builder.append(present_application);
    if (present_application)
      builder.append(application);

    boolean present_user = true && (isSetUser());
    builder.append(present_user);
    if (present_user)
      builder.append(user);

    boolean present_inherited = true;
    builder.append(present_inherited);
    if (present_inherited)
      builder.append(inherited);

    boolean present_inheritedFromId = true && (isSetInheritedFromId());
    builder.append(present_inheritedFromId);
    if (present_inheritedFromId)
      builder.append(inheritedFromId);

    boolean present_inheritedFromUri = true && (isSetInheritedFromUri());
    builder.append(present_inheritedFromUri);
    if (present_inheritedFromUri)
      builder.append(inheritedFromUri);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(DocumentAgeOffInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRuleId()).compareTo(other.isSetRuleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleId, other.ruleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgeOffRelevantDateTime()).compareTo(other.isSetAgeOffRelevantDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgeOffRelevantDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageOffRelevantDateTime, other.ageOffRelevantDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaximumExecutionPeriod()).compareTo(other.isSetMaximumExecutionPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaximumExecutionPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maximumExecutionPeriod, other.maximumExecutionPeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeStamp()).compareTo(other.isSetTimeStamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeStamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStamp, other.timeStamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplication()).compareTo(other.isSetApplication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplication()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.application, other.application);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInherited()).compareTo(other.isSetInherited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInherited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inherited, other.inherited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInheritedFromId()).compareTo(other.isSetInheritedFromId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInheritedFromId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inheritedFromId, other.inheritedFromId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInheritedFromUri()).compareTo(other.isSetInheritedFromUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInheritedFromUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inheritedFromUri, other.inheritedFromUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DocumentAgeOffInfo(");
    boolean first = true;

    sb.append("ruleId:");
    sb.append(this.ruleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ageOffRelevantDateTime:");
    if (this.ageOffRelevantDateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.ageOffRelevantDateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maximumExecutionPeriod:");
    sb.append(this.maximumExecutionPeriod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeStamp:");
    if (this.timeStamp == null) {
      sb.append("null");
    } else {
      sb.append(this.timeStamp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("application:");
    if (this.application == null) {
      sb.append("null");
    } else {
      sb.append(this.application);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inherited:");
    sb.append(this.inherited);
    first = false;
    if (isSetInheritedFromId()) {
      if (!first) sb.append(", ");
      sb.append("inheritedFromId:");
      sb.append(this.inheritedFromId);
      first = false;
    }
    if (isSetInheritedFromUri()) {
      if (!first) sb.append(", ");
      sb.append("inheritedFromUri:");
      if (this.inheritedFromUri == null) {
        sb.append("null");
      } else {
        sb.append(this.inheritedFromUri);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'ruleId' because it's a primitive and you chose the non-beans generator.
    if (ageOffRelevantDateTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ageOffRelevantDateTime' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'maximumExecutionPeriod' because it's a primitive and you chose the non-beans generator.
    if (timeStamp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeStamp' was not present! Struct: " + toString());
    }
    if (application == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'application' was not present! Struct: " + toString());
    }
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'inherited' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (ageOffRelevantDateTime != null) {
      ageOffRelevantDateTime.validate();
    }
    if (timeStamp != null) {
      timeStamp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DocumentAgeOffInfoStandardSchemeFactory implements SchemeFactory {
    public DocumentAgeOffInfoStandardScheme getScheme() {
      return new DocumentAgeOffInfoStandardScheme();
    }
  }

  private static class DocumentAgeOffInfoStandardScheme extends StandardScheme<DocumentAgeOffInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DocumentAgeOffInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RULE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ruleId = iprot.readI64();
              struct.setRuleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGE_OFF_RELEVANT_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ageOffRelevantDateTime = new ezbake.base.thrift.DateTime();
              struct.ageOffRelevantDateTime.read(iprot);
              struct.setAgeOffRelevantDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAXIMUM_EXECUTION_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maximumExecutionPeriod = iprot.readI32();
              struct.setMaximumExecutionPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timeStamp = new ezbake.base.thrift.DateTime();
              struct.timeStamp.read(iprot);
              struct.setTimeStampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APPLICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.application = iprot.readString();
              struct.setApplicationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INHERITED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.inherited = iprot.readBool();
              struct.setInheritedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INHERITED_FROM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inheritedFromId = iprot.readI64();
              struct.setInheritedFromIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INHERITED_FROM_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inheritedFromUri = iprot.readString();
              struct.setInheritedFromUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRuleId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ruleId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMaximumExecutionPeriod()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maximumExecutionPeriod' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInherited()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inherited' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DocumentAgeOffInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RULE_ID_FIELD_DESC);
      oprot.writeI64(struct.ruleId);
      oprot.writeFieldEnd();
      if (struct.ageOffRelevantDateTime != null) {
        oprot.writeFieldBegin(AGE_OFF_RELEVANT_DATE_TIME_FIELD_DESC);
        struct.ageOffRelevantDateTime.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAXIMUM_EXECUTION_PERIOD_FIELD_DESC);
      oprot.writeI32(struct.maximumExecutionPeriod);
      oprot.writeFieldEnd();
      if (struct.timeStamp != null) {
        oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
        struct.timeStamp.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.application != null) {
        oprot.writeFieldBegin(APPLICATION_FIELD_DESC);
        oprot.writeString(struct.application);
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INHERITED_FIELD_DESC);
      oprot.writeBool(struct.inherited);
      oprot.writeFieldEnd();
      if (struct.isSetInheritedFromId()) {
        oprot.writeFieldBegin(INHERITED_FROM_ID_FIELD_DESC);
        oprot.writeI64(struct.inheritedFromId);
        oprot.writeFieldEnd();
      }
      if (struct.inheritedFromUri != null) {
        if (struct.isSetInheritedFromUri()) {
          oprot.writeFieldBegin(INHERITED_FROM_URI_FIELD_DESC);
          oprot.writeString(struct.inheritedFromUri);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DocumentAgeOffInfoTupleSchemeFactory implements SchemeFactory {
    public DocumentAgeOffInfoTupleScheme getScheme() {
      return new DocumentAgeOffInfoTupleScheme();
    }
  }

  private static class DocumentAgeOffInfoTupleScheme extends TupleScheme<DocumentAgeOffInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DocumentAgeOffInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.ruleId);
      struct.ageOffRelevantDateTime.write(oprot);
      oprot.writeI32(struct.maximumExecutionPeriod);
      struct.timeStamp.write(oprot);
      oprot.writeString(struct.application);
      oprot.writeString(struct.user);
      oprot.writeBool(struct.inherited);
      BitSet optionals = new BitSet();
      if (struct.isSetInheritedFromId()) {
        optionals.set(0);
      }
      if (struct.isSetInheritedFromUri()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetInheritedFromId()) {
        oprot.writeI64(struct.inheritedFromId);
      }
      if (struct.isSetInheritedFromUri()) {
        oprot.writeString(struct.inheritedFromUri);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DocumentAgeOffInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ruleId = iprot.readI64();
      struct.setRuleIdIsSet(true);
      struct.ageOffRelevantDateTime = new ezbake.base.thrift.DateTime();
      struct.ageOffRelevantDateTime.read(iprot);
      struct.setAgeOffRelevantDateTimeIsSet(true);
      struct.maximumExecutionPeriod = iprot.readI32();
      struct.setMaximumExecutionPeriodIsSet(true);
      struct.timeStamp = new ezbake.base.thrift.DateTime();
      struct.timeStamp.read(iprot);
      struct.setTimeStampIsSet(true);
      struct.application = iprot.readString();
      struct.setApplicationIsSet(true);
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.inherited = iprot.readBool();
      struct.setInheritedIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.inheritedFromId = iprot.readI64();
        struct.setInheritedFromIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.inheritedFromUri = iprot.readString();
        struct.setInheritedFromUriIsSet(true);
      }
    }
  }

}

