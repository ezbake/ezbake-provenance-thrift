/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.provenance.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProvenanceParentDocumentNotFoundException extends TException implements org.apache.thrift.TBase<ProvenanceParentDocumentNotFoundException, ProvenanceParentDocumentNotFoundException._Fields>, java.io.Serializable, Cloneable, Comparable<ProvenanceParentDocumentNotFoundException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProvenanceParentDocumentNotFoundException");

  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_URIS_FIELD_DESC = new org.apache.thrift.protocol.TField("parentUris", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProvenanceParentDocumentNotFoundExceptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProvenanceParentDocumentNotFoundExceptionTupleSchemeFactory());
  }

  public String message; // required
  public List<String> parentUris; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE((short)1, "message"),
    PARENT_URIS((short)2, "parentUris");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE
          return MESSAGE;
        case 2: // PARENT_URIS
          return PARENT_URIS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_URIS, new org.apache.thrift.meta_data.FieldMetaData("parentUris", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProvenanceParentDocumentNotFoundException.class, metaDataMap);
  }

  public ProvenanceParentDocumentNotFoundException() {
  }

  public ProvenanceParentDocumentNotFoundException(
    String message,
    List<String> parentUris)
  {
    this();
    this.message = message;
    this.parentUris = parentUris;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProvenanceParentDocumentNotFoundException(ProvenanceParentDocumentNotFoundException other) {
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetParentUris()) {
      List<String> __this__parentUris = new ArrayList<String>(other.parentUris);
      this.parentUris = __this__parentUris;
    }
  }

  public ProvenanceParentDocumentNotFoundException deepCopy() {
    return new ProvenanceParentDocumentNotFoundException(this);
  }

  @Override
  public void clear() {
    this.message = null;
    this.parentUris = null;
  }

  public String getMessage() {
    return this.message;
  }

  public ProvenanceParentDocumentNotFoundException setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getParentUrisSize() {
    return (this.parentUris == null) ? 0 : this.parentUris.size();
  }

  public java.util.Iterator<String> getParentUrisIterator() {
    return (this.parentUris == null) ? null : this.parentUris.iterator();
  }

  public void addToParentUris(String elem) {
    if (this.parentUris == null) {
      this.parentUris = new ArrayList<String>();
    }
    this.parentUris.add(elem);
  }

  public List<String> getParentUris() {
    return this.parentUris;
  }

  public ProvenanceParentDocumentNotFoundException setParentUris(List<String> parentUris) {
    this.parentUris = parentUris;
    return this;
  }

  public void unsetParentUris() {
    this.parentUris = null;
  }

  /** Returns true if field parentUris is set (has been assigned a value) and false otherwise */
  public boolean isSetParentUris() {
    return this.parentUris != null;
  }

  public void setParentUrisIsSet(boolean value) {
    if (!value) {
      this.parentUris = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case PARENT_URIS:
      if (value == null) {
        unsetParentUris();
      } else {
        setParentUris((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE:
      return getMessage();

    case PARENT_URIS:
      return getParentUris();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE:
      return isSetMessage();
    case PARENT_URIS:
      return isSetParentUris();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProvenanceParentDocumentNotFoundException)
      return this.equals((ProvenanceParentDocumentNotFoundException)that);
    return false;
  }

  public boolean equals(ProvenanceParentDocumentNotFoundException that) {
    if (that == null)
      return false;

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_parentUris = true && this.isSetParentUris();
    boolean that_present_parentUris = true && that.isSetParentUris();
    if (this_present_parentUris || that_present_parentUris) {
      if (!(this_present_parentUris && that_present_parentUris))
        return false;
      if (!this.parentUris.equals(that.parentUris))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_message = true && (isSetMessage());
    builder.append(present_message);
    if (present_message)
      builder.append(message);

    boolean present_parentUris = true && (isSetParentUris());
    builder.append(present_parentUris);
    if (present_parentUris)
      builder.append(parentUris);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(ProvenanceParentDocumentNotFoundException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentUris()).compareTo(other.isSetParentUris());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentUris()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentUris, other.parentUris);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProvenanceParentDocumentNotFoundException(");
    boolean first = true;

    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentUris:");
    if (this.parentUris == null) {
      sb.append("null");
    } else {
      sb.append(this.parentUris);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProvenanceParentDocumentNotFoundExceptionStandardSchemeFactory implements SchemeFactory {
    public ProvenanceParentDocumentNotFoundExceptionStandardScheme getScheme() {
      return new ProvenanceParentDocumentNotFoundExceptionStandardScheme();
    }
  }

  private static class ProvenanceParentDocumentNotFoundExceptionStandardScheme extends StandardScheme<ProvenanceParentDocumentNotFoundException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProvenanceParentDocumentNotFoundException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT_URIS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list190 = iprot.readListBegin();
                struct.parentUris = new ArrayList<String>(_list190.size);
                for (int _i191 = 0; _i191 < _list190.size; ++_i191)
                {
                  String _elem192;
                  _elem192 = iprot.readString();
                  struct.parentUris.add(_elem192);
                }
                iprot.readListEnd();
              }
              struct.setParentUrisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProvenanceParentDocumentNotFoundException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.parentUris != null) {
        oprot.writeFieldBegin(PARENT_URIS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.parentUris.size()));
          for (String _iter193 : struct.parentUris)
          {
            oprot.writeString(_iter193);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProvenanceParentDocumentNotFoundExceptionTupleSchemeFactory implements SchemeFactory {
    public ProvenanceParentDocumentNotFoundExceptionTupleScheme getScheme() {
      return new ProvenanceParentDocumentNotFoundExceptionTupleScheme();
    }
  }

  private static class ProvenanceParentDocumentNotFoundExceptionTupleScheme extends TupleScheme<ProvenanceParentDocumentNotFoundException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProvenanceParentDocumentNotFoundException struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMessage()) {
        optionals.set(0);
      }
      if (struct.isSetParentUris()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetParentUris()) {
        {
          oprot.writeI32(struct.parentUris.size());
          for (String _iter194 : struct.parentUris)
          {
            oprot.writeString(_iter194);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProvenanceParentDocumentNotFoundException struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list195 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.parentUris = new ArrayList<String>(_list195.size);
          for (int _i196 = 0; _i196 < _list195.size; ++_i196)
          {
            String _elem197;
            _elem197 = iprot.readString();
            struct.parentUris.add(_elem197);
          }
        }
        struct.setParentUrisIsSet(true);
      }
    }
  }

}

