/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.provenance.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PositionsToUris implements org.apache.thrift.TBase<PositionsToUris, PositionsToUris._Fields>, java.io.Serializable, Cloneable, Comparable<PositionsToUris> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PositionsToUris");

  private static final org.apache.thrift.protocol.TField MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("mapping", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField UNFOUND_POSITION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("unfoundPositionList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PositionsToUrisStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PositionsToUrisTupleSchemeFactory());
  }

  public Map<Long,String> mapping; // required
  public List<Long> unfoundPositionList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAPPING((short)1, "mapping"),
    UNFOUND_POSITION_LIST((short)2, "unfoundPositionList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAPPING
          return MAPPING;
        case 2: // UNFOUND_POSITION_LIST
          return UNFOUND_POSITION_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAPPING, new org.apache.thrift.meta_data.FieldMetaData("mapping", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UNFOUND_POSITION_LIST, new org.apache.thrift.meta_data.FieldMetaData("unfoundPositionList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PositionsToUris.class, metaDataMap);
  }

  public PositionsToUris() {
  }

  public PositionsToUris(
    Map<Long,String> mapping,
    List<Long> unfoundPositionList)
  {
    this();
    this.mapping = mapping;
    this.unfoundPositionList = unfoundPositionList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PositionsToUris(PositionsToUris other) {
    if (other.isSetMapping()) {
      Map<Long,String> __this__mapping = new HashMap<Long,String>(other.mapping);
      this.mapping = __this__mapping;
    }
    if (other.isSetUnfoundPositionList()) {
      List<Long> __this__unfoundPositionList = new ArrayList<Long>(other.unfoundPositionList);
      this.unfoundPositionList = __this__unfoundPositionList;
    }
  }

  public PositionsToUris deepCopy() {
    return new PositionsToUris(this);
  }

  @Override
  public void clear() {
    this.mapping = null;
    this.unfoundPositionList = null;
  }

  public int getMappingSize() {
    return (this.mapping == null) ? 0 : this.mapping.size();
  }

  public void putToMapping(long key, String val) {
    if (this.mapping == null) {
      this.mapping = new HashMap<Long,String>();
    }
    this.mapping.put(key, val);
  }

  public Map<Long,String> getMapping() {
    return this.mapping;
  }

  public PositionsToUris setMapping(Map<Long,String> mapping) {
    this.mapping = mapping;
    return this;
  }

  public void unsetMapping() {
    this.mapping = null;
  }

  /** Returns true if field mapping is set (has been assigned a value) and false otherwise */
  public boolean isSetMapping() {
    return this.mapping != null;
  }

  public void setMappingIsSet(boolean value) {
    if (!value) {
      this.mapping = null;
    }
  }

  public int getUnfoundPositionListSize() {
    return (this.unfoundPositionList == null) ? 0 : this.unfoundPositionList.size();
  }

  public java.util.Iterator<Long> getUnfoundPositionListIterator() {
    return (this.unfoundPositionList == null) ? null : this.unfoundPositionList.iterator();
  }

  public void addToUnfoundPositionList(long elem) {
    if (this.unfoundPositionList == null) {
      this.unfoundPositionList = new ArrayList<Long>();
    }
    this.unfoundPositionList.add(elem);
  }

  public List<Long> getUnfoundPositionList() {
    return this.unfoundPositionList;
  }

  public PositionsToUris setUnfoundPositionList(List<Long> unfoundPositionList) {
    this.unfoundPositionList = unfoundPositionList;
    return this;
  }

  public void unsetUnfoundPositionList() {
    this.unfoundPositionList = null;
  }

  /** Returns true if field unfoundPositionList is set (has been assigned a value) and false otherwise */
  public boolean isSetUnfoundPositionList() {
    return this.unfoundPositionList != null;
  }

  public void setUnfoundPositionListIsSet(boolean value) {
    if (!value) {
      this.unfoundPositionList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAPPING:
      if (value == null) {
        unsetMapping();
      } else {
        setMapping((Map<Long,String>)value);
      }
      break;

    case UNFOUND_POSITION_LIST:
      if (value == null) {
        unsetUnfoundPositionList();
      } else {
        setUnfoundPositionList((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAPPING:
      return getMapping();

    case UNFOUND_POSITION_LIST:
      return getUnfoundPositionList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAPPING:
      return isSetMapping();
    case UNFOUND_POSITION_LIST:
      return isSetUnfoundPositionList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PositionsToUris)
      return this.equals((PositionsToUris)that);
    return false;
  }

  public boolean equals(PositionsToUris that) {
    if (that == null)
      return false;

    boolean this_present_mapping = true && this.isSetMapping();
    boolean that_present_mapping = true && that.isSetMapping();
    if (this_present_mapping || that_present_mapping) {
      if (!(this_present_mapping && that_present_mapping))
        return false;
      if (!this.mapping.equals(that.mapping))
        return false;
    }

    boolean this_present_unfoundPositionList = true && this.isSetUnfoundPositionList();
    boolean that_present_unfoundPositionList = true && that.isSetUnfoundPositionList();
    if (this_present_unfoundPositionList || that_present_unfoundPositionList) {
      if (!(this_present_unfoundPositionList && that_present_unfoundPositionList))
        return false;
      if (!this.unfoundPositionList.equals(that.unfoundPositionList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_mapping = true && (isSetMapping());
    builder.append(present_mapping);
    if (present_mapping)
      builder.append(mapping);

    boolean present_unfoundPositionList = true && (isSetUnfoundPositionList());
    builder.append(present_unfoundPositionList);
    if (present_unfoundPositionList)
      builder.append(unfoundPositionList);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(PositionsToUris other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMapping()).compareTo(other.isSetMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapping, other.mapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnfoundPositionList()).compareTo(other.isSetUnfoundPositionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnfoundPositionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unfoundPositionList, other.unfoundPositionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PositionsToUris(");
    boolean first = true;

    sb.append("mapping:");
    if (this.mapping == null) {
      sb.append("null");
    } else {
      sb.append(this.mapping);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unfoundPositionList:");
    if (this.unfoundPositionList == null) {
      sb.append("null");
    } else {
      sb.append(this.unfoundPositionList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (mapping == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mapping' was not present! Struct: " + toString());
    }
    if (unfoundPositionList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unfoundPositionList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PositionsToUrisStandardSchemeFactory implements SchemeFactory {
    public PositionsToUrisStandardScheme getScheme() {
      return new PositionsToUrisStandardScheme();
    }
  }

  private static class PositionsToUrisStandardScheme extends StandardScheme<PositionsToUris> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PositionsToUris struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map156 = iprot.readMapBegin();
                struct.mapping = new HashMap<Long,String>(2*_map156.size);
                for (int _i157 = 0; _i157 < _map156.size; ++_i157)
                {
                  long _key158;
                  String _val159;
                  _key158 = iprot.readI64();
                  _val159 = iprot.readString();
                  struct.mapping.put(_key158, _val159);
                }
                iprot.readMapEnd();
              }
              struct.setMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNFOUND_POSITION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                struct.unfoundPositionList = new ArrayList<Long>(_list160.size);
                for (int _i161 = 0; _i161 < _list160.size; ++_i161)
                {
                  long _elem162;
                  _elem162 = iprot.readI64();
                  struct.unfoundPositionList.add(_elem162);
                }
                iprot.readListEnd();
              }
              struct.setUnfoundPositionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PositionsToUris struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mapping != null) {
        oprot.writeFieldBegin(MAPPING_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, struct.mapping.size()));
          for (Map.Entry<Long, String> _iter163 : struct.mapping.entrySet())
          {
            oprot.writeI64(_iter163.getKey());
            oprot.writeString(_iter163.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.unfoundPositionList != null) {
        oprot.writeFieldBegin(UNFOUND_POSITION_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.unfoundPositionList.size()));
          for (long _iter164 : struct.unfoundPositionList)
          {
            oprot.writeI64(_iter164);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PositionsToUrisTupleSchemeFactory implements SchemeFactory {
    public PositionsToUrisTupleScheme getScheme() {
      return new PositionsToUrisTupleScheme();
    }
  }

  private static class PositionsToUrisTupleScheme extends TupleScheme<PositionsToUris> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PositionsToUris struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.mapping.size());
        for (Map.Entry<Long, String> _iter165 : struct.mapping.entrySet())
        {
          oprot.writeI64(_iter165.getKey());
          oprot.writeString(_iter165.getValue());
        }
      }
      {
        oprot.writeI32(struct.unfoundPositionList.size());
        for (long _iter166 : struct.unfoundPositionList)
        {
          oprot.writeI64(_iter166);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PositionsToUris struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map167 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.mapping = new HashMap<Long,String>(2*_map167.size);
        for (int _i168 = 0; _i168 < _map167.size; ++_i168)
        {
          long _key169;
          String _val170;
          _key169 = iprot.readI64();
          _val170 = iprot.readString();
          struct.mapping.put(_key169, _val170);
        }
      }
      struct.setMappingIsSet(true);
      {
        org.apache.thrift.protocol.TList _list171 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.unfoundPositionList = new ArrayList<Long>(_list171.size);
        for (int _i172 = 0; _i172 < _list171.size; ++_i172)
        {
          long _elem173;
          _elem173 = iprot.readI64();
          struct.unfoundPositionList.add(_elem173);
        }
      }
      struct.setUnfoundPositionListIsSet(true);
    }
  }

}

