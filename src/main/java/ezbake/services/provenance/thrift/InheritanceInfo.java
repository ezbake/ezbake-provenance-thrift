/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.provenance.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InheritanceInfo implements org.apache.thrift.TBase<InheritanceInfo, InheritanceInfo._Fields>, java.io.Serializable, Cloneable, Comparable<InheritanceInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InheritanceInfo");

  private static final org.apache.thrift.protocol.TField PARENT_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("parentUri", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INHERIT_PARENT_AGE_OFF_FIELD_DESC = new org.apache.thrift.protocol.TField("inheritParentAgeOff", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField TRACK_PARENT_AGE_OFF_FIELD_DESC = new org.apache.thrift.protocol.TField("trackParentAgeOff", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField AGE_OFF_RELEVANT_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ageOffRelevantDateTime", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InheritanceInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InheritanceInfoTupleSchemeFactory());
  }

  public String parentUri; // required
  public boolean inheritParentAgeOff; // required
  public boolean trackParentAgeOff; // required
  public ezbake.base.thrift.DateTime ageOffRelevantDateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARENT_URI((short)1, "parentUri"),
    INHERIT_PARENT_AGE_OFF((short)2, "inheritParentAgeOff"),
    TRACK_PARENT_AGE_OFF((short)3, "trackParentAgeOff"),
    AGE_OFF_RELEVANT_DATE_TIME((short)4, "ageOffRelevantDateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARENT_URI
          return PARENT_URI;
        case 2: // INHERIT_PARENT_AGE_OFF
          return INHERIT_PARENT_AGE_OFF;
        case 3: // TRACK_PARENT_AGE_OFF
          return TRACK_PARENT_AGE_OFF;
        case 4: // AGE_OFF_RELEVANT_DATE_TIME
          return AGE_OFF_RELEVANT_DATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INHERITPARENTAGEOFF_ISSET_ID = 0;
  private static final int __TRACKPARENTAGEOFF_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.AGE_OFF_RELEVANT_DATE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARENT_URI, new org.apache.thrift.meta_data.FieldMetaData("parentUri", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INHERIT_PARENT_AGE_OFF, new org.apache.thrift.meta_data.FieldMetaData("inheritParentAgeOff", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRACK_PARENT_AGE_OFF, new org.apache.thrift.meta_data.FieldMetaData("trackParentAgeOff", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AGE_OFF_RELEVANT_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("ageOffRelevantDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InheritanceInfo.class, metaDataMap);
  }

  public InheritanceInfo() {
  }

  public InheritanceInfo(
    String parentUri,
    boolean inheritParentAgeOff,
    boolean trackParentAgeOff)
  {
    this();
    this.parentUri = parentUri;
    this.inheritParentAgeOff = inheritParentAgeOff;
    setInheritParentAgeOffIsSet(true);
    this.trackParentAgeOff = trackParentAgeOff;
    setTrackParentAgeOffIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InheritanceInfo(InheritanceInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetParentUri()) {
      this.parentUri = other.parentUri;
    }
    this.inheritParentAgeOff = other.inheritParentAgeOff;
    this.trackParentAgeOff = other.trackParentAgeOff;
    if (other.isSetAgeOffRelevantDateTime()) {
      this.ageOffRelevantDateTime = new ezbake.base.thrift.DateTime(other.ageOffRelevantDateTime);
    }
  }

  public InheritanceInfo deepCopy() {
    return new InheritanceInfo(this);
  }

  @Override
  public void clear() {
    this.parentUri = null;
    setInheritParentAgeOffIsSet(false);
    this.inheritParentAgeOff = false;
    setTrackParentAgeOffIsSet(false);
    this.trackParentAgeOff = false;
    this.ageOffRelevantDateTime = null;
  }

  public String getParentUri() {
    return this.parentUri;
  }

  public InheritanceInfo setParentUri(String parentUri) {
    this.parentUri = parentUri;
    return this;
  }

  public void unsetParentUri() {
    this.parentUri = null;
  }

  /** Returns true if field parentUri is set (has been assigned a value) and false otherwise */
  public boolean isSetParentUri() {
    return this.parentUri != null;
  }

  public void setParentUriIsSet(boolean value) {
    if (!value) {
      this.parentUri = null;
    }
  }

  public boolean isInheritParentAgeOff() {
    return this.inheritParentAgeOff;
  }

  public InheritanceInfo setInheritParentAgeOff(boolean inheritParentAgeOff) {
    this.inheritParentAgeOff = inheritParentAgeOff;
    setInheritParentAgeOffIsSet(true);
    return this;
  }

  public void unsetInheritParentAgeOff() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INHERITPARENTAGEOFF_ISSET_ID);
  }

  /** Returns true if field inheritParentAgeOff is set (has been assigned a value) and false otherwise */
  public boolean isSetInheritParentAgeOff() {
    return EncodingUtils.testBit(__isset_bitfield, __INHERITPARENTAGEOFF_ISSET_ID);
  }

  public void setInheritParentAgeOffIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INHERITPARENTAGEOFF_ISSET_ID, value);
  }

  public boolean isTrackParentAgeOff() {
    return this.trackParentAgeOff;
  }

  public InheritanceInfo setTrackParentAgeOff(boolean trackParentAgeOff) {
    this.trackParentAgeOff = trackParentAgeOff;
    setTrackParentAgeOffIsSet(true);
    return this;
  }

  public void unsetTrackParentAgeOff() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACKPARENTAGEOFF_ISSET_ID);
  }

  /** Returns true if field trackParentAgeOff is set (has been assigned a value) and false otherwise */
  public boolean isSetTrackParentAgeOff() {
    return EncodingUtils.testBit(__isset_bitfield, __TRACKPARENTAGEOFF_ISSET_ID);
  }

  public void setTrackParentAgeOffIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACKPARENTAGEOFF_ISSET_ID, value);
  }

  public ezbake.base.thrift.DateTime getAgeOffRelevantDateTime() {
    return this.ageOffRelevantDateTime;
  }

  public InheritanceInfo setAgeOffRelevantDateTime(ezbake.base.thrift.DateTime ageOffRelevantDateTime) {
    this.ageOffRelevantDateTime = ageOffRelevantDateTime;
    return this;
  }

  public void unsetAgeOffRelevantDateTime() {
    this.ageOffRelevantDateTime = null;
  }

  /** Returns true if field ageOffRelevantDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAgeOffRelevantDateTime() {
    return this.ageOffRelevantDateTime != null;
  }

  public void setAgeOffRelevantDateTimeIsSet(boolean value) {
    if (!value) {
      this.ageOffRelevantDateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARENT_URI:
      if (value == null) {
        unsetParentUri();
      } else {
        setParentUri((String)value);
      }
      break;

    case INHERIT_PARENT_AGE_OFF:
      if (value == null) {
        unsetInheritParentAgeOff();
      } else {
        setInheritParentAgeOff((Boolean)value);
      }
      break;

    case TRACK_PARENT_AGE_OFF:
      if (value == null) {
        unsetTrackParentAgeOff();
      } else {
        setTrackParentAgeOff((Boolean)value);
      }
      break;

    case AGE_OFF_RELEVANT_DATE_TIME:
      if (value == null) {
        unsetAgeOffRelevantDateTime();
      } else {
        setAgeOffRelevantDateTime((ezbake.base.thrift.DateTime)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARENT_URI:
      return getParentUri();

    case INHERIT_PARENT_AGE_OFF:
      return Boolean.valueOf(isInheritParentAgeOff());

    case TRACK_PARENT_AGE_OFF:
      return Boolean.valueOf(isTrackParentAgeOff());

    case AGE_OFF_RELEVANT_DATE_TIME:
      return getAgeOffRelevantDateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARENT_URI:
      return isSetParentUri();
    case INHERIT_PARENT_AGE_OFF:
      return isSetInheritParentAgeOff();
    case TRACK_PARENT_AGE_OFF:
      return isSetTrackParentAgeOff();
    case AGE_OFF_RELEVANT_DATE_TIME:
      return isSetAgeOffRelevantDateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InheritanceInfo)
      return this.equals((InheritanceInfo)that);
    return false;
  }

  public boolean equals(InheritanceInfo that) {
    if (that == null)
      return false;

    boolean this_present_parentUri = true && this.isSetParentUri();
    boolean that_present_parentUri = true && that.isSetParentUri();
    if (this_present_parentUri || that_present_parentUri) {
      if (!(this_present_parentUri && that_present_parentUri))
        return false;
      if (!this.parentUri.equals(that.parentUri))
        return false;
    }

    boolean this_present_inheritParentAgeOff = true;
    boolean that_present_inheritParentAgeOff = true;
    if (this_present_inheritParentAgeOff || that_present_inheritParentAgeOff) {
      if (!(this_present_inheritParentAgeOff && that_present_inheritParentAgeOff))
        return false;
      if (this.inheritParentAgeOff != that.inheritParentAgeOff)
        return false;
    }

    boolean this_present_trackParentAgeOff = true;
    boolean that_present_trackParentAgeOff = true;
    if (this_present_trackParentAgeOff || that_present_trackParentAgeOff) {
      if (!(this_present_trackParentAgeOff && that_present_trackParentAgeOff))
        return false;
      if (this.trackParentAgeOff != that.trackParentAgeOff)
        return false;
    }

    boolean this_present_ageOffRelevantDateTime = true && this.isSetAgeOffRelevantDateTime();
    boolean that_present_ageOffRelevantDateTime = true && that.isSetAgeOffRelevantDateTime();
    if (this_present_ageOffRelevantDateTime || that_present_ageOffRelevantDateTime) {
      if (!(this_present_ageOffRelevantDateTime && that_present_ageOffRelevantDateTime))
        return false;
      if (!this.ageOffRelevantDateTime.equals(that.ageOffRelevantDateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_parentUri = true && (isSetParentUri());
    builder.append(present_parentUri);
    if (present_parentUri)
      builder.append(parentUri);

    boolean present_inheritParentAgeOff = true;
    builder.append(present_inheritParentAgeOff);
    if (present_inheritParentAgeOff)
      builder.append(inheritParentAgeOff);

    boolean present_trackParentAgeOff = true;
    builder.append(present_trackParentAgeOff);
    if (present_trackParentAgeOff)
      builder.append(trackParentAgeOff);

    boolean present_ageOffRelevantDateTime = true && (isSetAgeOffRelevantDateTime());
    builder.append(present_ageOffRelevantDateTime);
    if (present_ageOffRelevantDateTime)
      builder.append(ageOffRelevantDateTime);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(InheritanceInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetParentUri()).compareTo(other.isSetParentUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentUri, other.parentUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInheritParentAgeOff()).compareTo(other.isSetInheritParentAgeOff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInheritParentAgeOff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inheritParentAgeOff, other.inheritParentAgeOff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrackParentAgeOff()).compareTo(other.isSetTrackParentAgeOff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrackParentAgeOff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trackParentAgeOff, other.trackParentAgeOff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgeOffRelevantDateTime()).compareTo(other.isSetAgeOffRelevantDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgeOffRelevantDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageOffRelevantDateTime, other.ageOffRelevantDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InheritanceInfo(");
    boolean first = true;

    sb.append("parentUri:");
    if (this.parentUri == null) {
      sb.append("null");
    } else {
      sb.append(this.parentUri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inheritParentAgeOff:");
    sb.append(this.inheritParentAgeOff);
    first = false;
    if (!first) sb.append(", ");
    sb.append("trackParentAgeOff:");
    sb.append(this.trackParentAgeOff);
    first = false;
    if (isSetAgeOffRelevantDateTime()) {
      if (!first) sb.append(", ");
      sb.append("ageOffRelevantDateTime:");
      if (this.ageOffRelevantDateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.ageOffRelevantDateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (parentUri == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'parentUri' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'inheritParentAgeOff' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'trackParentAgeOff' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (ageOffRelevantDateTime != null) {
      ageOffRelevantDateTime.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InheritanceInfoStandardSchemeFactory implements SchemeFactory {
    public InheritanceInfoStandardScheme getScheme() {
      return new InheritanceInfoStandardScheme();
    }
  }

  private static class InheritanceInfoStandardScheme extends StandardScheme<InheritanceInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InheritanceInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARENT_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentUri = iprot.readString();
              struct.setParentUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INHERIT_PARENT_AGE_OFF
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.inheritParentAgeOff = iprot.readBool();
              struct.setInheritParentAgeOffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRACK_PARENT_AGE_OFF
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.trackParentAgeOff = iprot.readBool();
              struct.setTrackParentAgeOffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AGE_OFF_RELEVANT_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ageOffRelevantDateTime = new ezbake.base.thrift.DateTime();
              struct.ageOffRelevantDateTime.read(iprot);
              struct.setAgeOffRelevantDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetInheritParentAgeOff()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inheritParentAgeOff' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTrackParentAgeOff()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'trackParentAgeOff' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InheritanceInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.parentUri != null) {
        oprot.writeFieldBegin(PARENT_URI_FIELD_DESC);
        oprot.writeString(struct.parentUri);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INHERIT_PARENT_AGE_OFF_FIELD_DESC);
      oprot.writeBool(struct.inheritParentAgeOff);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRACK_PARENT_AGE_OFF_FIELD_DESC);
      oprot.writeBool(struct.trackParentAgeOff);
      oprot.writeFieldEnd();
      if (struct.ageOffRelevantDateTime != null) {
        if (struct.isSetAgeOffRelevantDateTime()) {
          oprot.writeFieldBegin(AGE_OFF_RELEVANT_DATE_TIME_FIELD_DESC);
          struct.ageOffRelevantDateTime.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InheritanceInfoTupleSchemeFactory implements SchemeFactory {
    public InheritanceInfoTupleScheme getScheme() {
      return new InheritanceInfoTupleScheme();
    }
  }

  private static class InheritanceInfoTupleScheme extends TupleScheme<InheritanceInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InheritanceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.parentUri);
      oprot.writeBool(struct.inheritParentAgeOff);
      oprot.writeBool(struct.trackParentAgeOff);
      BitSet optionals = new BitSet();
      if (struct.isSetAgeOffRelevantDateTime()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetAgeOffRelevantDateTime()) {
        struct.ageOffRelevantDateTime.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InheritanceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.parentUri = iprot.readString();
      struct.setParentUriIsSet(true);
      struct.inheritParentAgeOff = iprot.readBool();
      struct.setInheritParentAgeOffIsSet(true);
      struct.trackParentAgeOff = iprot.readBool();
      struct.setTrackParentAgeOffIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.ageOffRelevantDateTime = new ezbake.base.thrift.DateTime();
        struct.ageOffRelevantDateTime.read(iprot);
        struct.setAgeOffRelevantDateTimeIsSet(true);
      }
    }
  }

}

